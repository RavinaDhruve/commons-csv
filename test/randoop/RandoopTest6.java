package randoop;

import junit.framework.*;

public class RandoopTest6 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test1");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape(' ');
    java.lang.String var15 = var14.toString();
    java.lang.Character var16 = var14.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var18 = var14.withQuote('a');
    java.lang.String[] var19 = var18.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ' '+ "'", var16.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test2");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var2.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var15 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments((java.lang.Object[])var15);
    boolean var17 = var2.equals((java.lang.Object)var16);
    java.lang.String[] var18 = var2.getHeader();
    java.lang.Character var19 = var2.getCommentMarker();
    org.apache.commons.csv.CSVFormat var21 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true", var2);
    org.apache.commons.csv.CSVFormat var24 = var2.withDelimiter(' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var26 = var2.withQuote((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test3");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('a');
    org.apache.commons.csv.CSVFormat var3 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var5 = var1.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreEmptyLines(false);
    char var8 = var7.getDelimiter();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)'4');
    boolean var16 = var15.isQuoteCharacterSet();
    char var17 = var15.getDelimiter();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var20 = var19.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = var20.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var24 = var22.withQuote((java.lang.Character)'4');
    java.lang.Character var25 = var24.getQuoteCharacter();
    boolean var26 = var24.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = var24.withIgnoreSurroundingSpaces(true);
    boolean var29 = var28.getSkipHeaderRecord();
    java.lang.String[] var30 = var28.getHeaderComments();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    boolean var34 = var32.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var36 = var32.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var37 = var36.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var41 = var39.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var42 = var41.getQuoteMode();
    java.lang.Character var43 = var41.getCommentMarker();
    java.lang.Object[] var44 = new java.lang.Object[] { var41};
    java.lang.String var45 = var37.format(var44);
    org.apache.commons.csv.CSVFormat var46 = var28.withHeaderComments(var44);
    boolean var47 = var46.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var50 = var49.getHeader();
    boolean var51 = var49.isCommentMarkerSet();
    boolean var52 = var49.getIgnoreSurroundingSpaces();
    boolean var53 = var49.isNullStringSet();
    org.apache.commons.csv.CSVFormat var55 = var49.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var56 = var49.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var58 = var49.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var60 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var61 = var60.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var62 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var63 = var60.withHeaderComments((java.lang.Object[])var62);
    boolean var64 = var49.equals((java.lang.Object)var63);
    java.lang.String[] var65 = var49.getHeader();
    java.lang.Character var66 = var49.getCommentMarker();
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var70 = var68.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var71 = var68.getHeaderComments();
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var74 = var73.withIgnoreEmptyLines();
    java.lang.String var75 = var73.toString();
    java.lang.Object[] var76 = new java.lang.Object[] { var73};
    java.lang.String var77 = var68.format(var76);
    org.apache.commons.csv.CSVFormat var79 = var68.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat.Predefined[] var80 = org.apache.commons.csv.CSVFormat.Predefined.values();
    java.lang.String var81 = var68.format((java.lang.Object[])var80);
    java.lang.String var82 = var49.format((java.lang.Object[])var80);
    java.lang.String var83 = var46.format((java.lang.Object[])var80);
    org.apache.commons.csv.CSVFormat var84 = var15.withHeaderComments((java.lang.Object[])var80);
    org.apache.commons.csv.CSVFormat var85 = var7.withHeaderComments((java.lang.Object[])var80);
    org.apache.commons.csv.CSVFormat var87 = var7.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '4'+ "'", var25.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + '4'+ "'", var43.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var75.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var77.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Default#Excel#MySQL#RFC4180#TDF"+ "'", var81.equals("Default#Excel#MySQL#RFC4180#TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Default#Excel#MySQL#RFC4180#TDF"+ "'", var82.equals("Default#Excel#MySQL#RFC4180#TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "Default#Excel#MySQL#4RFC441804#TDFa"+ "'", var83.equals("Default#Excel#MySQL#4RFC441804#TDFa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test4");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreEmptyLines();
    java.lang.String var8 = var6.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var6};
    java.lang.String var10 = var1.format(var9);
    org.apache.commons.csv.CSVFormat var12 = var1.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var14 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test5");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withDelimiter(' ');
    boolean var10 = var8.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var12 = var8.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var13 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test6");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('4');
    char var7 = var6.getDelimiter();
    boolean var8 = var6.getIgnoreSurroundingSpaces();
    boolean var9 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var11 = var6.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test7");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var5.withDelimiter(' ');
    boolean var11 = var9.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var13 = var9.withNullString("hi!");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var9);
    long var15 = var14.getCurrentLineNumber();
    java.util.Map var16 = var14.getHeaderMap();
    java.util.Iterator var17 = var14.iterator();
    java.util.Iterator var18 = var14.iterator();
    java.util.Iterator var19 = var14.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test8");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    boolean var15 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var17.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var20 = var19.getQuoteMode();
    org.apache.commons.csv.CSVFormat var22 = var19.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var24 = var22.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    boolean var27 = var26.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var26.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    boolean var31 = var30.getIgnoreHeaderCase();
    boolean var32 = var30.isQuoteCharacterSet();
    boolean var33 = var14.equals((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test9");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var15 = var13.withQuote((java.lang.Character)'4');
    java.lang.Character var16 = var15.getQuoteCharacter();
    boolean var17 = var15.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var15.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var26 = var24.withEscape(' ');
    java.lang.String[] var28 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var29 = var24.withHeader(var28);
    boolean var30 = var29.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var29.withSkipHeaderRecord(true);
    java.lang.String[] var33 = var32.getHeader();
    org.apache.commons.csv.CSVFormat var34 = var15.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var4.withHeaderComments((java.lang.Object[])var33);
    boolean var36 = var35.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + '4'+ "'", var16.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test10");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator('a');
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var10.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'4');
    java.lang.String[] var22 = var19.getHeaderComments();
    org.apache.commons.csv.CSVFormat var24 = var19.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var26 = var24.withQuote((java.lang.Character)'4');
    char var27 = var26.getDelimiter();
    org.apache.commons.csv.CSVFormat var29 = var26.withDelimiter('#');
    boolean var30 = var29.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var43 = var42.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var45 = var43.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var47 = var45.withEscape(' ');
    java.lang.String[] var49 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var50 = var45.withHeader(var49);
    org.apache.commons.csv.CSVFormat var51 = var38.withHeader(var49);
    org.apache.commons.csv.CSVFormat var52 = var35.withHeaderComments((java.lang.Object[])var49);
    org.apache.commons.csv.CSVFormat var53 = var52.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var54 = var52.withIgnoreEmptyLines();
    boolean var55 = var52.isEscapeCharacterSet();
    java.lang.String[] var56 = var52.getHeaderComments();
    java.lang.String var57 = var29.format((java.lang.Object[])var56);
    java.lang.String var58 = var10.format((java.lang.Object[])var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "4Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true4a"+ "'", var57.equals("4Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true4a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var58.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test11");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames(true);
    java.lang.Character var9 = var8.getQuoteCharacter();
    boolean var10 = var8.isQuoteCharacterSet();
    boolean var11 = var8.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test12");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var18 = var15.getHeaderComments();
    boolean var19 = var15.isCommentMarkerSet();
    java.lang.String var20 = var15.toString();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var23 = var22.getHeader();
    boolean var24 = var22.isCommentMarkerSet();
    boolean var25 = var22.getIgnoreSurroundingSpaces();
    boolean var26 = var22.isNullStringSet();
    org.apache.commons.csv.CSVFormat var28 = var22.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var29 = var22.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var30 = var29.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var34 = var33.getHeader();
    boolean var35 = var33.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    java.lang.Object[] var41 = new java.lang.Object[] { var38};
    org.apache.commons.csv.CSVFormat var42 = var33.withHeaderComments(var41);
    java.lang.String[] var43 = var42.getHeaderComments();
    org.apache.commons.csv.CSVFormat var44 = var31.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var15.withHeader(var43);
    org.apache.commons.csv.CSVFormat var47 = var15.withEscape((java.lang.Character)'4');
    java.lang.Character var48 = var47.getCommentMarker();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var52 = var50.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var53 = var52.getQuoteMode();
    org.apache.commons.csv.CSVFormat var55 = var52.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var57 = var52.withSkipHeaderRecord(false);
    java.lang.String[] var59 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var60 = var57.withHeader(var59);
    org.apache.commons.csv.CSVFormat var61 = var47.withHeader(var59);
    java.lang.String var62 = var12.format((java.lang.Object[])var59);
    boolean var63 = var12.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "#"+ "'", var13.equals("#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false#"+ "'", var62.equals("Delimiter=<#> SkipHeaderRecord:false#"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test13");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter(' ');
    org.apache.commons.csv.QuoteMode var11 = var8.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var8.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:trueDelimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var15 = var8.withNullString("Delimiter=<#> Escape=< > QuoteChar=<4> NullString=<> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.QuoteMode var16 = var15.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test14");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    java.lang.Character var9 = var6.getEscapeCharacter();
    char var10 = var6.getDelimiter();
    java.lang.String var11 = var6.getNullString();
    java.lang.String var12 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var6.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "a"+ "'", var12.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test15");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Spliterator var14 = var13.spliterator();
    java.util.Map var15 = var13.getHeaderMap();
    java.util.List var16 = var13.getRecords();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    var13.close();
    long var20 = var13.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0L);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test16");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    boolean var13 = var10.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test17");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String var7 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var9 = var6.withSkipHeaderRecord(true);
    boolean var10 = var6.getAllowMissingColumnNames();
    boolean var11 = var6.getAllowMissingColumnNames();
    java.lang.Character var12 = var6.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test18");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.String var10 = var4.toString();
    boolean var11 = var4.getIgnoreHeaderCase();
    boolean var12 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var15 = var14.getHeader();
    boolean var16 = var14.isCommentMarkerSet();
    boolean var17 = var14.getIgnoreSurroundingSpaces();
    boolean var18 = var14.isNullStringSet();
    org.apache.commons.csv.CSVFormat var20 = var14.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var29 = var27.withEscape(' ');
    java.lang.Character var30 = var29.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var37 = var35.withEscape(' ');
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var35.withHeader(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var44 = var40.withEscape(' ');
    org.apache.commons.csv.CSVFormat var46 = var44.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var48 = var44.withCommentMarker('4');
    boolean var49 = var44.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var52 = var51.getHeader();
    boolean var53 = var51.isCommentMarkerSet();
    boolean var54 = var51.getIgnoreSurroundingSpaces();
    boolean var55 = var51.isNullStringSet();
    org.apache.commons.csv.CSVFormat var57 = var51.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var58 = var51.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var59 = var58.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var60 = var59.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var63 = var62.getHeader();
    boolean var64 = var62.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var67 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var69 = var67.withRecordSeparator('a');
    java.lang.Object[] var70 = new java.lang.Object[] { var67};
    org.apache.commons.csv.CSVFormat var71 = var62.withHeaderComments(var70);
    java.lang.String[] var72 = var71.getHeaderComments();
    org.apache.commons.csv.CSVFormat var73 = var60.withHeader(var72);
    org.apache.commons.csv.CSVFormat var74 = var44.withHeader(var72);
    org.apache.commons.csv.CSVFormat var75 = var29.withHeaderComments((java.lang.Object[])var72);
    java.lang.String var76 = var20.format((java.lang.Object[])var72);
    org.apache.commons.csv.CSVFormat var77 = var4.withHeader(var72);
    org.apache.commons.csv.CSVFormat var79 = var77.withRecordSeparator('4');
    java.lang.String var80 = var79.toString();
    org.apache.commons.csv.CSVFormat var82 = var79.withAllowMissingColumnNames(true);
    java.lang.String var83 = var82.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Delimiter=<#> SkipHeaderRecord:true"+ "'", var76.equals("Delimiter=<#> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "Delimiter=<#> RecordSeparator=<4> SkipHeaderRecord:true Header:[Delimiter=<#> SkipHeaderRecord:true]"+ "'", var80.equals("Delimiter=<#> RecordSeparator=<4> SkipHeaderRecord:true Header:[Delimiter=<#> SkipHeaderRecord:true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "4"+ "'", var83.equals("4"));

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test19");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var4.withEscape('4');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var16 = var13.withCommentMarker((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test20");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var10 = var5.withDelimiter('#');
    java.lang.String[] var11 = var5.getHeader();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var14 = var13.getHeader();
    org.apache.commons.csv.CSVFormat var16 = var13.withEscape('a');
    org.apache.commons.csv.CSVFormat var18 = var13.withEscape(' ');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var21.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var25 = var23.withEscape(' ');
    org.apache.commons.csv.CSVFormat var27 = var23.withQuote('4');
    org.apache.commons.csv.CSVFormat var29 = var23.withIgnoreSurroundingSpaces(true);
    java.lang.String var30 = var29.toString();
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var37 = var34.getHeaderComments();
    boolean var38 = var34.isCommentMarkerSet();
    java.lang.String var39 = var34.toString();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var42 = var41.getHeader();
    boolean var43 = var41.isCommentMarkerSet();
    boolean var44 = var41.getIgnoreSurroundingSpaces();
    boolean var45 = var41.isNullStringSet();
    org.apache.commons.csv.CSVFormat var47 = var41.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var48 = var41.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var49 = var48.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var50 = var49.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var53 = var52.getHeader();
    boolean var54 = var52.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var57 = var56.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var59 = var57.withRecordSeparator('a');
    java.lang.Object[] var60 = new java.lang.Object[] { var57};
    org.apache.commons.csv.CSVFormat var61 = var52.withHeaderComments(var60);
    java.lang.String[] var62 = var61.getHeaderComments();
    org.apache.commons.csv.CSVFormat var63 = var50.withHeader(var62);
    org.apache.commons.csv.CSVFormat var64 = var34.withHeader(var62);
    org.apache.commons.csv.CSVFormat var65 = var29.withHeader(var62);
    org.apache.commons.csv.CSVFormat var66 = var13.withHeaderComments((java.lang.Object[])var62);
    org.apache.commons.csv.CSVFormat var67 = var5.withHeaderComments((java.lang.Object[])var62);
    boolean var68 = var5.isNullStringSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var70 = var5.withEscape((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var30.equals("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var39.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test21");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withCommentMarker((java.lang.Character)'a');
    char var11 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var16 = var15.getQuoteMode();
    boolean var17 = var15.isCommentMarkerSet();
    boolean var18 = var15.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    java.lang.Object[] var28 = new java.lang.Object[] { var25};
    org.apache.commons.csv.CSVFormat var29 = var20.withHeaderComments(var28);
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var31 = var15.withHeaderComments((java.lang.Object[])var30);
    org.apache.commons.csv.CSVFormat var32 = var10.withHeader(var30);
    org.apache.commons.csv.CSVFormat var34 = var32.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var36 = var34.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var38 = var36.withEscape((java.lang.Character)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test22");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    org.apache.commons.csv.CSVFormat var12 = var10.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var14 = var10.withEscape(' ');
    java.lang.String[] var15 = var10.getHeaderComments();
    java.lang.String var16 = var10.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var23 = var21.withEscape(' ');
    java.lang.String[] var25 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var26 = var21.withHeader(var25);
    java.lang.Character var27 = var26.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var28.withQuote((java.lang.Character)' ');
    java.lang.Character var31 = var30.getCommentMarker();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var38 = var36.withEscape(' ');
    java.lang.String[] var40 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var41 = var36.withHeader(var40);
    java.lang.String var42 = var30.format((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var43 = var10.withHeaderComments((java.lang.Object[])var40);
    org.apache.commons.csv.CSVParser var44 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false", var43);
    org.apache.commons.csv.CSVFormat var46 = var43.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var48 = var46.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "a"+ "'", var16.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=<#>  RecordSeparator=<a>  SkipHeaderRecord:true a"+ "'", var42.equals("Delimiter=<#>  RecordSeparator=<a>  SkipHeaderRecord:true a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test23");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var11 = var7.withNullString("a");
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    char var14 = var13.getDelimiter();
    org.apache.commons.csv.CSVFormat var16 = var13.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var17 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var21 = var19.withCommentMarker('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test24");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withRecordSeparator('#');
    java.lang.Character var11 = var10.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape(' ');
    boolean var19 = var16.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withQuote((java.lang.Character)'4');
    java.lang.Character var28 = var27.getQuoteCharacter();
    boolean var29 = var27.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var38 = var36.withEscape(' ');
    java.lang.String[] var40 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var41 = var36.withHeader(var40);
    boolean var42 = var41.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var44 = var41.withSkipHeaderRecord(true);
    java.lang.String[] var45 = var44.getHeader();
    org.apache.commons.csv.CSVFormat var46 = var27.withHeader(var45);
    org.apache.commons.csv.CSVFormat var47 = var16.withHeaderComments((java.lang.Object[])var45);
    org.apache.commons.csv.CSVFormat var48 = var10.withHeader(var45);
    org.apache.commons.csv.CSVFormat var50 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var52 = var50.withEscape(' ');
    org.apache.commons.csv.QuoteMode var53 = var52.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '4'+ "'", var28.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test25");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withNullString("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var16 = var12.withNullString("Default4Excel4MySQL4RFC41804TDFa");
    org.apache.commons.csv.CSVFormat var18 = var12.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var20 = var12.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test26");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape(' ');
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var12.withHeader(var16);
    boolean var18 = var17.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var17.withSkipHeaderRecord(true);
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var30 = var29.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var32 = var30.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var34.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var39 = var37.withEscape(' ');
    java.lang.String[] var41 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var42 = var37.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var30.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var27.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var45 = var20.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var7.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var48 = var7.withEscape(' ');
    boolean var49 = var48.getIgnoreSurroundingSpaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var51 = var48.withEscape('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test27");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    boolean var7 = var6.isQuoteCharacterSet();
    java.lang.String var8 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var10 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var11 = var6.withIgnoreEmptyLines();
    char var12 = var6.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test28");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withEscape((java.lang.Character)' ');
    boolean var11 = var10.isEscapeCharacterSet();
    char var12 = var10.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test29");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var10 = var5.getQuoteMode();
    org.apache.commons.csv.CSVFormat var11 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var15 = var11.withNullString("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var17 = var11.withEscape((java.lang.Character)'4');
    java.lang.String var18 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var21.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var24.withDelimiter('#');
    boolean var27 = var24.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var28 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", var24);
    boolean var29 = var24.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = var24.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var39 = var38.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var41 = var39.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var43 = var41.withEscape(' ');
    java.lang.String[] var45 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var46 = var41.withHeader(var45);
    org.apache.commons.csv.CSVFormat var47 = var34.withHeader(var45);
    org.apache.commons.csv.CSVFormat var48 = var24.withHeader(var45);
    boolean var49 = var48.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var51 = var48.withRecordSeparator("ALL#MINIMAL#NON_NUMERIC#NONEDelimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true");
    boolean var52 = var11.equals((java.lang.Object)var48);
    org.apache.commons.csv.CSVParser var53 = org.apache.commons.csv.CSVParser.parse("Default#Excel#MySQL#RFC4180#TDF", var11);
    long var54 = var53.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "a"+ "'", var18.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0L);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test30");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.String var10 = var4.toString();
    java.lang.String[] var11 = var4.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var4.withAllowMissingColumnNames(false);
    java.lang.String[] var14 = var4.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test31");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape(' ');
    org.apache.commons.csv.CSVFormat var16 = var12.withCommentMarker('a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var18 = var12.withQuote('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test32");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var3 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var4 = var1.withHeaderComments((java.lang.Object[])var3);
    org.apache.commons.csv.CSVFormat var6 = var1.withQuote(' ');
    java.lang.String[] var7 = var6.getHeader();
    boolean var8 = var6.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test33");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    boolean var8 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreHeaderCase(false);
    java.lang.Character var11 = var10.getQuoteCharacter();
    char var12 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var10.withAllowMissingColumnNames(false);
    java.lang.String var15 = var10.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var17 = var10.withCommentMarker('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test34");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String[] var6 = var5.getHeaderComments();
    boolean var7 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:trueDelimiter=<#>  RecordSeparator=<a>  SkipHeaderRecord:true a", var5);
    long var9 = var8.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test35");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withQuote('4');
    org.apache.commons.csv.CSVFormat var19 = var15.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var21 = var19.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var23 = var19.withQuote('4');
    boolean var24 = var19.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test36");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var6 = var5.withSkipHeaderRecord();
    boolean var7 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreEmptyLines();
    boolean var9 = var8.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:truea", var8);
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false", var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test37");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withQuote('a');
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreEmptyLines(true);
    java.lang.String var9 = var3.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var3.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var3.withCommentMarker((java.lang.Character)'a');
    java.lang.String[] var13 = var12.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test38");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines();
    boolean var7 = var6.getIgnoreEmptyLines();
    java.lang.Character var8 = var6.getQuoteCharacter();
    java.lang.String[] var9 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var11 = var6.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test39");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var17 = var13.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var19 = var13.withNullString("Delimiter=<#> RecordSeparator=<Default#Excel#MySQL#4RFC441804#TDFa> SkipHeaderRecord:true");
    boolean var20 = var13.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test40");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var5 = var2.getHeaderComments();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('4');
    char var8 = var7.getDelimiter();
    org.apache.commons.csv.CSVFormat var10 = var7.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Default#Excel#MySQL#RFC4180#TDFa", var10);
    var11.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test41");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Default4Excel4MySQL4RFC41804TDF");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test42");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var11 = var7.withNullString("a");
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var15 = var11.withNullString("Delimiter=<a> SkipHeaderRecord:false");
    java.lang.String var16 = var15.toString();
    boolean var17 = var15.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = var15.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var21 = var15.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Delimiter=<#> NullString=<Delimiter=<a> SkipHeaderRecord:false> RecordSeparator=<> SkipHeaderRecord:false"+ "'", var16.equals("Delimiter=<#> NullString=<Delimiter=<a> SkipHeaderRecord:false> RecordSeparator=<> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test43");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    boolean var7 = var6.getSkipHeaderRecord();
    java.lang.Character var8 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var6.withDelimiter('a');
    boolean var11 = var10.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var16 = var15.getQuoteMode();
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var20 = var18.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var24 = var20.withEscape((java.lang.Character)' ');
    boolean var25 = var24.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var28 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = var28.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var37 = var35.withEscape(' ');
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var35.withHeader(var39);
    org.apache.commons.csv.CSVFormat var41 = var28.withHeader(var39);
    org.apache.commons.csv.CSVFormat var42 = var24.withHeaderComments((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var43 = var10.withHeaderComments((java.lang.Object[])var39);
    boolean var44 = var43.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test44");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape(' ');
    java.lang.Character var18 = var17.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var21.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var25 = var23.withEscape(' ');
    java.lang.String[] var27 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var28 = var23.withHeader(var27);
    org.apache.commons.csv.CSVFormat var30 = var28.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var32 = var28.withEscape(' ');
    org.apache.commons.csv.CSVFormat var34 = var32.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var36 = var32.withCommentMarker('4');
    boolean var37 = var32.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var40 = var39.getHeader();
    boolean var41 = var39.isCommentMarkerSet();
    boolean var42 = var39.getIgnoreSurroundingSpaces();
    boolean var43 = var39.isNullStringSet();
    org.apache.commons.csv.CSVFormat var45 = var39.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var46 = var39.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var47.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var51 = var50.getHeader();
    boolean var52 = var50.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var55 = var54.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var57 = var55.withRecordSeparator('a');
    java.lang.Object[] var58 = new java.lang.Object[] { var55};
    org.apache.commons.csv.CSVFormat var59 = var50.withHeaderComments(var58);
    java.lang.String[] var60 = var59.getHeaderComments();
    org.apache.commons.csv.CSVFormat var61 = var48.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var32.withHeader(var60);
    org.apache.commons.csv.CSVFormat var63 = var17.withHeaderComments((java.lang.Object[])var60);
    java.lang.String var64 = var8.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var66 = var8.withRecordSeparator("Default#Excel#MySQL#4RFC441804#TDFa");
    org.apache.commons.csv.CSVParser var67 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:trueDelimiter=<#> SkipHeaderRecord:truea", var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Delimiter=<#> SkipHeaderRecord:true"+ "'", var64.equals("Delimiter=<#> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test45");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withEscape('a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false", var5);
    java.util.Map var7 = var6.getHeaderMap();
    long var8 = var6.getCurrentLineNumber();
    long var9 = var6.getRecordNumber();
    java.util.List var10 = var6.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test46");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape(' ');
    java.lang.String[] var10 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var11 = var6.withHeader(var10);
    org.apache.commons.csv.CSVFormat var13 = var6.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var15 = var13.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var17 = var13.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var19 = var17.withEscape((java.lang.Character)'a');
    boolean var20 = var1.equals((java.lang.Object)var19);
    org.apache.commons.csv.CSVFormat var22 = var1.withQuote('4');
    org.apache.commons.csv.CSVFormat var23 = var1.withAllowMissingColumnNames();
    boolean var24 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var27.withRecordSeparator('a');
    java.lang.String[] var30 = var27.getHeaderComments();
    boolean var31 = var27.isNullStringSet();
    org.apache.commons.csv.CSVFormat var33 = var27.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var40 = var38.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var42 = var38.withCommentMarker(' ');
    java.lang.String[] var43 = var38.getHeaderComments();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var46 = var45.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var48 = var46.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var50 = var48.withEscape(' ');
    java.lang.String[] var52 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var53 = var48.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var53.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var57 = var53.withEscape(' ');
    org.apache.commons.csv.CSVFormat var59 = var57.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var61 = var57.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var63 = var57.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var67 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var69 = var67.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var71 = var69.withEscape(' ');
    org.apache.commons.csv.CSVFormat var73 = var69.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var74 = var69.getQuoteMode();
    org.apache.commons.csv.CSVFormat var75 = var69.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var77 = var75.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var79 = var77.withEscape(' ');
    java.lang.String var80 = var79.toString();
    org.apache.commons.csv.CSVParser var81 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:falsea", var79);
    org.apache.commons.csv.CSVFormat var83 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var84 = var83.getHeader();
    boolean var85 = var83.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var87 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var88 = var87.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var90 = var88.withRecordSeparator('a');
    java.lang.Object[] var91 = new java.lang.Object[] { var88};
    org.apache.commons.csv.CSVFormat var92 = var83.withHeaderComments(var91);
    java.lang.String[] var93 = var92.getHeaderComments();
    java.lang.String var94 = var79.format((java.lang.Object[])var93);
    org.apache.commons.csv.CSVFormat var95 = var57.withHeader(var93);
    java.lang.String var96 = var38.format((java.lang.Object[])var93);
    org.apache.commons.csv.CSVFormat var97 = var27.withHeaderComments((java.lang.Object[])var93);
    boolean var98 = var1.equals((java.lang.Object)var97);
    boolean var99 = var1.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var80.equals("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Delimiter=< #>  SkipHeaderRecord:truea"+ "'", var94.equals("Delimiter=< #>  SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "Delimiter=<#> SkipHeaderRecord:truea"+ "'", var96.equals("Delimiter=<#> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test47");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    char var7 = var6.getDelimiter();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('4');
    boolean var10 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> RecordSeparator=<a> SkipHeaderRecord:true", var6);
    java.lang.String var12 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var14 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var17 = var16.getHeader();
    boolean var18 = var16.isCommentMarkerSet();
    boolean var19 = var16.getIgnoreSurroundingSpaces();
    boolean var20 = var16.isNullStringSet();
    org.apache.commons.csv.CSVFormat var22 = var16.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var23 = var16.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    java.lang.String[] var26 = var25.getHeaderComments();
    org.apache.commons.csv.CSVFormat var28 = var25.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var30 = var28.withNullString("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var32 = var30.withCommentMarker(' ');
    boolean var33 = var30.getIgnoreSurroundingSpaces();
    java.lang.Character var34 = var30.getCommentMarker();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var37 = var36.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var39 = var37.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var41 = var39.withEscape(' ');
    java.lang.String[] var43 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var44 = var39.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var30.withHeaderComments((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var46 = var14.withHeader(var43);
    org.apache.commons.csv.CSVFormat var48 = var46.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVParser var49 = org.apache.commons.csv.CSVParser.parse("ALL#MINIMAL#NON_NUMERIC#NONE#", var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test48");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var13.withDelimiter('#');
    boolean var16 = var13.getAllowMissingColumnNames();
    boolean var17 = var13.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test49");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var10.withQuote('a');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    java.lang.Character var20 = var18.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + 'a'+ "'", var20.equals('a'));

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test50");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    boolean var8 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreHeaderCase(false);
    java.lang.Character var11 = var10.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var13 = var10.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var22 = var20.withEscape(' ');
    org.apache.commons.csv.CSVFormat var24 = var20.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var25 = var20.getQuoteMode();
    boolean var26 = var20.isNullStringSet();
    org.apache.commons.csv.CSVFormat var28 = var20.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var29 = var20.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var34 = var33.getHeader();
    boolean var35 = var33.isCommentMarkerSet();
    boolean var36 = var33.getIgnoreSurroundingSpaces();
    boolean var37 = var33.isNullStringSet();
    org.apache.commons.csv.CSVFormat var39 = var33.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var40 = var33.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var42 = var33.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var44.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var46 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments((java.lang.Object[])var46);
    boolean var48 = var33.equals((java.lang.Object)var47);
    java.lang.String[] var49 = var33.getHeader();
    org.apache.commons.csv.CSVFormat var50 = var33.withAllowMissingColumnNames();
    boolean var51 = var50.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var53 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var54 = var53.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var56 = var54.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var58 = var56.withEscape(' ');
    java.lang.String[] var60 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var61 = var56.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var50.withHeader(var60);
    boolean var63 = var62.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var65 = var62.withIgnoreEmptyLines(false);
    java.lang.String[] var66 = var62.getHeader();
    java.lang.String var67 = var29.format((java.lang.Object[])var66);
    org.apache.commons.csv.CSVFormat var68 = var15.withHeaderComments((java.lang.Object[])var66);
    org.apache.commons.csv.CSVFormat var70 = var15.withQuote('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var67.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test51");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var7.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape(' ');
    java.lang.String[] var18 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var19 = var14.withHeader(var18);
    org.apache.commons.csv.CSVFormat var20 = var7.withHeader(var18);
    org.apache.commons.csv.CSVFormat var21 = var4.withHeaderComments((java.lang.Object[])var18);
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var21.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var26 = var21.withRecordSeparator('a');
    char var27 = var21.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == '#');

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test52");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    boolean var11 = var6.isEscapeCharacterSet();
    boolean var12 = var6.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test53");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var14 = var12.getQuoteMode();
    boolean var15 = var12.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var12.withNullString("Delimiter=<#> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test54");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape('a');
    boolean var17 = var16.getIgnoreSurroundingSpaces();
    boolean var18 = var16.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test55");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    java.lang.Character var12 = var10.getCommentMarker();
    java.lang.Object[] var13 = new java.lang.Object[] { var10};
    java.lang.String var14 = var6.format(var13);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var19.withHeader(var23);
    org.apache.commons.csv.CSVFormat var26 = var19.withCommentMarker((java.lang.Character)'4');
    boolean var27 = var6.equals((java.lang.Object)var19);
    org.apache.commons.csv.CSVFormat var29 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var31 = var6.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:truea");
    org.apache.commons.csv.CSVFormat var33 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var35 = var6.withQuote((java.lang.Character)'a');
    boolean var36 = var6.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var39 = var38.getHeader();
    boolean var40 = var38.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var43 = var42.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var44 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments((java.lang.Object[])var44);
    org.apache.commons.csv.CSVFormat var46 = var38.withHeaderComments((java.lang.Object[])var44);
    org.apache.commons.csv.CSVFormat var47 = var46.withIgnoreSurroundingSpaces();
    boolean var48 = var6.equals((java.lang.Object)var47);
    boolean var49 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.QuoteMode var50 = var6.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '4'+ "'", var12.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var14.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test56");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=< > QuoteChar=<4> CommentStart=<a> SkipHeaderRecord:true Header:[Delimiter=<#> SkipHeaderRecord:true]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test57");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreSurroundingSpaces();
    boolean var12 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    boolean var14 = var13.isQuoteCharacterSet();
    java.lang.String var15 = var13.getRecordSeparator();
    org.apache.commons.csv.QuoteMode var16 = var13.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "a"+ "'", var15.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test58");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    java.lang.Character var18 = var17.getQuoteCharacter();
    java.lang.String[] var19 = var17.getHeaderComments();
    org.apache.commons.csv.CSVFormat var21 = var17.withQuote((java.lang.Character)' ');
    java.lang.String[] var22 = var21.getHeaderComments();
    java.lang.String[] var23 = var21.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test59");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    java.lang.Character var5 = var3.getCommentMarker();
    java.lang.String[] var6 = var3.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '4'+ "'", var5.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test60");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var1.toString();
    boolean var4 = var1.isEscapeCharacterSet();
    boolean var5 = var1.getAllowMissingColumnNames();
    boolean var6 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape(' ');
    org.apache.commons.csv.CSVFormat var15 = var11.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    boolean var19 = var17.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var21 = var17.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var23 = var17.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var25.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var28 = var25.getHeaderComments();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var31 = var30.withIgnoreEmptyLines();
    java.lang.String var32 = var30.toString();
    java.lang.Object[] var33 = new java.lang.Object[] { var30};
    java.lang.String var34 = var25.format(var33);
    org.apache.commons.csv.CSVFormat var35 = var23.withHeaderComments(var33);
    org.apache.commons.csv.CSVFormat var36 = var11.withHeaderComments(var33);
    org.apache.commons.csv.CSVFormat var37 = var1.withHeaderComments(var33);
    org.apache.commons.csv.CSVFormat var39 = var37.withCommentMarker('a');
    java.lang.Character var40 = var39.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var32.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var34.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + 'a'+ "'", var40.equals('a'));

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test61");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var3 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var5 = var1.withAllowMissingColumnNames(false);
    boolean var6 = var1.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test62");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var7.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape(' ');
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var9.withHeader(var13);
    org.apache.commons.csv.CSVFormat var15 = var2.withHeader(var13);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withEscape(' ');
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var30 = var25.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var18.withHeader(var29);
    org.apache.commons.csv.CSVFormat var32 = var2.withHeader(var29);
    org.apache.commons.csv.CSVFormat var34 = var32.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.QuoteMode var35 = var34.getQuoteMode();
    org.apache.commons.csv.CSVFormat var37 = var34.withCommentMarker('4');
    java.lang.Character var38 = var37.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var40 = var37.withRecordSeparator(' ');
    boolean var41 = var37.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test63");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var9.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var13 = var9.withEscape(' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var17 = var13.withDelimiter('#');
    boolean var18 = var13.isNullStringSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var21.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var25.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = var26.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var30 = var28.withEscape(' ');
    java.lang.String[] var32 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var33 = var28.withHeader(var32);
    org.apache.commons.csv.CSVFormat var34 = var21.withHeader(var32);
    org.apache.commons.csv.CSVFormat var35 = var13.withHeader(var32);
    org.apache.commons.csv.CSVFormat var37 = var13.withDelimiter('a');
    java.lang.String var38 = var37.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test64");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.QuoteMode var8 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var7.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var12 = var7.withSkipHeaderRecord(true);
    char var13 = var12.getDelimiter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var12.withQuote('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == '#');

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test65");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    boolean var5 = var3.isCommentMarkerSet();
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withEscape(' ');
    boolean var13 = var12.isEscapeCharacterSet();
    boolean var14 = var12.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test66");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var7 = var6.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var6.withIgnoreSurroundingSpaces(true);
    boolean var12 = var6.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test67");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var15 = var13.withEscape(' ');
    boolean var16 = var13.getIgnoreSurroundingSpaces();
    boolean var17 = var13.isNullStringSet();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var20 = var19.getHeader();
    boolean var21 = var19.isCommentMarkerSet();
    boolean var22 = var19.getIgnoreSurroundingSpaces();
    boolean var23 = var19.isNullStringSet();
    org.apache.commons.csv.CSVFormat var25 = var19.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var26 = var19.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var28 = var19.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var31 = var30.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var32 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var33 = var30.withHeaderComments((java.lang.Object[])var32);
    boolean var34 = var19.equals((java.lang.Object)var33);
    java.lang.String[] var35 = var19.getHeader();
    java.lang.Character var36 = var19.getCommentMarker();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var40 = var38.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var41 = var38.getHeaderComments();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var44 = var43.withIgnoreEmptyLines();
    java.lang.String var45 = var43.toString();
    java.lang.Object[] var46 = new java.lang.Object[] { var43};
    java.lang.String var47 = var38.format(var46);
    org.apache.commons.csv.CSVFormat var49 = var38.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat.Predefined[] var50 = org.apache.commons.csv.CSVFormat.Predefined.values();
    java.lang.String var51 = var38.format((java.lang.Object[])var50);
    java.lang.String var52 = var19.format((java.lang.Object[])var50);
    java.lang.String var53 = var13.format((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var54 = var8.withHeaderComments((java.lang.Object[])var50);
    java.lang.String var55 = var8.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var57 = var8.withAllowMissingColumnNames(true);
    boolean var58 = var57.getIgnoreHeaderCase();
    java.lang.Character var59 = var57.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var45.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var47.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Default#Excel#MySQL#RFC4180#TDF"+ "'", var51.equals("Default#Excel#MySQL#RFC4180#TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Default#Excel#MySQL#RFC4180#TDF"+ "'", var52.equals("Default#Excel#MySQL#RFC4180#TDF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Default#Excel#MySQL#RFC4180#TDFa"+ "'", var53.equals("Default#Excel#MySQL#RFC4180#TDFa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test68");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    boolean var10 = var4.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var14 = var12.withDelimiter('4');
    boolean var15 = var12.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test69");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    boolean var7 = var6.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test70");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var14 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments((java.lang.Object[])var14);
    boolean var16 = var1.equals((java.lang.Object)var15);
    java.lang.String[] var17 = var1.getHeader();
    java.lang.Character var18 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var19 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    boolean var22 = var21.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test71");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    java.lang.String var5 = var1.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test72");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var11 = var7.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var7.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var16.withNullString("Delimiter=<#> CommentStart=< > NullString=<a> SkipHeaderRecord:false");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var20 = var16.withCommentMarker((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test73");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    java.lang.Character var8 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var4.withNullString("ALL#MINIMAL#NON_NUMERIC#NONEa");
    java.lang.Character var13 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var15 = var4.withAllowMissingColumnNames(false);
    boolean var16 = var4.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test74");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var19 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments((java.lang.Object[])var19);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withQuote((java.lang.Character)'4');
    java.lang.Character var28 = var27.getQuoteCharacter();
    boolean var29 = var27.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreSurroundingSpaces(true);
    boolean var32 = var31.getSkipHeaderRecord();
    java.lang.String[] var33 = var31.getHeaderComments();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    boolean var37 = var35.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var39 = var35.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var44 = var42.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var45 = var44.getQuoteMode();
    java.lang.Character var46 = var44.getCommentMarker();
    java.lang.Object[] var47 = new java.lang.Object[] { var44};
    java.lang.String var48 = var40.format(var47);
    org.apache.commons.csv.CSVFormat var49 = var31.withHeaderComments(var47);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var52 = var51.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var54 = var52.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var56 = var54.withQuote((java.lang.Character)'4');
    java.lang.Character var57 = var56.getQuoteCharacter();
    boolean var58 = var56.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var60 = var56.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var63 = var62.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var65 = var63.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var67 = var65.withEscape(' ');
    java.lang.String[] var69 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var70 = var65.withHeader(var69);
    boolean var71 = var70.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var73 = var70.withSkipHeaderRecord(true);
    java.lang.String[] var74 = var73.getHeader();
    org.apache.commons.csv.CSVFormat var75 = var56.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var31.withHeader(var74);
    java.lang.String var77 = var20.format((java.lang.Object[])var74);
    java.lang.String var78 = var15.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var81 = var80.getHeader();
    boolean var82 = var80.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var84 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var85 = var84.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var87 = var85.withRecordSeparator('a');
    java.lang.Object[] var88 = new java.lang.Object[] { var85};
    org.apache.commons.csv.CSVFormat var89 = var80.withHeaderComments(var88);
    org.apache.commons.csv.CSVFormat var90 = var15.withHeaderComments(var88);
    org.apache.commons.csv.CSVFormat var92 = var90.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var93 = var90.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var94 = var90.withIgnoreSurroundingSpaces();
    boolean var95 = var90.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '4'+ "'", var28.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + '4'+ "'", var46.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var48.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + '4'+ "'", var57.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var77.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var78.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test75");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('a');
    org.apache.commons.csv.CSVFormat var3 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var5 = var1.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:falsea");
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = var7.withSkipHeaderRecord(true);
    java.lang.String var11 = var10.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<#> SkipHeaderRecord:falsea"+ "'", var11.equals("Delimiter=<#> SkipHeaderRecord:falsea"));

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test76");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var5.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var8 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(true);
    boolean var11 = var3.equals((java.lang.Object)var10);
    char var12 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var10.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    char var15 = var14.getDelimiter();
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test77");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(true);
    boolean var11 = var10.isCommentMarkerSet();
    java.lang.Character var12 = var10.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '4'+ "'", var12.equals('4'));

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test78");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var5.withRecordSeparator('4');
    java.lang.Character var9 = var5.getQuoteCharacter();
    java.lang.String var10 = var5.toString();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var12.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var15 = var14.getQuoteMode();
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var19 = var14.withSkipHeaderRecord(false);
    java.lang.String[] var21 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeader(var21);
    org.apache.commons.csv.CSVFormat var23 = var5.withHeader(var21);
    org.apache.commons.csv.QuoteMode var24 = var5.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> CommentStart=< > SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=<#> CommentStart=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test79");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var2.toString();
    boolean var4 = var2.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withQuote((java.lang.Character)'4');
    java.lang.Character var17 = var16.getQuoteCharacter();
    boolean var18 = var16.getSkipHeaderRecord();
    boolean var20 = var16.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var16);
    boolean var22 = var21.isClosed();
    long var23 = var21.getCurrentLineNumber();
    java.util.List var24 = var21.getRecords();
    boolean var25 = var2.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '4'+ "'", var17.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test80");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    boolean var10 = var4.isNullStringSet();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var13 = var11.withQuote((java.lang.Character)'a');
    char var14 = var11.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == '#');

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test81");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    char var12 = var11.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var16 = var11.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var18 = var16.withNullString("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines(false);
    char var21 = var20.getDelimiter();
    boolean var22 = var20.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test82");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var9 = var8.getQuoteMode();
    boolean var10 = var8.isCommentMarkerSet();
    boolean var11 = var3.equals((java.lang.Object)var10);
    boolean var12 = var3.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var3.withCommentMarker((java.lang.Character)'a');
    boolean var15 = var14.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test83");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker('a');
    boolean var6 = var5.getSkipHeaderRecord();
    java.lang.String var7 = var5.toString();
    java.lang.Character var8 = var5.getEscapeCharacter();
    boolean var9 = var5.isQuoteCharacterSet();
    java.lang.String var10 = var5.getNullString();
    char var11 = var5.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var7.equals("Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == '#');

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test84");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('4');
    char var7 = var6.getDelimiter();
    org.apache.commons.csv.CSVFormat var9 = var6.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('a');
    org.apache.commons.csv.CSVFormat var12 = var11.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var15 = var14.getHeader();
    boolean var16 = var14.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    java.lang.Object[] var22 = new java.lang.Object[] { var19};
    org.apache.commons.csv.CSVFormat var23 = var14.withHeaderComments(var22);
    java.lang.String[] var24 = var23.getHeaderComments();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var27.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withEscape(' ');
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var29.withHeader(var33);
    org.apache.commons.csv.CSVFormat var36 = var34.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var38 = var34.withEscape(' ');
    boolean var39 = var23.equals((java.lang.Object)' ');
    org.apache.commons.csv.CSVFormat var40 = var23.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var41 = var23.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var44 = var43.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var46 = var44.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var48 = var46.withEscape(' ');
    java.lang.String[] var50 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var51 = var46.withHeader(var50);
    org.apache.commons.csv.CSVFormat var53 = var51.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var55 = var51.withEscape(' ');
    org.apache.commons.csv.CSVFormat var57 = var55.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var59 = var55.withCommentMarker('4');
    boolean var60 = var55.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var63 = var62.getHeader();
    boolean var64 = var62.isCommentMarkerSet();
    boolean var65 = var62.getIgnoreSurroundingSpaces();
    boolean var66 = var62.isNullStringSet();
    org.apache.commons.csv.CSVFormat var68 = var62.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var69 = var62.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var70 = var69.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var71 = var70.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var74 = var73.getHeader();
    boolean var75 = var73.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var77 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var78 = var77.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var80 = var78.withRecordSeparator('a');
    java.lang.Object[] var81 = new java.lang.Object[] { var78};
    org.apache.commons.csv.CSVFormat var82 = var73.withHeaderComments(var81);
    java.lang.String[] var83 = var82.getHeaderComments();
    org.apache.commons.csv.CSVFormat var84 = var71.withHeader(var83);
    org.apache.commons.csv.CSVFormat var85 = var55.withHeader(var83);
    org.apache.commons.csv.CSVFormat var86 = var41.withHeaderComments((java.lang.Object[])var83);
    org.apache.commons.csv.CSVFormat var87 = var12.withHeaderComments((java.lang.Object[])var83);
    char var88 = var12.getDelimiter();
    org.apache.commons.csv.CSVFormat var90 = var12.withIgnoreEmptyLines(false);
    boolean var91 = var6.equals((java.lang.Object)false);
    java.lang.String[] var92 = var6.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test85");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreSurroundingSpaces(true);
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var18 = var15.getHeaderComments();
    boolean var19 = var15.isCommentMarkerSet();
    java.lang.String var20 = var15.toString();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var23 = var22.getHeader();
    boolean var24 = var22.isCommentMarkerSet();
    boolean var25 = var22.getIgnoreSurroundingSpaces();
    boolean var26 = var22.isNullStringSet();
    org.apache.commons.csv.CSVFormat var28 = var22.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var29 = var22.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var30 = var29.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var34 = var33.getHeader();
    boolean var35 = var33.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    java.lang.Object[] var41 = new java.lang.Object[] { var38};
    org.apache.commons.csv.CSVFormat var42 = var33.withHeaderComments(var41);
    java.lang.String[] var43 = var42.getHeaderComments();
    org.apache.commons.csv.CSVFormat var44 = var31.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var15.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var10.withHeader(var43);
    java.lang.Character var47 = var46.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var50 = var49.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var52 = var50.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var54 = var52.withEscape(' ');
    java.lang.String[] var56 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var57 = var52.withHeader(var56);
    java.lang.Character var58 = var57.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var60 = var57.withIgnoreEmptyLines(true);
    boolean var61 = var57.getAllowMissingColumnNames();
    java.lang.String var62 = var57.toString();
    org.apache.commons.csv.CSVFormat var64 = var57.withEscape(' ');
    org.apache.commons.csv.CSVFormat var65 = var57.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var68 = var67.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var70 = var68.withRecordSeparator('a');
    java.lang.String var71 = var70.toString();
    boolean var72 = var70.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var74 = var70.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var76 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var78 = var76.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var79 = var78.getQuoteMode();
    boolean var80 = var78.isCommentMarkerSet();
    boolean var81 = var78.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var83 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var84 = var83.getHeader();
    boolean var85 = var83.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var87 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var88 = var87.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var90 = var88.withRecordSeparator('a');
    java.lang.Object[] var91 = new java.lang.Object[] { var88};
    org.apache.commons.csv.CSVFormat var92 = var83.withHeaderComments(var91);
    java.lang.String[] var93 = var92.getHeaderComments();
    org.apache.commons.csv.CSVFormat var94 = var78.withHeaderComments((java.lang.Object[])var93);
    org.apache.commons.csv.CSVFormat var95 = var74.withHeader(var93);
    org.apache.commons.csv.CSVFormat var96 = var57.withHeaderComments((java.lang.Object[])var93);
    org.apache.commons.csv.CSVFormat var97 = var46.withHeader(var93);
    org.apache.commons.csv.CSVFormat var99 = var97.withEscape((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true Header:[Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true]"+ "'", var62.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true Header:[Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var71.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test86");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines();
    boolean var9 = var8.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    java.lang.String var15 = var14.toString();
    boolean var16 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var14.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var23 = var22.getQuoteMode();
    boolean var24 = var22.isCommentMarkerSet();
    boolean var25 = var22.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var28 = var27.getHeader();
    boolean var29 = var27.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var32 = var31.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var34 = var32.withRecordSeparator('a');
    java.lang.Object[] var35 = new java.lang.Object[] { var32};
    org.apache.commons.csv.CSVFormat var36 = var27.withHeaderComments(var35);
    java.lang.String[] var37 = var36.getHeaderComments();
    org.apache.commons.csv.CSVFormat var38 = var22.withHeaderComments((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var39 = var18.withHeader(var37);
    org.apache.commons.csv.CSVFormat var40 = var8.withHeaderComments((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var42 = var8.withRecordSeparator("Delimiter=<#> Escape=< > SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test87");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withQuote(' ');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var2);
    long var7 = var6.getRecordNumber();
    boolean var8 = var6.isClosed();
    java.util.Map var9 = var6.getHeaderMap();
    java.util.Spliterator var10 = var6.spliterator();
    java.util.Spliterator var11 = var6.spliterator();
    java.util.Spliterator var12 = var6.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test88");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('#');
    char var12 = var6.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test89");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var1.toString();
    boolean var4 = var1.isEscapeCharacterSet();
    boolean var5 = var1.getAllowMissingColumnNames();
    java.lang.String var6 = var1.toString();
    org.apache.commons.csv.CSVFormat var8 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var9 = var8.getHeader();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test90");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var10 = var9.getQuoteMode();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var14 = var9.withSkipHeaderRecord(false);
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var17 = var14.withHeader(var16);
    java.lang.String var18 = var4.format((java.lang.Object[])var16);
    org.apache.commons.csv.QuoteMode[] var19 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var20 = var4.withHeaderComments((java.lang.Object[])var19);
    org.apache.commons.csv.CSVFormat var21 = var4.withAllowMissingColumnNames();
    boolean var22 = var21.getIgnoreEmptyLines();
    java.lang.String var23 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=<#> SkipHeaderRecord:falsea"+ "'", var18.equals("Delimiter=<#> SkipHeaderRecord:falsea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var23.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test91");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    boolean var10 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord();
    java.lang.String var12 = var11.toString();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var21 = var17.withCommentMarker(' ');
    java.lang.String[] var22 = var17.getHeaderComments();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var29 = var27.withEscape(' ');
    java.lang.String[] var31 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var32 = var27.withHeader(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var36 = var32.withEscape(' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var40 = var36.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var42 = var36.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var46 = var45.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var48 = var46.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var50 = var48.withEscape(' ');
    org.apache.commons.csv.CSVFormat var52 = var48.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var53 = var48.getQuoteMode();
    org.apache.commons.csv.CSVFormat var54 = var48.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var56 = var54.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var58 = var56.withEscape(' ');
    java.lang.String var59 = var58.toString();
    org.apache.commons.csv.CSVParser var60 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:falsea", var58);
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var63 = var62.getHeader();
    boolean var64 = var62.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var67 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var69 = var67.withRecordSeparator('a');
    java.lang.Object[] var70 = new java.lang.Object[] { var67};
    org.apache.commons.csv.CSVFormat var71 = var62.withHeaderComments(var70);
    java.lang.String[] var72 = var71.getHeaderComments();
    java.lang.String var73 = var58.format((java.lang.Object[])var72);
    org.apache.commons.csv.CSVFormat var74 = var36.withHeader(var72);
    java.lang.String var75 = var17.format((java.lang.Object[])var72);
    org.apache.commons.csv.CSVFormat var76 = var11.withHeader(var72);
    org.apache.commons.csv.CSVFormat var78 = var76.withQuote(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var59.equals("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "Delimiter=< #>  SkipHeaderRecord:truea"+ "'", var73.equals("Delimiter=< #>  SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Delimiter=<#> SkipHeaderRecord:truea"+ "'", var75.equals("Delimiter=<#> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test92");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    java.lang.String var4 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames();
    boolean var6 = var3.isQuoteCharacterSet();
    boolean var7 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var3.withQuote('#');
    java.lang.Character var10 = var9.getEscapeCharacter();
    boolean var11 = var9.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape(' ');
    org.apache.commons.csv.CSVFormat var20 = var16.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var21 = var16.getQuoteMode();
    org.apache.commons.csv.CSVFormat var22 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var22.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var30 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var31 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments((java.lang.Object[])var31);
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var34.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var39 = var37.withQuote((java.lang.Character)'4');
    java.lang.Character var40 = var39.getQuoteCharacter();
    boolean var41 = var39.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var43 = var39.withIgnoreSurroundingSpaces(true);
    boolean var44 = var43.getSkipHeaderRecord();
    java.lang.String[] var45 = var43.getHeaderComments();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var48 = var47.withSkipHeaderRecord();
    boolean var49 = var47.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var51 = var47.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var52 = var51.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var56 = var54.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var57 = var56.getQuoteMode();
    java.lang.Character var58 = var56.getCommentMarker();
    java.lang.Object[] var59 = new java.lang.Object[] { var56};
    java.lang.String var60 = var52.format(var59);
    org.apache.commons.csv.CSVFormat var61 = var43.withHeaderComments(var59);
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var64 = var63.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var66 = var64.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var68 = var66.withQuote((java.lang.Character)'4');
    java.lang.Character var69 = var68.getQuoteCharacter();
    boolean var70 = var68.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var72 = var68.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var74 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var75 = var74.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var77 = var75.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var79 = var77.withEscape(' ');
    java.lang.String[] var81 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var82 = var77.withHeader(var81);
    boolean var83 = var82.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var85 = var82.withSkipHeaderRecord(true);
    java.lang.String[] var86 = var85.getHeader();
    org.apache.commons.csv.CSVFormat var87 = var68.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var43.withHeader(var86);
    java.lang.String var89 = var32.format((java.lang.Object[])var86);
    java.lang.String var90 = var27.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var91 = var9.withHeaderComments((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var93 = var91.withCommentMarker('4');
    boolean var94 = var93.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '4'+ "'", var40.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + '4'+ "'", var58.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var60.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + '4'+ "'", var69.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var89.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var90.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test93");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var2.getRecordSeparator();
    boolean var4 = var2.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withNullString("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true HeaderComments:[Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false]");
    java.lang.String[] var7 = var6.getHeader();
    org.apache.commons.csv.CSVFormat var9 = var6.withRecordSeparator('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test94");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var11 = var7.withNullString("a");
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var15 = var11.withNullString("Delimiter=<a> SkipHeaderRecord:false");
    java.lang.String var16 = var15.toString();
    boolean var17 = var15.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreSurroundingSpaces();
    boolean var19 = var18.getIgnoreSurroundingSpaces();
    boolean var20 = var18.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Delimiter=<#> NullString=<Delimiter=<a> SkipHeaderRecord:false> RecordSeparator=<> SkipHeaderRecord:false"+ "'", var16.equals("Delimiter=<#> NullString=<Delimiter=<a> SkipHeaderRecord:false> RecordSeparator=<> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test95");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Map var14 = var13.getHeaderMap();
    long var15 = var13.getCurrentLineNumber();
    long var16 = var13.getCurrentLineNumber();
    long var17 = var13.getCurrentLineNumber();
    java.util.Map var18 = var13.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test96");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var10 = var2.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var12 = var2.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test97");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withQuote(' ');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var2);
    long var7 = var6.getCurrentLineNumber();
    java.util.List var8 = var6.getRecords();
    boolean var9 = var6.isClosed();
    var6.close();
    java.util.Map var11 = var6.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test98");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:trueDelimiter=<a> SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test99");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines(true);
    boolean var13 = var12.isNullStringSet();
    java.lang.String[] var14 = var12.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> QuoteChar=<4> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> QuoteChar=<4> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test100");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withQuote((java.lang.Character)'4');
    java.lang.Character var19 = var18.getQuoteCharacter();
    boolean var20 = var18.getSkipHeaderRecord();
    java.lang.Character var21 = var18.getEscapeCharacter();
    char var22 = var18.getDelimiter();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var25 = var24.getHeader();
    boolean var26 = var24.isCommentMarkerSet();
    boolean var27 = var24.getIgnoreSurroundingSpaces();
    boolean var28 = var24.isNullStringSet();
    org.apache.commons.csv.CSVFormat var30 = var24.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var31 = var24.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var33 = var24.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var37 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments((java.lang.Object[])var37);
    boolean var39 = var24.equals((java.lang.Object)var38);
    java.lang.String[] var40 = var24.getHeader();
    org.apache.commons.csv.CSVFormat var41 = var24.withAllowMissingColumnNames();
    boolean var42 = var41.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var47 = var45.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var49 = var47.withEscape(' ');
    java.lang.String[] var51 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var52 = var47.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var41.withHeader(var51);
    org.apache.commons.csv.CSVFormat var54 = var18.withHeader(var51);
    boolean var55 = var11.equals((java.lang.Object)var54);
    org.apache.commons.csv.CSVFormat var57 = var11.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var58 = var11.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '4'+ "'", var19.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test101");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var9.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape(' ');
    java.lang.String[] var20 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    org.apache.commons.csv.CSVFormat var22 = var11.withHeader(var20);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    java.lang.String var28 = var27.toString();
    boolean var29 = var27.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var27.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var33.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var36 = var35.getQuoteMode();
    boolean var37 = var35.isCommentMarkerSet();
    boolean var38 = var35.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var41 = var40.getHeader();
    boolean var42 = var40.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var47 = var45.withRecordSeparator('a');
    java.lang.Object[] var48 = new java.lang.Object[] { var45};
    org.apache.commons.csv.CSVFormat var49 = var40.withHeaderComments(var48);
    java.lang.String[] var50 = var49.getHeaderComments();
    org.apache.commons.csv.CSVFormat var51 = var35.withHeaderComments((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var52 = var31.withHeader(var50);
    org.apache.commons.csv.CSVFormat var53 = var22.withHeader(var50);
    org.apache.commons.csv.CSVFormat var55 = var22.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var57 = var22.withQuote(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var28.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test102");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withRecordSeparator("Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true");
    boolean var7 = var6.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames();
    java.lang.Character var9 = var8.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var8.withSkipHeaderRecord(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var11.withQuote('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test103");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    boolean var5 = var3.isCommentMarkerSet();
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var10.withEscape((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test104");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var9 = var8.getQuoteMode();
    boolean var10 = var8.isCommentMarkerSet();
    boolean var11 = var3.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVFormat var13 = var3.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var15 = var3.withSkipHeaderRecord(false);
    java.lang.Character var16 = var15.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var18 = var15.withEscape(' ');
    org.apache.commons.csv.CSVFormat var20 = var15.withSkipHeaderRecord(false);
    boolean var21 = var20.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test105");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var13 = var7.withRecordSeparator("hi!");
    java.lang.String var14 = var13.toString();
    java.lang.String[] var15 = var13.getHeader();
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("", var13);
    boolean var17 = var16.isClosed();
    long var18 = var16.getRecordNumber();
    long var19 = var16.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<#> QuoteChar=<4> RecordSeparator=<hi!> SkipHeaderRecord:true"+ "'", var14.equals("Delimiter=<#> QuoteChar=<4> RecordSeparator=<hi!> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0L);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test106");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    java.lang.Character var12 = var10.getCommentMarker();
    java.lang.Object[] var13 = new java.lang.Object[] { var10};
    java.lang.String var14 = var6.format(var13);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var19.withHeader(var23);
    org.apache.commons.csv.CSVFormat var26 = var19.withCommentMarker((java.lang.Character)'4');
    boolean var27 = var6.equals((java.lang.Object)var19);
    java.lang.String var28 = var6.getNullString();
    java.lang.String var29 = var6.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '4'+ "'", var12.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var14.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test107");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreSurroundingSpaces();
    boolean var12 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'a');
    java.lang.Character var16 = var13.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test108");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = var6.withCommentMarker(' ');
    boolean var11 = var10.isEscapeCharacterSet();
    boolean var12 = var10.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    boolean var17 = var15.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var19 = var15.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withEscape(' ');
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var30 = var25.withHeader(var29);
    java.lang.Character var31 = var25.getCommentMarker();
    org.apache.commons.csv.CSVFormat var32 = var25.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("", var25);
    java.util.Spliterator var34 = var33.spliterator();
    java.util.Map var35 = var33.getHeaderMap();
    java.util.Spliterator var36 = var33.spliterator();
    boolean var37 = var19.equals((java.lang.Object)var33);
    java.lang.Character var38 = var19.getCommentMarker();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    boolean var42 = var40.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var44 = var40.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var45 = var44.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var47 = var44.withRecordSeparator('4');
    java.lang.Character var48 = var44.getQuoteCharacter();
    java.lang.String var49 = var44.toString();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var53 = var51.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var54 = var53.getQuoteMode();
    org.apache.commons.csv.CSVFormat var56 = var53.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var58 = var53.withSkipHeaderRecord(false);
    java.lang.String[] var60 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var61 = var58.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var44.withHeader(var60);
    org.apache.commons.csv.CSVFormat var63 = var19.withHeader(var60);
    java.lang.String[] var64 = var63.getHeaderComments();
    org.apache.commons.csv.CSVFormat var66 = var63.withSkipHeaderRecord(false);
    boolean var67 = var10.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ' '+ "'", var38.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "Delimiter=<#> CommentStart=< > SkipHeaderRecord:false"+ "'", var49.equals("Delimiter=<#> CommentStart=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test109");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var7 = var3.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var17 = var11.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var20.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withDelimiter('#');
    boolean var26 = var23.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var27 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", var23);
    boolean var28 = var23.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var30 = var23.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var42 = var40.withEscape(' ');
    java.lang.String[] var44 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var45 = var40.withHeader(var44);
    org.apache.commons.csv.CSVFormat var46 = var33.withHeader(var44);
    org.apache.commons.csv.CSVFormat var47 = var23.withHeader(var44);
    org.apache.commons.csv.CSVFormat var48 = var11.withHeaderComments((java.lang.Object[])var44);
    org.apache.commons.csv.CSVFormat var49 = var8.withHeader(var44);
    boolean var50 = var49.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test110");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var4.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'4');
    java.lang.Character var12 = var9.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var14 = var9.withRecordSeparator('a');
    java.lang.String[] var15 = var14.getHeaderComments();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var23 = var21.withEscape(' ');
    boolean var24 = var21.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var25 = org.apache.commons.csv.CSVParser.parse("hi!", var21);
    java.util.Spliterator var26 = var25.spliterator();
    boolean var27 = var14.equals((java.lang.Object)var26);
    java.lang.Character var28 = var14.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test111");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.QuoteMode var16 = var11.getQuoteMode();
    org.apache.commons.csv.CSVFormat var17 = var11.withIgnoreSurroundingSpaces();
    java.lang.String[] var18 = var11.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test112");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var9.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var9.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var14 = var9.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test113");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var22 = var20.withEscape(' ');
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var20.withHeader(var24);
    org.apache.commons.csv.CSVFormat var26 = var13.withHeader(var24);
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var29 = var28.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var29.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var38 = var36.withEscape(' ');
    java.lang.String[] var40 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var41 = var36.withHeader(var40);
    org.apache.commons.csv.CSVFormat var42 = var29.withHeader(var40);
    org.apache.commons.csv.CSVFormat var43 = var13.withHeader(var40);
    org.apache.commons.csv.CSVFormat var45 = var43.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.QuoteMode var46 = var45.getQuoteMode();
    org.apache.commons.csv.CSVFormat var48 = var45.withCommentMarker('4');
    java.lang.Character var49 = var48.getEscapeCharacter();
    org.apache.commons.csv.CSVParser var50 = org.apache.commons.csv.CSVParser.parse("Default4Excel4MySQL4RFC41804TDFa", var48);
    boolean var51 = var8.equals((java.lang.Object)var48);
    org.apache.commons.csv.CSVFormat var52 = var48.withSkipHeaderRecord();
    boolean var53 = var52.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test114");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    boolean var10 = var4.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var13 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var18 = var17.getHeader();
    boolean var19 = var17.isCommentMarkerSet();
    boolean var20 = var17.getIgnoreSurroundingSpaces();
    boolean var21 = var17.isNullStringSet();
    org.apache.commons.csv.CSVFormat var23 = var17.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var24 = var17.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var26 = var17.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var29 = var28.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var30 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments((java.lang.Object[])var30);
    boolean var32 = var17.equals((java.lang.Object)var31);
    java.lang.String[] var33 = var17.getHeader();
    org.apache.commons.csv.CSVFormat var34 = var17.withAllowMissingColumnNames();
    boolean var35 = var34.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var42 = var40.withEscape(' ');
    java.lang.String[] var44 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var45 = var40.withHeader(var44);
    org.apache.commons.csv.CSVFormat var46 = var34.withHeader(var44);
    boolean var47 = var46.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var49 = var46.withIgnoreEmptyLines(false);
    java.lang.String[] var50 = var46.getHeader();
    java.lang.String var51 = var13.format((java.lang.Object[])var50);
    java.lang.String[] var52 = var13.getHeaderComments();
    org.apache.commons.csv.CSVFormat var54 = var13.withCommentMarker('a');
    java.lang.String[] var55 = var13.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var51.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test115");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var16.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var20 = var18.withEscape((java.lang.Character)'a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test116");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Spliterator var14 = var13.spliterator();
    java.util.Map var15 = var13.getHeaderMap();
    java.util.Spliterator var16 = var13.spliterator();
    java.util.List var17 = var13.getRecords();
    long var18 = var13.getRecordNumber();
    java.util.Spliterator var19 = var13.spliterator();
    java.util.Spliterator var20 = var13.spliterator();
    long var21 = var13.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0L);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test117");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<#> NullString=<Delimiter=<a> SkipHeaderRecord:false> RecordSeparator=<> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test118");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var4 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var5 = var1.withAllowMissingColumnNames();
    boolean var6 = var5.getAllowMissingColumnNames();
    boolean var7 = var5.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test119");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var10.withQuote('a');
    boolean var19 = var18.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreSurroundingSpaces(false);
    java.lang.String[] var23 = var18.getHeader();
    boolean var24 = var18.isNullStringSet();
    org.apache.commons.csv.CSVFormat var26 = var18.withRecordSeparator("Delimiter=<#> CommentStart=< > SkipHeaderRecord:false Header:[Delimiter=<#> SkipHeaderRecord:false]");
    char var27 = var26.getDelimiter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var29 = var26.withEscape((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == '#');

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test120");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator('a');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord(false);
    boolean var14 = var10.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test121");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var1.toString();
    java.lang.Character var4 = var1.getCommentMarker();
    java.lang.String var5 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var5.equals("Delimiter=<#> SkipHeaderRecord:false"));

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test122");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    char var6 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var5.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true", var5);
    org.apache.commons.csv.QuoteMode var13 = var5.getQuoteMode();
    char var14 = var5.getDelimiter();
    boolean var15 = var5.isNullStringSet();
    java.lang.String[] var16 = var5.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test123");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat.Predefined[] var8 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var9 = var1.withHeaderComments((java.lang.Object[])var8);
    boolean var10 = var1.getIgnoreEmptyLines();
    java.lang.String var11 = var1.getRecordSeparator();
    boolean var12 = var1.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test124");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Map var14 = var13.getHeaderMap();
    long var15 = var13.getRecordNumber();
    java.util.Spliterator var16 = var13.spliterator();
    java.util.List var17 = var13.getRecords();
    long var18 = var13.getCurrentLineNumber();
    long var19 = var13.getRecordNumber();
    var13.close();
    var13.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0L);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test125");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var5.withRecordSeparator('4');
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord(true);
    boolean var13 = var10.getIgnoreEmptyLines();
    boolean var14 = var10.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test126");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var14 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments((java.lang.Object[])var14);
    boolean var16 = var1.equals((java.lang.Object)var15);
    org.apache.commons.csv.CSVFormat var18 = var15.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var18.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var23 = var18.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var27 = var23.withCommentMarker('4');
    boolean var28 = var23.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test127");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var5.withDelimiter(' ');
    boolean var11 = var9.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var13 = var9.withNullString("hi!");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var9);
    long var15 = var14.getCurrentLineNumber();
    long var16 = var14.getCurrentLineNumber();
    java.util.List var17 = var14.getRecords();
    java.util.Map var18 = var14.getHeaderMap();
    java.util.Iterator var19 = var14.iterator();
    java.util.Map var20 = var14.getHeaderMap();
    long var21 = var14.getRecordNumber();
    java.util.List var22 = var14.getRecords();
    java.util.Spliterator var23 = var22.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test128");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator('a');
    java.lang.String var19 = var18.toString();
    boolean var20 = var18.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var18.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var24.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var27 = var26.getQuoteMode();
    boolean var28 = var26.isCommentMarkerSet();
    boolean var29 = var26.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var32 = var31.getHeader();
    boolean var33 = var31.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator('a');
    java.lang.Object[] var39 = new java.lang.Object[] { var36};
    org.apache.commons.csv.CSVFormat var40 = var31.withHeaderComments(var39);
    java.lang.String[] var41 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var42 = var26.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var43 = var22.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var11.withHeader(var41);
    org.apache.commons.csv.CSVFormat var45 = var44.withIgnoreSurroundingSpaces();
    java.lang.String var46 = var44.getNullString();
    org.apache.commons.csv.CSVFormat var48 = var44.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var50 = var44.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:falsea");
    org.apache.commons.csv.CSVFormat var51 = var50.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var53 = var50.withCommentMarker(' ');
    boolean var54 = var50.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var19.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test129");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    boolean var18 = var17.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    boolean var22 = var20.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var24 = var20.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var27 = var24.withRecordSeparator('4');
    java.lang.String var28 = var24.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = var24.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var34 = var33.getHeader();
    boolean var35 = var33.isCommentMarkerSet();
    boolean var36 = var33.getIgnoreSurroundingSpaces();
    boolean var37 = var33.isNullStringSet();
    org.apache.commons.csv.CSVFormat var39 = var33.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var40 = var33.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var41 = var40.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var45 = var43.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var47 = var43.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var48 = var43.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var50 = var48.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var53 = var52.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var55 = var53.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var57 = var55.withQuote((java.lang.Character)'4');
    java.lang.String[] var58 = var55.getHeaderComments();
    org.apache.commons.csv.QuoteMode var59 = var55.getQuoteMode();
    java.lang.Character var60 = var55.getQuoteCharacter();
    boolean var61 = var55.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var63 = var55.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var66 = var65.getHeader();
    boolean var67 = var65.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var70 = var69.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var72 = var70.withRecordSeparator('a');
    java.lang.Object[] var73 = new java.lang.Object[] { var70};
    org.apache.commons.csv.CSVFormat var74 = var65.withHeaderComments(var73);
    org.apache.commons.csv.CSVFormat var75 = var63.withHeaderComments(var73);
    org.apache.commons.csv.CSVFormat var76 = var50.withHeaderComments(var73);
    java.lang.String var77 = var31.format(var73);
    org.apache.commons.csv.CSVFormat var78 = var17.withHeaderComments(var73);
    java.lang.String var79 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Delimiter=<#> SkipHeaderRecord:true"+ "'", var77.equals("Delimiter=<#> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Delimiter=<#> CommentStart=<4> RecordSeparator=<4> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var79.equals("Delimiter=<#> CommentStart=<4> RecordSeparator=<4> SurroundingSpaces:ignored SkipHeaderRecord:true"));

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test130");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('a');
    org.apache.commons.csv.CSVFormat var3 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var5 = var1.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    java.lang.Character var6 = var5.getCommentMarker();
    boolean var7 = var5.getIgnoreHeaderCase();
    boolean var8 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var5.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test131");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var15.withSkipHeaderRecord(true);
    boolean var19 = var18.getSkipHeaderRecord();
    boolean var20 = var18.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var22 = var18.withDelimiter('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test132");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var1.toString();
    java.lang.Character var4 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var7 = var6.toString();
    java.lang.String var8 = var6.toString();
    org.apache.commons.csv.CSVFormat var10 = var6.withCommentMarker((java.lang.Character)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var7.equals("Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test133");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    boolean var8 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreHeaderCase(false);
    java.lang.Character var11 = var10.getQuoteCharacter();
    char var12 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var10.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var14.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var22 = var20.withRecordSeparator(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test134");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator('a');
    java.lang.String var19 = var18.toString();
    boolean var20 = var18.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var18.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var24.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var27 = var26.getQuoteMode();
    boolean var28 = var26.isCommentMarkerSet();
    boolean var29 = var26.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var32 = var31.getHeader();
    boolean var33 = var31.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator('a');
    java.lang.Object[] var39 = new java.lang.Object[] { var36};
    org.apache.commons.csv.CSVFormat var40 = var31.withHeaderComments(var39);
    java.lang.String[] var41 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var42 = var26.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var43 = var22.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var11.withHeader(var41);
    org.apache.commons.csv.CSVFormat var45 = var44.withIgnoreSurroundingSpaces();
    java.lang.String var46 = var44.getNullString();
    org.apache.commons.csv.CSVFormat var48 = var44.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var50 = var44.withNullString("Delimiter=<#> Escape=<a> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var51 = var50.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var19.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test135");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var10.withQuote('a');
    boolean var19 = var18.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var22 = var20.withDelimiter('#');
    java.lang.String var23 = var20.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test136");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=<#> RecordSeparator=<Delimiter=<#> SkipHeaderRecord:trueDelimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Delimiter=<#> SkipHeaderRecord:true]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test137");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var5 = var4.getQuoteMode();
    java.lang.String var6 = var4.toString();
    boolean var7 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var10 = var9.getHeader();
    boolean var11 = var9.isCommentMarkerSet();
    boolean var12 = var9.getIgnoreSurroundingSpaces();
    boolean var13 = var9.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var9.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var16 = var9.withIgnoreSurroundingSpaces();
    boolean var17 = var16.isNullStringSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var18 = org.apache.commons.csv.CSVFormat.Predefined.values();
    boolean var19 = var16.equals((java.lang.Object)var18);
    org.apache.commons.csv.CSVFormat var20 = var4.withHeaderComments((java.lang.Object[])var18);
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("", var4);
    var21.close();
    long var23 = var21.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0L);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test138");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    boolean var7 = var6.isQuoteCharacterSet();
    java.lang.String var8 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var10 = var6.withAllowMissingColumnNames(true);
    java.lang.String var11 = var10.getNullString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("Defaault#Excel#MySQL#RFC4180#TDFa");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test139");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    java.lang.String var6 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames();
    boolean var8 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var7.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var13 = var12.getHeader();
    boolean var14 = var12.isCommentMarkerSet();
    boolean var15 = var12.getIgnoreSurroundingSpaces();
    boolean var16 = var12.isNullStringSet();
    org.apache.commons.csv.CSVFormat var18 = var12.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var21.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var25 = var23.withEscape(' ');
    java.lang.String[] var27 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var28 = var23.withHeader(var27);
    boolean var29 = var28.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var28.withSkipHeaderRecord(true);
    java.lang.String[] var32 = var31.getHeader();
    boolean var33 = var31.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var43 = var41.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var46 = var45.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var48 = var46.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var50 = var48.withEscape(' ');
    java.lang.String[] var52 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var53 = var48.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var41.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var38.withHeaderComments((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var56 = var31.withHeader(var52);
    org.apache.commons.csv.CSVFormat var57 = var18.withHeaderComments((java.lang.Object[])var52);
    java.lang.String var58 = var10.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var60 = var10.withIgnoreSurroundingSpaces(true);
    boolean var61 = var10.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var63 = var10.withAllowMissingColumnNames(false);
    boolean var64 = var63.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var58.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test140");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var6.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withSkipHeaderRecord();
    boolean var14 = var12.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var16 = var12.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.QuoteMode var17 = var16.getQuoteMode();
    boolean var18 = var16.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    boolean var22 = var20.isEscapeCharacterSet();
    java.lang.String[] var23 = var20.getHeaderComments();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var25.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = var26.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var31 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var33 = var31.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var35 = var33.withEscape(' ');
    java.lang.String[] var37 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var38 = var33.withHeader(var37);
    org.apache.commons.csv.CSVFormat var39 = var26.withHeader(var37);
    java.lang.String var40 = var20.format((java.lang.Object[])var37);
    java.lang.String var41 = var16.format((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var42 = var6.withHeaderComments((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var44 = var6.withQuote(' ');
    org.apache.commons.csv.CSVFormat var46 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var48 = var6.withCommentMarker(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var40.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var41.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test141");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    org.apache.commons.csv.CSVFormat var12 = var10.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true", var10);
    long var14 = var13.getCurrentLineNumber();
    java.util.Iterator var15 = var13.iterator();
    var13.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var17 = var13.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test142");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    boolean var9 = var8.isNullStringSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var10 = org.apache.commons.csv.CSVFormat.Predefined.values();
    boolean var11 = var8.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    char var17 = var16.getDelimiter();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var19.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var22 = var21.getQuoteMode();
    org.apache.commons.csv.CSVFormat var24 = var21.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var26 = var21.withSkipHeaderRecord(false);
    java.lang.String[] var28 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeader(var28);
    java.lang.String var30 = var16.format((java.lang.Object[])var28);
    org.apache.commons.csv.CSVFormat var32 = var16.withNullString("");
    org.apache.commons.csv.CSVFormat var34 = var16.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var42 = var40.withEscape(' ');
    org.apache.commons.csv.CSVFormat var44 = var40.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var45 = var40.getQuoteMode();
    org.apache.commons.csv.CSVFormat var46 = var40.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var46.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var50 = var48.withEscape(' ');
    java.lang.String var51 = var50.toString();
    org.apache.commons.csv.CSVParser var52 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:falsea", var50);
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var55 = var54.getHeader();
    boolean var56 = var54.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var59 = var58.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var61 = var59.withRecordSeparator('a');
    java.lang.Object[] var62 = new java.lang.Object[] { var59};
    org.apache.commons.csv.CSVFormat var63 = var54.withHeaderComments(var62);
    java.lang.String[] var64 = var63.getHeaderComments();
    java.lang.String var65 = var50.format((java.lang.Object[])var64);
    org.apache.commons.csv.CSVFormat var66 = var34.withHeaderComments((java.lang.Object[])var64);
    org.apache.commons.csv.CSVFormat var67 = var8.withHeaderComments((java.lang.Object[])var64);
    org.apache.commons.csv.CSVFormat var69 = var67.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var71 = var67.withNullString("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<#> SkipHeaderRecord:falsea"+ "'", var30.equals("Delimiter=<#> SkipHeaderRecord:falsea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var51.equals("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "Delimiter=< #>  SkipHeaderRecord:truea"+ "'", var65.equals("Delimiter=< #>  SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test143");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withDelimiter(' ');
    boolean var10 = var8.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var12 = var8.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var14.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var19 = var17.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test144");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var10);
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var10.withSkipHeaderRecord(false);
    java.lang.Character var17 = var16.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreHeaderCase(false);
    java.lang.Character var20 = var16.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test145");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape(' ');
    java.lang.String[] var15 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    java.lang.Character var17 = var11.getCommentMarker();
    org.apache.commons.csv.CSVFormat var18 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("", var11);
    java.util.Spliterator var20 = var19.spliterator();
    java.util.Map var21 = var19.getHeaderMap();
    java.util.Spliterator var22 = var19.spliterator();
    boolean var23 = var5.equals((java.lang.Object)var19);
    var19.close();
    java.util.Map var25 = var19.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test146");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("hi!", var5);
    java.util.Spliterator var10 = var9.spliterator();
    java.util.Map var11 = var9.getHeaderMap();
    java.util.List var12 = var9.getRecords();
    java.util.Iterator var13 = var9.iterator();
    long var14 = var9.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test147");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var4 = var1.withEscape('a');
    boolean var5 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var8 = var1.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test148");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    java.lang.String[] var9 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var10 = var2.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true Header:[Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true]", var10);
    java.util.Iterator var12 = var11.iterator();
    boolean var13 = var11.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test149");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.QuoteMode var8 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var7.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var12 = var7.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'4');
    java.lang.String[] var22 = var19.getHeaderComments();
    org.apache.commons.csv.CSVFormat var23 = var19.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var28 = var26.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var29 = var28.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var29.withDelimiter('#');
    boolean var32 = var29.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", var29);
    boolean var34 = var29.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var36 = var29.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var39 = var38.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var41 = var39.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var44 = var43.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var46 = var44.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var48 = var46.withEscape(' ');
    java.lang.String[] var50 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var51 = var46.withHeader(var50);
    org.apache.commons.csv.CSVFormat var52 = var39.withHeader(var50);
    org.apache.commons.csv.CSVFormat var53 = var29.withHeader(var50);
    org.apache.commons.csv.CSVFormat var54 = var23.withHeader(var50);
    org.apache.commons.csv.CSVFormat var55 = var12.withHeader(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var57 = var55.withEscape('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test150");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    boolean var11 = var7.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var7);
    boolean var13 = var12.isClosed();
    java.util.List var14 = var12.getRecords();
    java.util.Spliterator var15 = var12.spliterator();
    long var16 = var12.getRecordNumber();
    long var17 = var12.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test151");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreEmptyLines();
    java.lang.String var8 = var6.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var6};
    java.lang.String var10 = var1.format(var9);
    java.lang.String var11 = var1.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var15 = var13.withEscape('4');
    org.apache.commons.csv.CSVFormat var16 = var15.withIgnoreSurroundingSpaces();
    java.lang.Character var17 = var16.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '4'+ "'", var17.equals('4'));

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test152");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    boolean var13 = var11.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var15 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var17 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var19.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var22 = var19.getHeaderComments();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withIgnoreEmptyLines();
    java.lang.String var26 = var24.toString();
    java.lang.Object[] var27 = new java.lang.Object[] { var24};
    java.lang.String var28 = var19.format(var27);
    org.apache.commons.csv.CSVFormat var29 = var17.withHeaderComments(var27);
    org.apache.commons.csv.CSVFormat var30 = var5.withHeaderComments(var27);
    org.apache.commons.csv.CSVFormat var32 = var5.withRecordSeparator("Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false", var5);
    org.apache.commons.csv.CSVFormat var35 = var5.withIgnoreHeaderCase(false);
    boolean var36 = var5.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var26.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test153");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withDelimiter('4');
    boolean var16 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var20 = var10.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var22 = var10.withNullString("Delimiter=<#> RecordSeparator=<> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test154");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var9.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    char var18 = var17.getDelimiter();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var23 = var22.getQuoteMode();
    org.apache.commons.csv.CSVFormat var25 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = var22.withSkipHeaderRecord(false);
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeader(var29);
    java.lang.String var31 = var17.format((java.lang.Object[])var29);
    org.apache.commons.csv.CSVFormat var32 = var12.withHeaderComments((java.lang.Object[])var29);
    boolean var33 = var12.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var34 = var12.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=<#> SkipHeaderRecord:falsea"+ "'", var31.equals("Delimiter=<#> SkipHeaderRecord:falsea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test155");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces();
    java.lang.String var6 = var5.getRecordSeparator();
    boolean var7 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var11 = var5.withIgnoreEmptyLines(false);
    java.lang.Character var12 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var13 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test156");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("Delimiter=<#> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var15 = var11.withRecordSeparator('a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var17 = var11.withEscape((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test157");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('a');
    org.apache.commons.csv.CSVFormat var3 = var1.withNullString("ALL#MINIMAL#NON_NUMERIC#NONEa");
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var7 = var3.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var9 = var3.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test158");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Defaault#Excel#MySQL#RFC4180#TDFa");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test159");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var2.toString();
    boolean var4 = var2.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withSkipHeaderRecord();
    boolean var8 = var6.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var6.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape(' ');
    java.lang.String[] var20 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    java.lang.Character var22 = var16.getCommentMarker();
    org.apache.commons.csv.CSVFormat var23 = var16.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var24 = org.apache.commons.csv.CSVParser.parse("", var16);
    java.util.Spliterator var25 = var24.spliterator();
    java.util.Map var26 = var24.getHeaderMap();
    java.util.Spliterator var27 = var24.spliterator();
    boolean var28 = var10.equals((java.lang.Object)var24);
    java.util.Spliterator var29 = var24.spliterator();
    java.util.Spliterator var30 = var24.spliterator();
    var24.close();
    boolean var32 = var2.equals((java.lang.Object)var24);
    java.util.Map var33 = var24.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test160");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var10);
    java.util.List var12 = var11.getRecords();
    boolean var13 = var11.isClosed();
    long var14 = var11.getCurrentLineNumber();
    java.util.Spliterator var15 = var11.spliterator();
    boolean var16 = var11.isClosed();
    boolean var17 = var11.isClosed();
    var11.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test161");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var2.toString();
    boolean var4 = var2.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var7.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape(' ');
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var9.withHeader(var13);
    java.lang.Character var15 = var14.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var23 = var21.withEscape(' ');
    java.lang.String[] var25 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var26 = var21.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var16.withHeader(var25);
    org.apache.commons.csv.CSVFormat var28 = var2.withHeader(var25);
    org.apache.commons.csv.CSVFormat var29 = var2.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var2.withRecordSeparator('a');
    java.lang.Character var32 = var31.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test162");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var1.toString();
    boolean var4 = var1.isEscapeCharacterSet();
    boolean var5 = var1.getIgnoreSurroundingSpaces();
    boolean var6 = var1.isCommentMarkerSet();
    boolean var7 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(false);
    boolean var12 = var9.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test163");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator("Default#Excel#MySQL#RFC4180#TDFa");
    boolean var11 = var10.isNullStringSet();
    java.lang.String[] var12 = var10.getHeaderComments();
    boolean var13 = var10.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test164");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape('a');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withIgnoreEmptyLines();
    java.lang.String var20 = var18.toString();
    boolean var21 = var18.isEscapeCharacterSet();
    boolean var22 = var18.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var29 = var27.withEscape(' ');
    org.apache.commons.csv.CSVFormat var31 = var27.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var32 = var27.getQuoteMode();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var35 = var34.getHeader();
    boolean var36 = var34.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var39 = var38.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var40 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var42 = var34.withHeaderComments((java.lang.Object[])var40);
    java.lang.String var43 = var27.format((java.lang.Object[])var40);
    java.lang.String var44 = var18.format((java.lang.Object[])var40);
    org.apache.commons.csv.CSVFormat var45 = var14.withHeaderComments((java.lang.Object[])var40);
    java.lang.Character var46 = var14.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var47 = var14.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var49 = var14.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var43.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONE"+ "'", var44.equals("ALL#MINIMAL#NON_NUMERIC#NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test165");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    boolean var8 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreHeaderCase(false);
    java.lang.String var11 = var10.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var12.withAllowMissingColumnNames();
    boolean var14 = var12.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "a"+ "'", var11.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test166");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withAllowMissingColumnNames(true);
    boolean var16 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = var10.withIgnoreSurroundingSpaces(true);
    boolean var19 = var18.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test167");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreSurroundingSpaces();
    boolean var12 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator("Delimiter=< #>  SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var23 = var21.withEscape(' ');
    java.lang.String[] var25 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var26 = var21.withHeader(var25);
    org.apache.commons.csv.CSVFormat var28 = var21.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var30 = var21.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var31 = var21.withAllowMissingColumnNames();
    char var32 = var21.getDelimiter();
    org.apache.commons.csv.CSVFormat var34 = var21.withRecordSeparator("a");
    org.apache.commons.csv.CSVFormat var36 = var21.withQuote('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator(' ');
    boolean var39 = var14.equals((java.lang.Object)var38);
    boolean var40 = var14.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test168");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    java.lang.Character var12 = var10.getCommentMarker();
    java.lang.Object[] var13 = new java.lang.Object[] { var10};
    java.lang.String var14 = var6.format(var13);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var19.withHeader(var23);
    org.apache.commons.csv.CSVFormat var26 = var19.withCommentMarker((java.lang.Character)'4');
    boolean var27 = var6.equals((java.lang.Object)var19);
    org.apache.commons.csv.CSVFormat var29 = var6.withDelimiter('a');
    boolean var30 = var29.getAllowMissingColumnNames();
    char var31 = var29.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '4'+ "'", var12.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var14.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 'a');

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test169");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var9 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreEmptyLines(false);
    boolean var15 = var12.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test170");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    boolean var14 = var12.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var12.withNullString("ALL#MINIMAL#NON_NUMERIC#NONE4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test171");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    boolean var4 = var2.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var12 = var11.getQuoteMode();
    java.lang.Character var13 = var11.getCommentMarker();
    java.lang.Object[] var14 = new java.lang.Object[] { var11};
    java.lang.String var15 = var7.format(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var22 = var20.withEscape(' ');
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var20.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = var20.withCommentMarker((java.lang.Character)'4');
    boolean var28 = var7.equals((java.lang.Object)var20);
    org.apache.commons.csv.CSVParser var29 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true", var7);
    org.apache.commons.csv.CSVFormat var31 = var7.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var32 = var31.withSkipHeaderRecord();
    boolean var33 = var31.getIgnoreHeaderCase();
    char var34 = var31.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '4'+ "'", var13.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == '#');

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test172");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    boolean var15 = var13.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = var13.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var19 = var13.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var24 = var21.getHeaderComments();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withIgnoreEmptyLines();
    java.lang.String var28 = var26.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var26};
    java.lang.String var30 = var21.format(var29);
    org.apache.commons.csv.CSVFormat var31 = var19.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var39 = var38.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var41 = var39.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var43 = var41.withEscape(' ');
    java.lang.String[] var45 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var46 = var41.withHeader(var45);
    org.apache.commons.csv.CSVFormat var47 = var34.withHeader(var45);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var50 = var49.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var52 = var50.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var55 = var54.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var57 = var55.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var59 = var57.withEscape(' ');
    java.lang.String[] var61 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var62 = var57.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var50.withHeader(var61);
    org.apache.commons.csv.CSVFormat var64 = var34.withHeader(var61);
    java.lang.String var65 = var19.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var11.withHeaderComments((java.lang.Object[])var61);
    java.lang.String[] var67 = var66.getHeaderComments();
    org.apache.commons.csv.CSVFormat var69 = var66.withRecordSeparator("Delimiter=<#> CommentStart=< > RecordSeparator=<a> SkipHeaderRecord:false HeaderComments:[ALL, MINIMAL, NON_NUMERIC, NONE]");
    boolean var70 = var69.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var30.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var65.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test173");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreSurroundingSpaces();
    boolean var15 = var14.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var22 = var20.withEscape(' ');
    boolean var23 = var20.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var24 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var27.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withQuote((java.lang.Character)'4');
    java.lang.Character var32 = var31.getQuoteCharacter();
    boolean var33 = var31.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var31.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var42 = var40.withEscape(' ');
    java.lang.String[] var44 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var45 = var40.withHeader(var44);
    boolean var46 = var45.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var48 = var45.withSkipHeaderRecord(true);
    java.lang.String[] var49 = var48.getHeader();
    org.apache.commons.csv.CSVFormat var50 = var31.withHeader(var49);
    org.apache.commons.csv.CSVFormat var51 = var20.withHeaderComments((java.lang.Object[])var49);
    java.lang.Character var52 = var51.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var54 = var51.withRecordSeparator("Delimiter=<#> CommentStart=<4> NullString=<Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var56 = var54.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var57 = var56.getHeaderComments();
    org.apache.commons.csv.CSVFormat var58 = var14.withHeaderComments((java.lang.Object[])var57);
    java.lang.String var59 = var14.toString();
    char var60 = var14.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + '4'+ "'", var32.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Delimiter=<#> CommentStart=<4> RecordSeparator=<> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var59.equals("Delimiter=<#> CommentStart=<4> RecordSeparator=<> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == '#');

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test174");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var10);
    boolean var12 = var10.getAllowMissingColumnNames();
    java.lang.String[] var13 = var10.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test175");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    boolean var10 = var9.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var14 = var12.withNullString("4");
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false", var14);
    java.util.Spliterator var16 = var15.spliterator();
    java.util.Spliterator var17 = var15.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test176");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var4.withSkipHeaderRecord(false);
    boolean var14 = var4.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test177");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String[] var6 = var5.getHeaderComments();
    boolean var7 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:trueDelimiter=<#>  RecordSeparator=<a>  SkipHeaderRecord:true a", var5);
    java.util.Spliterator var9 = var8.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test178");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withQuote(' ');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var2);
    java.util.Iterator var7 = var6.iterator();
    long var8 = var6.getRecordNumber();
    java.util.Spliterator var9 = var6.spliterator();
    java.util.Map var10 = var6.getHeaderMap();
    long var11 = var6.getCurrentLineNumber();
    var6.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test179");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=<#> QuoteChar=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test180");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator("Default#Excel#MySQL#RFC4180#TDFa");
    boolean var11 = var10.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var10.withCommentMarker('a');
    boolean var14 = var10.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test181");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var4 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var9 = var8.getHeader();
    boolean var10 = var8.isCommentMarkerSet();
    boolean var11 = var8.getIgnoreSurroundingSpaces();
    boolean var12 = var8.isNullStringSet();
    org.apache.commons.csv.CSVFormat var14 = var8.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var15 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var8.withEscape((java.lang.Character)' ');
    boolean var18 = var17.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreEmptyLines();
    java.lang.String var22 = var20.toString();
    boolean var23 = var20.isEscapeCharacterSet();
    boolean var24 = var20.getIgnoreSurroundingSpaces();
    boolean var25 = var20.isCommentMarkerSet();
    boolean var26 = var20.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var28 = var20.withEscape(' ');
    org.apache.commons.csv.CSVFormat var30 = var20.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    java.lang.String var36 = var35.toString();
    boolean var37 = var35.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var39 = var35.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var43 = var41.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var44 = var43.getQuoteMode();
    boolean var45 = var43.isCommentMarkerSet();
    boolean var46 = var43.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var49 = var48.getHeader();
    boolean var50 = var48.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var53 = var52.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var55 = var53.withRecordSeparator('a');
    java.lang.Object[] var56 = new java.lang.Object[] { var53};
    org.apache.commons.csv.CSVFormat var57 = var48.withHeaderComments(var56);
    java.lang.String[] var58 = var57.getHeaderComments();
    org.apache.commons.csv.CSVFormat var59 = var43.withHeaderComments((java.lang.Object[])var58);
    org.apache.commons.csv.CSVFormat var60 = var39.withHeader(var58);
    org.apache.commons.csv.CSVFormat var61 = var20.withHeader(var58);
    org.apache.commons.csv.CSVFormat var62 = var17.withHeader(var58);
    java.lang.String var63 = var4.format((java.lang.Object[])var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var22.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var36.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Delimiter=<a#> SkipHeaaderRecord:true"+ "'", var63.equals("Delimiter=<a#> SkipHeaaderRecord:true"));

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test182");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var9.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines(true);
    boolean var13 = var9.getAllowMissingColumnNames();
    java.lang.String var14 = var9.toString();
    org.apache.commons.csv.CSVFormat var16 = var9.withEscape(' ');
    org.apache.commons.csv.CSVFormat var17 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true Header:[Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true]"+ "'", var14.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true Header:[Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test183");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var7 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var8 = var5.withHeaderComments((java.lang.Object[])var7);
    org.apache.commons.csv.CSVFormat var9 = var1.withHeaderComments((java.lang.Object[])var7);
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var9.withQuote(' ');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var16 = var14.withEscape('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test184");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var18 = var15.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreEmptyLines();
    java.lang.String var22 = var20.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var20};
    java.lang.String var24 = var15.format(var23);
    org.apache.commons.csv.CSVFormat var26 = var15.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var28 = var15.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var31 = var30.getHeader();
    boolean var32 = var30.isCommentMarkerSet();
    boolean var33 = var30.getIgnoreSurroundingSpaces();
    boolean var34 = var30.isNullStringSet();
    org.apache.commons.csv.CSVFormat var36 = var30.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var39 = var38.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var41 = var39.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var43 = var41.withEscape(' ');
    java.lang.String[] var45 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var46 = var41.withHeader(var45);
    boolean var47 = var46.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var49 = var46.withSkipHeaderRecord(true);
    java.lang.String[] var50 = var49.getHeader();
    boolean var51 = var49.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var53 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var54 = var53.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var56 = var54.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var59 = var58.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var61 = var59.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var64 = var63.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var66 = var64.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var68 = var66.withEscape(' ');
    java.lang.String[] var70 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var71 = var66.withHeader(var70);
    org.apache.commons.csv.CSVFormat var72 = var59.withHeader(var70);
    org.apache.commons.csv.CSVFormat var73 = var56.withHeaderComments((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var74 = var49.withHeader(var70);
    org.apache.commons.csv.CSVFormat var75 = var36.withHeaderComments((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var76 = var28.withHeader(var70);
    java.lang.String var77 = var13.format((java.lang.Object[])var70);
    boolean var78 = var13.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var22.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var77.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test185");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var12 = var11.getHeader();
    boolean var13 = var11.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var16 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var17 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var18 = var15.withHeaderComments((java.lang.Object[])var17);
    org.apache.commons.csv.CSVFormat var19 = var11.withHeaderComments((java.lang.Object[])var17);
    java.lang.String var20 = var4.format((java.lang.Object[])var17);
    boolean var21 = var4.isEscapeCharacterSet();
    boolean var22 = var4.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var24 = var4.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var26 = var4.withRecordSeparator("Default#Excel#MySQL#RFC4180#TDF");
    java.lang.Character var27 = var4.getEscapeCharacter();
    java.lang.String[] var28 = var4.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var20.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test186");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    boolean var8 = var4.isEscapeCharacterSet();
    java.lang.String var9 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var4.withAllowMissingColumnNames(true);
    boolean var12 = var11.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var14 = var11.withRecordSeparator("Delimiter=<#> CommentStart=< > SkipHeaderRecord:true");
    java.lang.String[] var15 = var14.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test187");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var6 = var4.withSkipHeaderRecord();
    java.lang.String[] var7 = var6.getHeader();
    char var8 = var6.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == '#');

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test188");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("hi!", var5);
    java.util.Map var10 = var9.getHeaderMap();
    var9.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var9.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test189");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    boolean var11 = var7.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var7);
    java.util.Iterator var13 = var12.iterator();
    var12.close();
    long var15 = var12.getRecordNumber();
    var12.close();
    java.util.Iterator var17 = var12.iterator();
    java.util.Spliterator var18 = var12.spliterator();
    java.util.Iterator var19 = var12.iterator();
    var12.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test190");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withNullString("");
    java.lang.String var10 = var9.toString();
    org.apache.commons.csv.CSVFormat var12 = var9.withEscape((java.lang.Character)'a');
    java.lang.Character var13 = var9.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> QuoteChar=<4> NullString=<> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> QuoteChar=<4> NullString=<> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '4'+ "'", var13.equals('4'));

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test191");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withDelimiter('#');
    org.apache.commons.csv.QuoteMode var14 = var13.getQuoteMode();
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines();
    java.lang.String var16 = var13.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test192");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var18 = var17.getHeader();
    boolean var19 = var17.isCommentMarkerSet();
    boolean var20 = var17.getIgnoreSurroundingSpaces();
    boolean var21 = var17.isNullStringSet();
    org.apache.commons.csv.CSVFormat var23 = var17.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var24 = var17.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = var25.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var29 = var27.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var31.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var34 = var31.getHeaderComments();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var37 = var36.withIgnoreEmptyLines();
    java.lang.String var38 = var36.toString();
    java.lang.Object[] var39 = new java.lang.Object[] { var36};
    java.lang.String var40 = var31.format(var39);
    org.apache.commons.csv.CSVFormat var42 = var31.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var44 = var31.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var47 = var46.getHeader();
    boolean var48 = var46.isCommentMarkerSet();
    boolean var49 = var46.getIgnoreSurroundingSpaces();
    boolean var50 = var46.isNullStringSet();
    org.apache.commons.csv.CSVFormat var52 = var46.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var55 = var54.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var57 = var55.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var59 = var57.withEscape(' ');
    java.lang.String[] var61 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var62 = var57.withHeader(var61);
    boolean var63 = var62.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var65 = var62.withSkipHeaderRecord(true);
    java.lang.String[] var66 = var65.getHeader();
    boolean var67 = var65.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var70 = var69.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var72 = var70.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var74 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var75 = var74.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var77 = var75.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var79 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var80 = var79.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var82 = var80.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var84 = var82.withEscape(' ');
    java.lang.String[] var86 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var87 = var82.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var75.withHeader(var86);
    org.apache.commons.csv.CSVFormat var89 = var72.withHeaderComments((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var90 = var65.withHeader(var86);
    org.apache.commons.csv.CSVFormat var91 = var52.withHeaderComments((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var92 = var44.withHeader(var86);
    java.lang.String var93 = var29.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var94 = var15.withHeader(var86);
    org.apache.commons.csv.CSVFormat var96 = var94.withIgnoreEmptyLines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var38.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var40.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var93.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test193");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    boolean var8 = var4.isEscapeCharacterSet();
    boolean var9 = var4.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test194");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.isCommentMarkerSet();
    boolean var23 = var20.getIgnoreSurroundingSpaces();
    boolean var24 = var20.isNullStringSet();
    org.apache.commons.csv.CSVFormat var26 = var20.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var27 = var20.withIgnoreSurroundingSpaces();
    boolean var28 = var27.isNullStringSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var29 = org.apache.commons.csv.CSVFormat.Predefined.values();
    boolean var30 = var27.equals((java.lang.Object)var29);
    java.lang.String var31 = var15.format((java.lang.Object[])var29);
    org.apache.commons.csv.QuoteMode var32 = var15.getQuoteMode();
    java.lang.String var33 = var15.toString();
    org.apache.commons.csv.CSVFormat var35 = var15.withSkipHeaderRecord(false);
    java.lang.Character var36 = var35.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Default4Excel4MySQL4RFC41804TDFa"+ "'", var31.equals("Default4Excel4MySQL4RFC41804TDFa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Delimiter=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var33.equals("Delimiter=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test195");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var5.withDelimiter(' ');
    boolean var11 = var9.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var13 = var9.withNullString("hi!");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var9);
    long var15 = var14.getCurrentLineNumber();
    java.util.Iterator var16 = var14.iterator();
    boolean var17 = var14.isClosed();
    boolean var18 = var14.isClosed();
    var14.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test196");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreEmptyLines();
    java.lang.String var8 = var6.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var6};
    java.lang.String var10 = var1.format(var9);
    org.apache.commons.csv.CSVFormat var12 = var1.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var14 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withDelimiter('#');
    boolean var19 = var18.getAllowMissingColumnNames();
    java.lang.String[] var20 = var18.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test197");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var5 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var7 = var4.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var9 = var7.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var11 = var9.withNullString("Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true");
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true HeaderComments:[Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false]", var11);
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var17 = var15.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test198");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    boolean var8 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreHeaderCase(false);
    java.lang.Character var11 = var10.getQuoteCharacter();
    char var12 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var10.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var16.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var20 = var18.withEscape(' ');
    boolean var21 = var20.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test199");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var5.withDelimiter(' ');
    boolean var11 = var9.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var13 = var9.withNullString("hi!");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var9);
    long var15 = var14.getCurrentLineNumber();
    long var16 = var14.getCurrentLineNumber();
    java.util.List var17 = var14.getRecords();
    java.util.Map var18 = var14.getHeaderMap();
    java.util.List var19 = var14.getRecords();
    java.util.Map var20 = var14.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test200");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("Delimiter=<#> Escape=< > SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test201");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    char var12 = var11.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var16 = var14.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var18 = var14.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var20 = var14.withCommentMarker('4');
    boolean var21 = var20.isNullStringSet();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var24 = var23.getHeader();
    boolean var25 = var23.isCommentMarkerSet();
    boolean var26 = var23.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var28 = var23.withCommentMarker((java.lang.Character)'a');
    boolean var29 = var28.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = var28.withIgnoreSurroundingSpaces(false);
    java.lang.String var32 = var31.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var34 = var31.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var36 = var31.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var39 = var38.getHeader();
    boolean var40 = var38.isCommentMarkerSet();
    boolean var41 = var38.getIgnoreSurroundingSpaces();
    boolean var42 = var38.isNullStringSet();
    org.apache.commons.csv.CSVFormat var44 = var38.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var47 = var46.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var49 = var47.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var51 = var49.withEscape(' ');
    java.lang.String[] var53 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var54 = var49.withHeader(var53);
    boolean var55 = var54.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var57 = var54.withSkipHeaderRecord(true);
    java.lang.String[] var58 = var57.getHeader();
    boolean var59 = var57.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var62 = var61.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var64 = var62.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var67 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var69 = var67.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var71 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var72 = var71.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var74 = var72.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var76 = var74.withEscape(' ');
    java.lang.String[] var78 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var79 = var74.withHeader(var78);
    org.apache.commons.csv.CSVFormat var80 = var67.withHeader(var78);
    org.apache.commons.csv.CSVFormat var81 = var64.withHeaderComments((java.lang.Object[])var78);
    org.apache.commons.csv.CSVFormat var82 = var57.withHeader(var78);
    org.apache.commons.csv.CSVFormat var83 = var44.withHeaderComments((java.lang.Object[])var78);
    boolean var84 = var83.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var86 = var83.withEscape((java.lang.Character)'4');
    java.lang.String[] var87 = var86.getHeaderComments();
    java.lang.String var88 = var36.format((java.lang.Object[])var87);
    org.apache.commons.csv.CSVFormat var89 = var20.withHeaderComments((java.lang.Object[])var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var88.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test202");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var2.toString();
    java.lang.String[] var4 = var2.getHeader();
    char var5 = var2.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '#');

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test203");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(true);
    boolean var11 = var10.getSkipHeaderRecord();
    java.lang.String[] var12 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    boolean var16 = var14.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var14.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var24 = var23.getQuoteMode();
    java.lang.Character var25 = var23.getCommentMarker();
    java.lang.Object[] var26 = new java.lang.Object[] { var23};
    java.lang.String var27 = var19.format(var26);
    org.apache.commons.csv.CSVFormat var28 = var10.withHeaderComments(var26);
    java.lang.String[] var29 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var31 = var10.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var33 = var10.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '4'+ "'", var25.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test204");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.QuoteMode var18 = var15.getQuoteMode();
    org.apache.commons.csv.CSVFormat var20 = var15.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var22 = var15.withEscape('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test205");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var8 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var12 = var10.withEscape(' ');
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var10.withHeader(var14);
    org.apache.commons.csv.CSVFormat var16 = var3.withHeader(var14);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var24.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var28 = var26.withEscape(' ');
    java.lang.String[] var30 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var31 = var26.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var19.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = var3.withHeader(var30);
    org.apache.commons.csv.CSVFormat var35 = var33.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.QuoteMode var36 = var35.getQuoteMode();
    org.apache.commons.csv.CSVFormat var38 = var35.withCommentMarker('4');
    java.lang.Character var39 = var38.getEscapeCharacter();
    org.apache.commons.csv.CSVParser var40 = org.apache.commons.csv.CSVParser.parse("Default4Excel4MySQL4RFC41804TDFa", var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var42 = var38.withQuote((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test206");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("4 Default4 Excel4 MySQL4 RFC41804 TDFDelimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test207");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker((java.lang.Character)'4');
    boolean var10 = var1.equals((java.lang.Object)var7);
    org.apache.commons.csv.CSVFormat var12 = var7.withIgnoreEmptyLines(false);
    java.lang.Character var13 = var12.getCommentMarker();
    org.apache.commons.csv.CSVFormat var15 = var12.withIgnoreHeaderCase(false);
    boolean var16 = var12.getAllowMissingColumnNames();
    java.lang.Character var17 = var12.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test208");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape(' ');
    java.lang.String[] var15 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    java.lang.Character var17 = var11.getCommentMarker();
    org.apache.commons.csv.CSVFormat var18 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("", var11);
    java.util.Spliterator var20 = var19.spliterator();
    java.util.Map var21 = var19.getHeaderMap();
    java.util.Spliterator var22 = var19.spliterator();
    boolean var23 = var5.equals((java.lang.Object)var19);
    boolean var24 = var19.isClosed();
    long var25 = var19.getCurrentLineNumber();
    java.util.List var26 = var19.getRecords();
    long var27 = var19.getRecordNumber();
    boolean var28 = var19.isClosed();
    long var29 = var19.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0L);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test209");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Spliterator var14 = var13.spliterator();
    java.util.Map var15 = var13.getHeaderMap();
    java.util.List var16 = var13.getRecords();
    java.util.Iterator var17 = var13.iterator();
    java.util.Map var18 = var13.getHeaderMap();
    boolean var19 = var13.isClosed();
    java.util.Iterator var20 = var13.iterator();
    java.util.List var21 = var13.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test210");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withEscape('a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false", var5);
    java.util.Map var7 = var6.getHeaderMap();
    java.util.List var8 = var6.getRecords();
    java.util.Spliterator var9 = var6.spliterator();
    java.util.Spliterator var10 = var6.spliterator();
    boolean var11 = var6.isClosed();
    long var12 = var6.getCurrentLineNumber();
    java.util.Iterator var13 = var6.iterator();
    java.util.Map var14 = var6.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test211");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var4.withAllowMissingColumnNames();
    char var15 = var4.getDelimiter();
    boolean var16 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var4.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test212");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var5.withDelimiter(' ');
    boolean var11 = var9.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var13 = var9.withNullString("hi!");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var9);
    long var15 = var14.getCurrentLineNumber();
    long var16 = var14.getRecordNumber();
    java.util.Iterator var17 = var14.iterator();
    long var18 = var14.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test213");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var7 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var10 = var9.getHeader();
    boolean var11 = var9.isCommentMarkerSet();
    boolean var12 = var9.getIgnoreSurroundingSpaces();
    boolean var13 = var9.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var9.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var16 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var18 = var9.withRecordSeparator('#');
    java.lang.Character var19 = var18.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var26 = var24.withEscape(' ');
    boolean var27 = var24.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var28 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var31 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var33 = var31.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var35 = var33.withQuote((java.lang.Character)'4');
    java.lang.Character var36 = var35.getQuoteCharacter();
    boolean var37 = var35.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var39 = var35.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var42 = var41.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var44 = var42.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var46 = var44.withEscape(' ');
    java.lang.String[] var48 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var49 = var44.withHeader(var48);
    boolean var50 = var49.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var52 = var49.withSkipHeaderRecord(true);
    java.lang.String[] var53 = var52.getHeader();
    org.apache.commons.csv.CSVFormat var54 = var35.withHeader(var53);
    org.apache.commons.csv.CSVFormat var55 = var24.withHeaderComments((java.lang.Object[])var53);
    org.apache.commons.csv.CSVFormat var56 = var18.withHeader(var53);
    org.apache.commons.csv.CSVFormat var57 = var7.withHeader(var53);
    boolean var58 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var59 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false HeaderComments:[Delimiter=<#> SkipHeaderRecord:true]", var7);
    java.util.List var60 = var59.getRecords();
    long var61 = var59.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '4'+ "'", var36.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0L);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test214");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var15.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var20 = var18.withNullString("Delimiter=<#> QuoteChar=<4> SurroundingSpaces:ignored SkipHeaderRecord:true");
    boolean var21 = var20.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test215");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Spliterator var14 = var13.spliterator();
    java.util.Map var15 = var13.getHeaderMap();
    java.util.List var16 = var13.getRecords();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    java.util.Map var19 = var13.getHeaderMap();
    java.util.Map var20 = var13.getHeaderMap();
    boolean var21 = var13.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test216");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var9.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var14 = var9.withEscape('4');
    org.apache.commons.csv.CSVFormat var16 = var9.withNullString("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var18 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var20 = var18.withNullString("#");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test217");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var14 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments((java.lang.Object[])var14);
    boolean var16 = var1.equals((java.lang.Object)var15);
    java.lang.String[] var17 = var1.getHeader();
    char var18 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == '#');

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test218");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var12 = var9.getHeaderComments();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreEmptyLines();
    java.lang.String var16 = var14.toString();
    java.lang.Object[] var17 = new java.lang.Object[] { var14};
    java.lang.String var18 = var9.format(var17);
    org.apache.commons.csv.CSVFormat var19 = var7.withHeaderComments(var17);
    java.lang.String[] var20 = var7.getHeaderComments();
    java.lang.String var21 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var16.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var18.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=<#> RecordSeparator=<> SkipHeaderRecord:false"+ "'", var21.equals("Delimiter=<#> RecordSeparator=<> SkipHeaderRecord:false"));

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test219");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    char var6 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var5.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true HeaderComments:[Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false]", var5);
    java.util.List var13 = var12.getRecords();
    long var14 = var12.getCurrentLineNumber();
    java.util.Spliterator var15 = var12.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test220");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var14 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments((java.lang.Object[])var14);
    boolean var16 = var1.equals((java.lang.Object)var15);
    java.lang.String[] var17 = var1.getHeader();
    java.lang.Character var18 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var19 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    java.lang.String var22 = var19.toString();
    java.lang.String[] var23 = var19.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:false"+ "'", var22.equals("Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test221");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    boolean var11 = var7.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var7);
    var12.close();
    java.util.Spliterator var14 = var12.spliterator();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isClosed();
    var12.close();
    long var18 = var12.getCurrentLineNumber();
    java.util.Spliterator var19 = var12.spliterator();
    java.util.Iterator var20 = var12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test222");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withDelimiter('#');
    java.lang.String var7 = var6.toString();
    org.apache.commons.csv.CSVFormat var9 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    java.lang.String var11 = var10.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Delimiter=<#> SkipHeaderRecord:true"+ "'", var7.equals("Delimiter=<#> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test223");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var5.withRecordSeparator('4');
    java.lang.String var9 = var5.getRecordSeparator();
    java.lang.String[] var10 = var5.getHeader();
    char var11 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var12.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test224");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var14 = var10.withNullString("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var16 = var10.withEscape((java.lang.Character)'4');
    java.lang.String var17 = var10.getRecordSeparator();
    boolean var18 = var10.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var20 = var10.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "a"+ "'", var17.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test225");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    boolean var10 = var4.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var14 = var4.withAllowMissingColumnNames(true);
    boolean var15 = var14.isNullStringSet();
    org.apache.commons.csv.CSVFormat var17 = var14.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test226");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var11 = var6.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var13 = var11.withDelimiter(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test227");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.String var10 = var4.toString();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreEmptyLines();
    java.lang.String var15 = var14.getRecordSeparator();
    boolean var16 = var14.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var14.withNullString("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true HeaderComments:[Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false]");
    org.apache.commons.csv.CSVFormat var20 = var18.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var22 = var18.withNullString("Delimiter=<#> RecordSeparator=<4> SkipHeaderRecord:true Header:[Delimiter=<#> SkipHeaderRecord:true]");
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(true);
    boolean var27 = var4.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test228");


    org.apache.commons.csv.CSVFormat var4 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var5 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var9 = var7.withEscape(' ');
    java.lang.String[] var11 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var12 = var7.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true", var12);
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:true", var12);
    org.apache.commons.csv.CSVFormat var18 = var12.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a> SkipHeaderRecord:false", var12);
    java.util.Spliterator var20 = var19.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test229");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.String var10 = var4.toString();
    boolean var11 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var12 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var4.withCommentMarker('a');
    boolean var15 = var14.isQuoteCharacterSet();
    java.lang.Character var16 = var14.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test230");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('a');
    org.apache.commons.csv.CSVFormat var3 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var5 = var1.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:falsea");
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = var7.withSkipHeaderRecord(true);
    java.lang.Character var11 = var10.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test231");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("4Delimiter=<#> SkipHeaderRecord:true4a");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test232");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var9.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    java.lang.String var13 = var11.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test233");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var10 = var5.getQuoteMode();
    org.apache.commons.csv.CSVFormat var11 = var5.withIgnoreEmptyLines();
    boolean var13 = var11.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var15 = var11.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape('a');
    org.apache.commons.csv.CSVParser var18 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true", var15);
    org.apache.commons.csv.CSVFormat var20 = var15.withCommentMarker('4');
    boolean var21 = var20.isEscapeCharacterSet();
    java.lang.Character var22 = var20.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test234");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    boolean var12 = var11.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test235");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    char var12 = var11.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var16 = var14.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var18 = var14.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var20 = var14.withNullString("Delimiter=<#> SkipHeaderRecord:false HeaderComments:[Delimiter=<#> SkipHeaderRecord:true]");
    org.apache.commons.csv.CSVFormat var22 = var20.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test236");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var12 = var8.withEscape((java.lang.Character)' ');
    boolean var13 = var12.getSkipHeaderRecord();
    java.lang.Character var14 = var12.getCommentMarker();
    boolean var15 = var12.isCommentMarkerSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var17 = var12.withEscape('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '4'+ "'", var14.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test237");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreSurroundingSpaces(false);
    java.lang.String var9 = var6.getRecordSeparator();
    boolean var10 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var6.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test238");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreEmptyLines();
    java.lang.String var8 = var6.toString();
    java.lang.Object[] var9 = new java.lang.Object[] { var6};
    java.lang.String var10 = var1.format(var9);
    org.apache.commons.csv.CSVFormat var12 = var1.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var14 = var1.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var16 = var1.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test239");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var4 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var5 = var2.withHeaderComments((java.lang.Object[])var4);
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var8 = var7.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("Default#Excel#MySQL#RFC4180#TDF");
    java.lang.Character var11 = var8.getEscapeCharacter();
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Default#Excel#MySQL#4RFC441804#TDFa", var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test240");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    boolean var10 = var9.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var14 = var9.withEscape('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test241");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var6 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('a');
    java.lang.Object[] var9 = new java.lang.Object[] { var6};
    org.apache.commons.csv.CSVFormat var10 = var1.withHeaderComments(var9);
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var15 = var10.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var17 = var10.withDelimiter('#');
    boolean var18 = var10.isNullStringSet();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    java.lang.Object[] var28 = new java.lang.Object[] { var25};
    org.apache.commons.csv.CSVFormat var29 = var20.withHeaderComments(var28);
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var31 = var10.withHeader(var30);
    boolean var32 = var10.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test242");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withNullString("Delimiter=<#> QuoteChar=<4> NullString=<> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var19 = var15.withDelimiter(' ');
    boolean var21 = var19.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var23 = var19.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var24 = var19.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    boolean var28 = var26.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var30 = var26.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var32 = var26.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var37 = var34.getHeaderComments();
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var40 = var39.withIgnoreEmptyLines();
    java.lang.String var41 = var39.toString();
    java.lang.Object[] var42 = new java.lang.Object[] { var39};
    java.lang.String var43 = var34.format(var42);
    org.apache.commons.csv.CSVFormat var44 = var32.withHeaderComments(var42);
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var47 = var46.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var49 = var47.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var52 = var51.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var54 = var52.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var56 = var54.withEscape(' ');
    java.lang.String[] var58 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var59 = var54.withHeader(var58);
    org.apache.commons.csv.CSVFormat var60 = var47.withHeader(var58);
    org.apache.commons.csv.CSVFormat var62 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var63 = var62.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var65 = var63.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var68 = var67.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var70 = var68.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var72 = var70.withEscape(' ');
    java.lang.String[] var74 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var75 = var70.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var63.withHeader(var74);
    org.apache.commons.csv.CSVFormat var77 = var47.withHeader(var74);
    java.lang.String var78 = var32.format((java.lang.Object[])var74);
    java.lang.String var79 = var24.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = var10.withHeaderComments((java.lang.Object[])var74);
    boolean var81 = var10.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var41.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var43.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var78.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var79.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test243");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var4 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var6 = var1.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape(' ');
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote('4');
    org.apache.commons.csv.CSVFormat var17 = var11.withIgnoreSurroundingSpaces(true);
    java.lang.String var18 = var17.toString();
    org.apache.commons.csv.CSVFormat var20 = var17.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var24 = var22.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var25 = var22.getHeaderComments();
    boolean var26 = var22.isCommentMarkerSet();
    java.lang.String var27 = var22.toString();
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var30 = var29.getHeader();
    boolean var31 = var29.isCommentMarkerSet();
    boolean var32 = var29.getIgnoreSurroundingSpaces();
    boolean var33 = var29.isNullStringSet();
    org.apache.commons.csv.CSVFormat var35 = var29.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var36 = var29.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var37 = var36.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var37.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var41 = var40.getHeader();
    boolean var42 = var40.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var47 = var45.withRecordSeparator('a');
    java.lang.Object[] var48 = new java.lang.Object[] { var45};
    org.apache.commons.csv.CSVFormat var49 = var40.withHeaderComments(var48);
    java.lang.String[] var50 = var49.getHeaderComments();
    org.apache.commons.csv.CSVFormat var51 = var38.withHeader(var50);
    org.apache.commons.csv.CSVFormat var52 = var22.withHeader(var50);
    org.apache.commons.csv.CSVFormat var53 = var17.withHeader(var50);
    org.apache.commons.csv.CSVFormat var54 = var1.withHeaderComments((java.lang.Object[])var50);
    boolean var55 = var54.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var57 = var54.withDelimiter('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var18.equals("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test244");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreSurroundingSpaces();
    java.lang.Character var9 = var8.getEscapeCharacter();
    java.lang.String var10 = var8.getRecordSeparator();
    boolean var11 = var8.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ' '+ "'", var9.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "a"+ "'", var10.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test245");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var9.withAllowMissingColumnNames(true);
    boolean var13 = var9.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var14 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var9.withNullString("Delimiter=<#> CommentStart=<4> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var19 = var9.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord(true);
    boolean var22 = var19.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test246");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape(' ');
    java.lang.String[] var15 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    java.lang.Character var17 = var11.getCommentMarker();
    org.apache.commons.csv.CSVFormat var18 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("", var11);
    java.util.Spliterator var20 = var19.spliterator();
    java.util.Map var21 = var19.getHeaderMap();
    java.util.Spliterator var22 = var19.spliterator();
    boolean var23 = var5.equals((java.lang.Object)var19);
    java.util.Spliterator var24 = var19.spliterator();
    java.util.Spliterator var25 = var19.spliterator();
    long var26 = var19.getCurrentLineNumber();
    java.util.Iterator var27 = var19.iterator();
    long var28 = var19.getCurrentLineNumber();
    java.util.Spliterator var29 = var19.spliterator();
    java.util.Iterator var30 = var19.iterator();
    java.util.Spliterator var31 = var19.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test247");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker(' ');
    boolean var9 = var4.getIgnoreHeaderCase();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var4.withEscape('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test248");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var10 = var5.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape(' ');
    java.lang.String[] var19 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var20 = var15.withHeader(var19);
    java.lang.Character var21 = var20.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var29 = var27.withEscape(' ');
    java.lang.String[] var31 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var32 = var27.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var22.withHeader(var31);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator('a');
    java.lang.String var39 = var38.toString();
    boolean var40 = var38.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var42 = var38.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var46 = var44.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var47 = var46.getQuoteMode();
    boolean var48 = var46.isCommentMarkerSet();
    boolean var49 = var46.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var52 = var51.getHeader();
    boolean var53 = var51.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var56 = var55.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var58 = var56.withRecordSeparator('a');
    java.lang.Object[] var59 = new java.lang.Object[] { var56};
    org.apache.commons.csv.CSVFormat var60 = var51.withHeaderComments(var59);
    java.lang.String[] var61 = var60.getHeaderComments();
    org.apache.commons.csv.CSVFormat var62 = var46.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var63 = var42.withHeader(var61);
    org.apache.commons.csv.CSVFormat var64 = var33.withHeader(var61);
    org.apache.commons.csv.CSVFormat var65 = var10.withHeader(var61);
    org.apache.commons.csv.CSVParser var66 = org.apache.commons.csv.CSVParser.parse("4Delimiter=<#> SkipHeaderRecord:true4", var10);
    java.util.Spliterator var67 = var66.spliterator();
    var66.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var39.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test249");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    boolean var7 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var5.withNullString("Delimiter=<a#> SkipHeaaderRecord:truea");
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape('4');
    boolean var14 = var11.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test250");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var10 = var5.getQuoteMode();
    boolean var11 = var5.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var15 = var5.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withEscape((java.lang.Character)'#');
    java.lang.String var20 = var17.getNullString();
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false", var17);
    java.util.Iterator var22 = var21.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test251");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker('a');
    boolean var6 = var5.getIgnoreEmptyLines();
    boolean var7 = var5.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var5.withIgnoreSurroundingSpaces(true);
    java.lang.String var10 = var5.getNullString();
    boolean var11 = var5.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test252");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false HeaderComments:[Delimiter=<#> SkipHeaderRecord:true]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test253");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var9 = var8.getQuoteMode();
    boolean var10 = var8.isCommentMarkerSet();
    boolean var11 = var3.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVFormat var13 = var3.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker((java.lang.Character)'4');
    boolean var16 = var13.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test254");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var5.withDelimiter(' ');
    boolean var11 = var9.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var13 = var9.withNullString("hi!");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var9);
    long var15 = var14.getCurrentLineNumber();
    long var16 = var14.getCurrentLineNumber();
    java.util.List var17 = var14.getRecords();
    java.util.Map var18 = var14.getHeaderMap();
    java.util.Map var19 = var14.getHeaderMap();
    var14.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test255");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    java.lang.Character var12 = var10.getCommentMarker();
    java.lang.Object[] var13 = new java.lang.Object[] { var10};
    java.lang.String var14 = var6.format(var13);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var19.withHeader(var23);
    org.apache.commons.csv.CSVFormat var26 = var19.withCommentMarker((java.lang.Character)'4');
    boolean var27 = var6.equals((java.lang.Object)var19);
    org.apache.commons.csv.CSVFormat var29 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var31 = var6.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:truea");
    org.apache.commons.csv.CSVFormat var33 = var6.withIgnoreEmptyLines(true);
    java.lang.String var34 = var33.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '4'+ "'", var12.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var14.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test256");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker('a');
    boolean var6 = var5.getSkipHeaderRecord();
    java.lang.String var7 = var5.toString();
    java.lang.Character var8 = var5.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var13 = var12.getQuoteMode();
    org.apache.commons.csv.CSVFormat var15 = var12.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var12.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var26 = var24.withQuote((java.lang.Character)'4');
    java.lang.Character var27 = var26.getQuoteCharacter();
    boolean var28 = var26.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = var26.withIgnoreSurroundingSpaces(true);
    boolean var31 = var30.getSkipHeaderRecord();
    java.lang.String[] var32 = var30.getHeaderComments();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var34.withSkipHeaderRecord();
    boolean var36 = var34.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var38 = var34.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var39 = var38.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var43 = var41.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var44 = var43.getQuoteMode();
    java.lang.Character var45 = var43.getCommentMarker();
    java.lang.Object[] var46 = new java.lang.Object[] { var43};
    java.lang.String var47 = var39.format(var46);
    org.apache.commons.csv.CSVFormat var48 = var30.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var51 = var50.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var53 = var51.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var55 = var53.withQuote((java.lang.Character)'4');
    java.lang.Character var56 = var55.getQuoteCharacter();
    boolean var57 = var55.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var59 = var55.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var62 = var61.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var64 = var62.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var66 = var64.withEscape(' ');
    java.lang.String[] var68 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var69 = var64.withHeader(var68);
    boolean var70 = var69.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var72 = var69.withSkipHeaderRecord(true);
    java.lang.String[] var73 = var72.getHeader();
    org.apache.commons.csv.CSVFormat var74 = var55.withHeader(var73);
    org.apache.commons.csv.CSVFormat var75 = var30.withHeader(var73);
    org.apache.commons.csv.CSVFormat var76 = var17.withHeader(var73);
    java.lang.String var77 = var5.format((java.lang.Object[])var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var7.equals("Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + '4'+ "'", var27.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '4'+ "'", var45.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var47.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + '4'+ "'", var56.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var77.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test257");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var2.withRecordSeparator('#');
    java.lang.Character var12 = var11.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var19 = var17.withEscape(' ');
    boolean var20 = var17.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var24.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var28 = var26.withQuote((java.lang.Character)'4');
    java.lang.Character var29 = var28.getQuoteCharacter();
    boolean var30 = var28.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var32 = var28.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var34.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var39 = var37.withEscape(' ');
    java.lang.String[] var41 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var42 = var37.withHeader(var41);
    boolean var43 = var42.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var45 = var42.withSkipHeaderRecord(true);
    java.lang.String[] var46 = var45.getHeader();
    org.apache.commons.csv.CSVFormat var47 = var28.withHeader(var46);
    org.apache.commons.csv.CSVFormat var48 = var17.withHeaderComments((java.lang.Object[])var46);
    org.apache.commons.csv.CSVFormat var49 = var11.withHeader(var46);
    org.apache.commons.csv.CSVFormat var50 = var49.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var51 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> QuoteChar=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true", var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + '4'+ "'", var29.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test258");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var1.toString();
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator("Delimiter=<#> RecordSeparator=<Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true> SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test259");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = var5.withDelimiter(' ');
    boolean var11 = var9.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var13 = var9.withNullString("hi!");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var9);
    long var15 = var14.getCurrentLineNumber();
    long var16 = var14.getCurrentLineNumber();
    java.util.List var17 = var14.getRecords();
    java.util.Map var18 = var14.getHeaderMap();
    java.util.Iterator var19 = var14.iterator();
    java.util.List var20 = var14.getRecords();
    long var21 = var14.getRecordNumber();
    boolean var22 = var14.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test260");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withDelimiter(' ');
    boolean var9 = var4.getIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var10 = var4.getQuoteMode();
    char var11 = var4.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == '#');

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test261");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withNullString("Default4Excel4MySQL4RFC41804TDFa");
    boolean var6 = var3.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test262");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator('a');
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord(true);
    boolean var14 = var10.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test263");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var10.withQuote('a');
    boolean var19 = var18.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreSurroundingSpaces(false);
    java.lang.String[] var23 = var18.getHeader();
    boolean var24 = var18.isNullStringSet();
    org.apache.commons.csv.CSVFormat var25 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var26 = var25.getQuoteMode();
    org.apache.commons.csv.CSVFormat var28 = var25.withQuote((java.lang.Character)'4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var30 = var28.withDelimiter('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test264");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    java.lang.String[] var4 = var1.getHeaderComments();
    java.lang.String[] var5 = var1.getHeader();
    java.lang.String[] var6 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var8 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = var1.withEscape('4');
    org.apache.commons.csv.CSVFormat var15 = var1.withRecordSeparator('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test265");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    boolean var10 = var6.getSkipHeaderRecord();
    boolean var11 = var6.getIgnoreEmptyLines();
    java.lang.String var12 = var6.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test266");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var5.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var8 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(true);
    boolean var11 = var3.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVFormat var13 = var10.withRecordSeparator("Default4Excel4MySQL4RFC41804TDFa");
    org.apache.commons.csv.CSVFormat var15 = var10.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var10.withAllowMissingColumnNames();
    boolean var17 = var10.getAllowMissingColumnNames();
    boolean var18 = var10.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test267");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape(' ');
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var12.withHeader(var16);
    boolean var18 = var17.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var17.withSkipHeaderRecord(true);
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var30 = var29.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var32 = var30.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var34.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var39 = var37.withEscape(' ');
    java.lang.String[] var41 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var42 = var37.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var30.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var27.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var45 = var20.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var7.withHeaderComments((java.lang.Object[])var41);
    boolean var47 = var46.getAllowMissingColumnNames();
    boolean var48 = var46.getIgnoreHeaderCase();
    boolean var49 = var46.getIgnoreSurroundingSpaces();
    java.lang.Character var50 = var46.getCommentMarker();
    org.apache.commons.csv.QuoteMode var51 = var46.getQuoteMode();
    boolean var52 = var46.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var54 = var46.withIgnoreEmptyLines(false);
    boolean var55 = var54.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 'a'+ "'", var50.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test268");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var3 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var4 = var1.withHeaderComments((java.lang.Object[])var3);
    org.apache.commons.csv.CSVFormat var6 = var1.withQuote(' ');
    java.lang.String[] var7 = var6.getHeaderComments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var9 = var6.withCommentMarker('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test269");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.isCommentMarkerSet();
    boolean var23 = var20.getIgnoreSurroundingSpaces();
    boolean var24 = var20.isNullStringSet();
    org.apache.commons.csv.CSVFormat var26 = var20.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var27 = var20.withIgnoreSurroundingSpaces();
    boolean var28 = var27.isNullStringSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var29 = org.apache.commons.csv.CSVFormat.Predefined.values();
    boolean var30 = var27.equals((java.lang.Object)var29);
    java.lang.String var31 = var15.format((java.lang.Object[])var29);
    org.apache.commons.csv.QuoteMode var32 = var15.getQuoteMode();
    boolean var33 = var15.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Default4Excel4MySQL4RFC41804TDFa"+ "'", var31.equals("Default4Excel4MySQL4RFC41804TDFa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test270");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("hi!", var5);
    java.util.Spliterator var10 = var9.spliterator();
    java.util.Map var11 = var9.getHeaderMap();
    var9.close();
    long var13 = var9.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test271");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Map var14 = var13.getHeaderMap();
    java.util.Map var15 = var13.getHeaderMap();
    boolean var16 = var13.isClosed();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    long var19 = var13.getRecordNumber();
    long var20 = var13.getRecordNumber();
    long var21 = var13.getRecordNumber();
    long var22 = var13.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0L);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test272");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('#');
    boolean var13 = var10.isCommentMarkerSet();
    java.lang.Character var14 = var10.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test273");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    boolean var11 = var10.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var10.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    java.lang.String var15 = var14.toString();
    java.lang.String var16 = var14.toString();
    org.apache.commons.csv.CSVFormat var18 = var14.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true HeaderComments:[Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false]");
    org.apache.commons.csv.CSVFormat var21 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var22 = var18.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=<#> CommentStart=<4> NullString=<Delimiter=<#> SkipHeaderRecord:false> RecordSeparator=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=<#> CommentStart=<4> NullString=<Delimiter=<#> SkipHeaderRecord:false> RecordSeparator=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Delimiter=<#> CommentStart=<4> NullString=<Delimiter=<#> SkipHeaderRecord:false> RecordSeparator=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var16.equals("Delimiter=<#> CommentStart=<4> NullString=<Delimiter=<#> SkipHeaderRecord:false> RecordSeparator=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test274");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.String var10 = var4.toString();
    boolean var11 = var4.getIgnoreHeaderCase();
    boolean var12 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var14 = var4.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var16 = var4.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var18 = var4.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    java.lang.Character var19 = var4.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test275");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    boolean var5 = var3.isNullStringSet();
    org.apache.commons.csv.CSVFormat var6 = var3.withSkipHeaderRecord();
    boolean var7 = var6.isCommentMarkerSet();
    boolean var8 = var6.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = var6.withRecordSeparator("Delimiter=<#> RecordSeparator=<4> SkipHeaderRecord:true Header:[Delimiter=<#> SkipHeaderRecord:true]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test276");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote(' ');
    char var9 = var8.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == '#');

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test277");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    java.lang.String[] var5 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test278");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var3 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var4 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var5 = var4.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test279");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    boolean var11 = var7.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var7);
    long var13 = var12.getRecordNumber();
    java.util.Spliterator var14 = var12.spliterator();
    java.util.Map var15 = var12.getHeaderMap();
    long var16 = var12.getCurrentLineNumber();
    java.util.Iterator var17 = var12.iterator();
    long var18 = var12.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test280");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreSurroundingSpaces(true);
    java.lang.String var11 = var10.toString();
    boolean var12 = var10.isQuoteCharacterSet();
    boolean var13 = var10.getIgnoreSurroundingSpaces();
    boolean var14 = var10.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test281");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces(true);
    boolean var7 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test282");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var6 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('a');
    java.lang.Object[] var9 = new java.lang.Object[] { var6};
    org.apache.commons.csv.CSVFormat var10 = var1.withHeaderComments(var9);
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withRecordSeparator("Delimiter=<#> Escape=<a> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var19 = var15.withQuote((java.lang.Character)'4');
    boolean var20 = var15.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test283");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape(' ');
    java.lang.String[] var18 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var19 = var14.withHeader(var18);
    java.lang.Character var20 = var19.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var24.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var28 = var26.withEscape(' ');
    java.lang.String[] var30 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var31 = var26.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var21.withHeader(var30);
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var34.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withRecordSeparator('a');
    java.lang.String var38 = var37.toString();
    boolean var39 = var37.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var41 = var37.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var43.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var46 = var45.getQuoteMode();
    boolean var47 = var45.isCommentMarkerSet();
    boolean var48 = var45.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var51 = var50.getHeader();
    boolean var52 = var50.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var55 = var54.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var57 = var55.withRecordSeparator('a');
    java.lang.Object[] var58 = new java.lang.Object[] { var55};
    org.apache.commons.csv.CSVFormat var59 = var50.withHeaderComments(var58);
    java.lang.String[] var60 = var59.getHeaderComments();
    org.apache.commons.csv.CSVFormat var61 = var45.withHeaderComments((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var62 = var41.withHeader(var60);
    org.apache.commons.csv.CSVFormat var63 = var32.withHeader(var60);
    org.apache.commons.csv.CSVFormat var64 = var9.withHeader(var60);
    java.lang.Character var65 = var9.getQuoteCharacter();
    java.lang.Character var66 = var9.getEscapeCharacter();
    boolean var67 = var9.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var38.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test284");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withEscape('a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false", var5);
    org.apache.commons.csv.CSVFormat var8 = var5.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false");
    java.lang.Character var11 = var8.getQuoteCharacter();
    boolean var12 = var8.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test285");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator('a');
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var15 = var14.getHeader();
    boolean var16 = var14.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var18 = var14.withCommentMarker('a');
    boolean var19 = var18.getSkipHeaderRecord();
    java.lang.String var20 = var18.toString();
    java.lang.Character var21 = var18.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var23 = var18.withIgnoreSurroundingSpaces(true);
    boolean var24 = var10.equals((java.lang.Object)var18);
    boolean var25 = var18.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test286");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    boolean var15 = var13.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = var13.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var19 = var13.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var24 = var21.getHeaderComments();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withIgnoreEmptyLines();
    java.lang.String var28 = var26.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var26};
    java.lang.String var30 = var21.format(var29);
    org.apache.commons.csv.CSVFormat var31 = var19.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var39 = var38.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var41 = var39.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var43 = var41.withEscape(' ');
    java.lang.String[] var45 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var46 = var41.withHeader(var45);
    org.apache.commons.csv.CSVFormat var47 = var34.withHeader(var45);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var50 = var49.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var52 = var50.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var55 = var54.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var57 = var55.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var59 = var57.withEscape(' ');
    java.lang.String[] var61 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var62 = var57.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var50.withHeader(var61);
    org.apache.commons.csv.CSVFormat var64 = var34.withHeader(var61);
    java.lang.String var65 = var19.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var11.withHeaderComments((java.lang.Object[])var61);
    java.lang.String[] var67 = var66.getHeaderComments();
    boolean var68 = var66.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var30.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var65.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test287");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var11.withQuote((java.lang.Character)' ');
    boolean var14 = var11.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test288");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator('a');
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreHeaderCase(false);
    char var14 = var13.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == '#');

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test289");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator('a');
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    boolean var17 = var16.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test290");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames(true);
    java.lang.String var11 = var10.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreEmptyLines(true);
    char var14 = var13.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "a"+ "'", var11.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == '#');

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test291");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    java.lang.String var5 = var4.toString();
    boolean var6 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var4.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var13 = var12.getQuoteMode();
    boolean var14 = var12.isCommentMarkerSet();
    boolean var15 = var12.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var18 = var17.getHeader();
    boolean var19 = var17.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    java.lang.Object[] var25 = new java.lang.Object[] { var22};
    org.apache.commons.csv.CSVFormat var26 = var17.withHeaderComments(var25);
    java.lang.String[] var27 = var26.getHeaderComments();
    org.apache.commons.csv.CSVFormat var28 = var12.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var29 = var8.withHeader(var27);
    org.apache.commons.csv.CSVFormat var31 = var29.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var33 = var29.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test292");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces();
    java.lang.String var6 = var5.getRecordSeparator();
    boolean var7 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var5.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var11 = var5.withIgnoreEmptyLines(false);
    java.lang.Character var12 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var14 = var5.withRecordSeparator('4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var16 = var14.withCommentMarker((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test293");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.QuoteMode var6 = var1.getQuoteMode();
    org.apache.commons.csv.CSVFormat var7 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var7.withEscape('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test294");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = var16.withDelimiter(' ');
    boolean var22 = var20.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var24 = var20.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var27 = var26.getHeader();
    boolean var28 = var26.isCommentMarkerSet();
    boolean var29 = var26.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var31 = var26.withCommentMarker((java.lang.Character)'a');
    boolean var32 = var31.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var31.withIgnoreSurroundingSpaces(false);
    java.lang.String var35 = var34.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var37 = var34.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var39 = var34.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var42 = var41.getHeader();
    boolean var43 = var41.isCommentMarkerSet();
    boolean var44 = var41.getIgnoreSurroundingSpaces();
    boolean var45 = var41.isNullStringSet();
    org.apache.commons.csv.CSVFormat var47 = var41.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var50 = var49.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var52 = var50.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var54 = var52.withEscape(' ');
    java.lang.String[] var56 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var57 = var52.withHeader(var56);
    boolean var58 = var57.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var60 = var57.withSkipHeaderRecord(true);
    java.lang.String[] var61 = var60.getHeader();
    boolean var62 = var60.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var65 = var64.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var67 = var65.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var70 = var69.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var72 = var70.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var74 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var75 = var74.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var77 = var75.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var79 = var77.withEscape(' ');
    java.lang.String[] var81 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var82 = var77.withHeader(var81);
    org.apache.commons.csv.CSVFormat var83 = var70.withHeader(var81);
    org.apache.commons.csv.CSVFormat var84 = var67.withHeaderComments((java.lang.Object[])var81);
    org.apache.commons.csv.CSVFormat var85 = var60.withHeader(var81);
    org.apache.commons.csv.CSVFormat var86 = var47.withHeaderComments((java.lang.Object[])var81);
    boolean var87 = var86.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var89 = var86.withEscape((java.lang.Character)'4');
    java.lang.String[] var90 = var89.getHeaderComments();
    java.lang.String var91 = var39.format((java.lang.Object[])var90);
    java.lang.String var92 = var24.format((java.lang.Object[])var90);
    java.lang.String var93 = var11.format((java.lang.Object[])var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var91.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "aDelimiter=<#> RecordSepaaraator=<aa> SkipHeaaderRecord:trueaa"+ "'", var92.equals("aDelimiter=<#> RecordSepaaraator=<aa> SkipHeaaderRecord:trueaa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var93.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test295");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var10 = var9.getQuoteMode();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var14 = var9.withSkipHeaderRecord(false);
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var17 = var14.withHeader(var16);
    java.lang.String var18 = var4.format((java.lang.Object[])var16);
    org.apache.commons.csv.CSVFormat var20 = var4.withNullString("");
    org.apache.commons.csv.CSVFormat var22 = var4.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var25.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = var26.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var30 = var28.withEscape(' ');
    org.apache.commons.csv.CSVFormat var32 = var28.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var33 = var28.getQuoteMode();
    org.apache.commons.csv.CSVFormat var34 = var28.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withEscape(' ');
    java.lang.String var39 = var38.toString();
    org.apache.commons.csv.CSVParser var40 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:falsea", var38);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var43 = var42.getHeader();
    boolean var44 = var42.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var47 = var46.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var49 = var47.withRecordSeparator('a');
    java.lang.Object[] var50 = new java.lang.Object[] { var47};
    org.apache.commons.csv.CSVFormat var51 = var42.withHeaderComments(var50);
    java.lang.String[] var52 = var51.getHeaderComments();
    java.lang.String var53 = var38.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var54 = var22.withHeaderComments((java.lang.Object[])var52);
    boolean var55 = var22.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var58 = var57.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var60 = var58.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var62 = var60.withEscape(' ');
    org.apache.commons.csv.CSVFormat var64 = var60.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var65 = var60.getQuoteMode();
    org.apache.commons.csv.CSVFormat var66 = var60.withIgnoreEmptyLines();
    boolean var68 = var66.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var69 = var66.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var74 = var73.getHeader();
    boolean var75 = var73.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var77 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var78 = var77.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var80 = var78.withRecordSeparator('a');
    java.lang.Object[] var81 = new java.lang.Object[] { var78};
    org.apache.commons.csv.CSVFormat var82 = var73.withHeaderComments(var81);
    java.lang.String[] var83 = var82.getHeaderComments();
    boolean var84 = var69.equals((java.lang.Object)var83);
    java.lang.String var85 = var22.format((java.lang.Object[])var83);
    boolean var86 = var22.getSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var88 = var22.withDelimiter('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=<#> SkipHeaderRecord:falsea"+ "'", var18.equals("Delimiter=<#> SkipHeaderRecord:falsea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var39.equals("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Delimiter=< #>  SkipHeaderRecord:truea"+ "'", var53.equals("Delimiter=< #>  SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "Delimiter=<a#> SkipHeaaderRecord:truea"+ "'", var85.equals("Delimiter=<a#> SkipHeaaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test296");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Spliterator var14 = var13.spliterator();
    java.util.Map var15 = var13.getHeaderMap();
    java.util.List var16 = var13.getRecords();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    java.util.Map var19 = var13.getHeaderMap();
    java.util.Map var20 = var13.getHeaderMap();
    java.util.List var21 = var13.getRecords();
    java.util.Map var22 = var13.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test297");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var2.toString();
    java.lang.String[] var4 = var2.getHeader();
    boolean var5 = var2.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test298");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    java.lang.String var5 = var4.toString();
    boolean var6 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var4.withEscape((java.lang.Character)'a');
    boolean var9 = var8.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var8.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    java.lang.Character var13 = var12.getEscapeCharacter();
    boolean var14 = var12.getIgnoreEmptyLines();
    java.lang.String[] var15 = var12.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 'a'+ "'", var13.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test299");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var12.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var16 = var12.withSkipHeaderRecord();
    java.lang.String[] var17 = var12.getHeaderComments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var19 = var12.withQuote('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test300");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker((java.lang.Character)'4');
    boolean var10 = var1.equals((java.lang.Object)var7);
    boolean var11 = var1.isQuoteCharacterSet();
    java.lang.String var12 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var12.equals("Delimiter=<#> SkipHeaderRecord:false"));

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test301");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("hi!", var5);
    java.util.Spliterator var10 = var9.spliterator();
    java.util.Map var11 = var9.getHeaderMap();
    boolean var12 = var9.isClosed();
    long var13 = var9.getCurrentLineNumber();
    java.util.List var14 = var9.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test302");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var4.withAllowMissingColumnNames(false);
    boolean var8 = var4.getIgnoreEmptyLines();
    java.lang.String[] var9 = var4.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test303");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    boolean var13 = var12.isNullStringSet();
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> NullString=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true", var12);
    boolean var18 = var17.isClosed();
    var17.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var20 = var17.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test304");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    boolean var15 = var13.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = var13.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var19 = var13.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var24 = var21.getHeaderComments();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withIgnoreEmptyLines();
    java.lang.String var28 = var26.toString();
    java.lang.Object[] var29 = new java.lang.Object[] { var26};
    java.lang.String var30 = var21.format(var29);
    org.apache.commons.csv.CSVFormat var31 = var19.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var39 = var38.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var41 = var39.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var43 = var41.withEscape(' ');
    java.lang.String[] var45 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var46 = var41.withHeader(var45);
    org.apache.commons.csv.CSVFormat var47 = var34.withHeader(var45);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var50 = var49.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var52 = var50.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var55 = var54.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var57 = var55.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var59 = var57.withEscape(' ');
    java.lang.String[] var61 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var62 = var57.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var50.withHeader(var61);
    org.apache.commons.csv.CSVFormat var64 = var34.withHeader(var61);
    java.lang.String var65 = var19.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var11.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var68 = var66.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var70 = var66.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var72 = var66.withCommentMarker('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var28.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var30.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var65.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test305");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var14 = var10.withNullString("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreEmptyLines();
    boolean var16 = var14.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var14.withRecordSeparator("hi!");
    java.lang.String var20 = var19.toString();
    org.apache.commons.csv.CSVFormat var22 = var19.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var24 = var22.withDelimiter(' ');
    boolean var25 = var22.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=<#> NullString=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var20.equals("Delimiter=<#> NullString=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> RecordSeparator=<hi!> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test306");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    boolean var5 = var3.isCommentMarkerSet();
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var10 = var3.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var16 = var12.withRecordSeparator("Delimiter=<#> CommentStart=<4> RecordSeparator=<> SurroundingSpaces:ignored SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test307");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var8.withEscape((java.lang.Character)' ');
    java.lang.String var12 = var11.toString();
    boolean var13 = var11.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=<#> Escape=< > RecordSeparator=<4> SkipHeaderRecord:true"+ "'", var12.equals("Delimiter=<#> Escape=< > RecordSeparator=<4> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test308");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    org.apache.commons.csv.CSVFormat var12 = var5.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var18.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withEscape(' ');
    boolean var28 = var25.getIgnoreSurroundingSpaces();
    boolean var29 = var25.isEscapeCharacterSet();
    java.lang.String var30 = var25.getNullString();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var37 = var35.withEscape(' ');
    org.apache.commons.csv.CSVFormat var39 = var35.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var40 = var35.getQuoteMode();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var43 = var42.getHeader();
    boolean var44 = var42.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var47 = var46.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var48 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var49 = var46.withHeaderComments((java.lang.Object[])var48);
    org.apache.commons.csv.CSVFormat var50 = var42.withHeaderComments((java.lang.Object[])var48);
    java.lang.String var51 = var35.format((java.lang.Object[])var48);
    java.lang.String var52 = var25.format((java.lang.Object[])var48);
    org.apache.commons.csv.CSVFormat var53 = var20.withHeaderComments((java.lang.Object[])var48);
    org.apache.commons.csv.QuoteMode var54 = var53.getQuoteMode();
    org.apache.commons.csv.CSVParser var55 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=< > RecordSeparator=<Delimiter=<#> SkipHeaderRecord:truea> SurroundingSpaces:ignored SkipHeaderRecord:false", var53);
    var55.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var51.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var52.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test309");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var7 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var10 = var9.getHeader();
    boolean var11 = var9.isCommentMarkerSet();
    boolean var12 = var9.getIgnoreSurroundingSpaces();
    boolean var13 = var9.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var9.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var16 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var18 = var9.withRecordSeparator('#');
    java.lang.Character var19 = var18.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var26 = var24.withEscape(' ');
    boolean var27 = var24.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var28 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var31 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var33 = var31.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var35 = var33.withQuote((java.lang.Character)'4');
    java.lang.Character var36 = var35.getQuoteCharacter();
    boolean var37 = var35.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var39 = var35.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var42 = var41.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var44 = var42.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var46 = var44.withEscape(' ');
    java.lang.String[] var48 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var49 = var44.withHeader(var48);
    boolean var50 = var49.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var52 = var49.withSkipHeaderRecord(true);
    java.lang.String[] var53 = var52.getHeader();
    org.apache.commons.csv.CSVFormat var54 = var35.withHeader(var53);
    org.apache.commons.csv.CSVFormat var55 = var24.withHeaderComments((java.lang.Object[])var53);
    org.apache.commons.csv.CSVFormat var56 = var18.withHeader(var53);
    org.apache.commons.csv.CSVFormat var57 = var7.withHeader(var53);
    boolean var58 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var59 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false HeaderComments:[Delimiter=<#> SkipHeaderRecord:true]", var7);
    java.util.List var60 = var59.getRecords();
    java.util.Iterator var61 = var59.iterator();
    java.util.List var62 = var59.getRecords();
    java.util.Iterator var63 = var59.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '4'+ "'", var36.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test310");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreSurroundingSpaces();
    boolean var15 = var14.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var14.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:trueDelimiter=<#> CommentStart=<4> NullString=<Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true> EmptyLines:ignored SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test311");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    boolean var4 = var3.getIgnoreSurroundingSpaces();
    boolean var5 = var3.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var7 = var3.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var3.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test312");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('a');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var4 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var5 = var4.getHeader();
    boolean var6 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator('a');
    java.lang.Object[] var12 = new java.lang.Object[] { var9};
    org.apache.commons.csv.CSVFormat var13 = var4.withHeaderComments(var12);
    java.lang.String[] var14 = var13.getHeaderComments();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var19.withHeader(var23);
    org.apache.commons.csv.CSVFormat var26 = var24.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var28 = var24.withEscape(' ');
    boolean var29 = var13.equals((java.lang.Object)' ');
    org.apache.commons.csv.CSVFormat var30 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var31 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var38 = var36.withEscape(' ');
    java.lang.String[] var40 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var41 = var36.withHeader(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var45 = var41.withEscape(' ');
    org.apache.commons.csv.CSVFormat var47 = var45.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var49 = var45.withCommentMarker('4');
    boolean var50 = var45.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var53 = var52.getHeader();
    boolean var54 = var52.isCommentMarkerSet();
    boolean var55 = var52.getIgnoreSurroundingSpaces();
    boolean var56 = var52.isNullStringSet();
    org.apache.commons.csv.CSVFormat var58 = var52.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var59 = var52.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var60 = var59.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var61 = var60.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var64 = var63.getHeader();
    boolean var65 = var63.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var68 = var67.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var70 = var68.withRecordSeparator('a');
    java.lang.Object[] var71 = new java.lang.Object[] { var68};
    org.apache.commons.csv.CSVFormat var72 = var63.withHeaderComments(var71);
    java.lang.String[] var73 = var72.getHeaderComments();
    org.apache.commons.csv.CSVFormat var74 = var61.withHeader(var73);
    org.apache.commons.csv.CSVFormat var75 = var45.withHeader(var73);
    org.apache.commons.csv.CSVFormat var76 = var31.withHeaderComments((java.lang.Object[])var73);
    org.apache.commons.csv.CSVFormat var77 = var2.withHeaderComments((java.lang.Object[])var73);
    char var78 = var2.getDelimiter();
    org.apache.commons.csv.CSVFormat var80 = var2.withIgnoreEmptyLines(false);
    boolean var81 = var80.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test313");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var4.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test314");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withEscape('a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false", var5);
    java.util.Map var7 = var6.getHeaderMap();
    java.util.List var8 = var6.getRecords();
    long var9 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1L);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test315");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    char var12 = var11.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var11.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var16 = var14.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var18 = var14.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var20 = var14.withNullString("Delimiter=<#> SkipHeaderRecord:false HeaderComments:[Delimiter=<#> SkipHeaderRecord:true]");
    boolean var21 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var14.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test316");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Character var13 = var12.getQuoteCharacter();
    java.lang.String var14 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:false"+ "'", var14.equals("Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:false"));

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test317");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape(' ');
    java.lang.String var15 = var14.toString();
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var14.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var21.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var25 = var21.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var27 = var21.withRecordSeparator('4');
    boolean var28 = var18.equals((java.lang.Object)'4');
    boolean var29 = var18.isNullStringSet();
    java.lang.String[] var30 = var18.getHeader();
    boolean var31 = var18.isEscapeCharacterSet();
    boolean var32 = var18.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var15.equals("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test318");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat.Predefined[] var8 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var9 = var1.withHeaderComments((java.lang.Object[])var8);
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape(' ');
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var23 = var21.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    boolean var25 = var11.equals((java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test319");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var9.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape(' ');
    java.lang.String[] var20 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    org.apache.commons.csv.CSVFormat var22 = var11.withHeader(var20);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    java.lang.String var28 = var27.toString();
    boolean var29 = var27.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var27.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var33.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var36 = var35.getQuoteMode();
    boolean var37 = var35.isCommentMarkerSet();
    boolean var38 = var35.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var41 = var40.getHeader();
    boolean var42 = var40.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var47 = var45.withRecordSeparator('a');
    java.lang.Object[] var48 = new java.lang.Object[] { var45};
    org.apache.commons.csv.CSVFormat var49 = var40.withHeaderComments(var48);
    java.lang.String[] var50 = var49.getHeaderComments();
    org.apache.commons.csv.CSVFormat var51 = var35.withHeaderComments((java.lang.Object[])var50);
    org.apache.commons.csv.CSVFormat var52 = var31.withHeader(var50);
    org.apache.commons.csv.CSVFormat var53 = var22.withHeader(var50);
    java.lang.String var54 = var53.getRecordSeparator();
    boolean var55 = var53.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var28.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "a"+ "'", var54.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test320");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var8 = var1.withNullString("Delimiter=<#> QuoteChar=<4> NullString=<> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var10 = var1.withSkipHeaderRecord(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var12 = var10.withQuote('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test321");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var1.toString();
    boolean var4 = var1.isEscapeCharacterSet();
    boolean var5 = var1.getAllowMissingColumnNames();
    java.lang.Character var6 = var1.getEscapeCharacter();
    java.lang.String[] var7 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var9 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.Character var10 = var9.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test322");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var10);
    java.util.List var12 = var11.getRecords();
    boolean var13 = var11.isClosed();
    long var14 = var11.getCurrentLineNumber();
    java.util.List var15 = var11.getRecords();
    boolean var16 = var11.isClosed();
    boolean var17 = var11.isClosed();
    java.util.Iterator var18 = var11.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test323");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    boolean var7 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    boolean var10 = var9.getIgnoreSurroundingSpaces();
    boolean var11 = var9.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test324");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var6.withQuote((java.lang.Character)'a');
    boolean var10 = var9.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var13 = var12.getHeader();
    boolean var14 = var12.isCommentMarkerSet();
    boolean var15 = var12.getIgnoreSurroundingSpaces();
    boolean var16 = var12.isNullStringSet();
    org.apache.commons.csv.CSVFormat var18 = var12.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var19 = var12.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var23.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreEmptyLines();
    java.lang.Character var26 = var25.getCommentMarker();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.QuoteMode var29 = var28.getQuoteMode();
    boolean var30 = var28.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var32 = var28.withCommentMarker('a');
    java.lang.Character var33 = var28.getCommentMarker();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator('a');
    char var39 = var38.getDelimiter();
    java.lang.String[] var40 = var38.getHeaderComments();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var44 = var43.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var46 = var44.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var48 = var46.withEscape(' ');
    boolean var49 = var46.getIgnoreSurroundingSpaces();
    java.lang.Character var50 = var46.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var51 = var46.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var52 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var51);
    java.util.Map var53 = var52.getHeaderMap();
    java.util.List var54 = var52.getRecords();
    boolean var55 = var52.isClosed();
    boolean var56 = var38.equals((java.lang.Object)var52);
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var59 = var58.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var61 = var59.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var64 = var63.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var66 = var64.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var68 = var66.withEscape(' ');
    java.lang.String[] var70 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var71 = var66.withHeader(var70);
    org.apache.commons.csv.CSVFormat var72 = var59.withHeader(var70);
    org.apache.commons.csv.CSVFormat var73 = var38.withHeaderComments((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var74 = var28.withHeader(var70);
    java.lang.String var75 = var25.format((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var76 = var9.withHeaderComments((java.lang.Object[])var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var75.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test325");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var5.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var8 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines(true);
    boolean var11 = var3.equals((java.lang.Object)var10);
    java.lang.String var12 = var10.getNullString();
    org.apache.commons.csv.CSVFormat var14 = var10.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.QuoteMode var15 = var14.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test326");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    org.apache.commons.csv.CSVFormat var9 = var5.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Default#Excel#MySQL#RFC4180#TDF", var10);
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withIgnoreSurroundingSpaces();
    java.lang.Character var17 = var10.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test327");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withDelimiter(' ');
    boolean var10 = var8.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var12 = var8.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('a');
    java.lang.String[] var21 = var18.getHeaderComments();
    boolean var22 = var18.isNullStringSet();
    org.apache.commons.csv.CSVFormat var24 = var18.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var28 = var26.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var29 = var28.getQuoteMode();
    org.apache.commons.csv.CSVFormat var31 = var28.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var33 = var28.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var42 = var40.withQuote((java.lang.Character)'4');
    java.lang.Character var43 = var42.getQuoteCharacter();
    boolean var44 = var42.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var46 = var42.withIgnoreSurroundingSpaces(true);
    boolean var47 = var46.getSkipHeaderRecord();
    java.lang.String[] var48 = var46.getHeaderComments();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var51 = var50.withSkipHeaderRecord();
    boolean var52 = var50.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var54 = var50.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var55 = var54.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var59 = var57.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var60 = var59.getQuoteMode();
    java.lang.Character var61 = var59.getCommentMarker();
    java.lang.Object[] var62 = new java.lang.Object[] { var59};
    java.lang.String var63 = var55.format(var62);
    org.apache.commons.csv.CSVFormat var64 = var46.withHeaderComments(var62);
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var67 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var69 = var67.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var71 = var69.withQuote((java.lang.Character)'4');
    java.lang.Character var72 = var71.getQuoteCharacter();
    boolean var73 = var71.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var75 = var71.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var77 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var78 = var77.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var80 = var78.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var82 = var80.withEscape(' ');
    java.lang.String[] var84 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var85 = var80.withHeader(var84);
    boolean var86 = var85.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var88 = var85.withSkipHeaderRecord(true);
    java.lang.String[] var89 = var88.getHeader();
    org.apache.commons.csv.CSVFormat var90 = var71.withHeader(var89);
    org.apache.commons.csv.CSVFormat var91 = var46.withHeader(var89);
    org.apache.commons.csv.CSVFormat var92 = var33.withHeader(var89);
    org.apache.commons.csv.CSVFormat var93 = var18.withHeaderComments((java.lang.Object[])var89);
    org.apache.commons.csv.CSVFormat var94 = var15.withHeader(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + '4'+ "'", var43.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + '4'+ "'", var61.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var63.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + '4'+ "'", var72.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test328");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var9 = var4.withAllowMissingColumnNames();
    boolean var10 = var9.getSkipHeaderRecord();
    char var11 = var9.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord();
    boolean var13 = var12.isNullStringSet();
    java.lang.String[] var14 = var12.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test329");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape(' ');
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var12.withHeader(var16);
    boolean var18 = var17.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var17.withSkipHeaderRecord(true);
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var30 = var29.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var32 = var30.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var34.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var39 = var37.withEscape(' ');
    java.lang.String[] var41 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var42 = var37.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var30.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var27.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var45 = var20.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var7.withHeaderComments((java.lang.Object[])var41);
    boolean var47 = var46.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var49 = var46.withEscape((java.lang.Character)'4');
    java.lang.String var50 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false HeaderComments:[Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true]"+ "'", var50.equals("Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false HeaderComments:[Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true]"));

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test330");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var7 = var3.withAllowMissingColumnNames(false);
    boolean var8 = var3.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var3.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withIgnoreSurroundingSpaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var10.withEscape('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test331");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    boolean var7 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var5.withNullString("Delimiter=<a#> SkipHeaaderRecord:truea");
    org.apache.commons.csv.QuoteMode var12 = var11.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test332");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var12 = var6.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var15 = var6.withIgnoreSurroundingSpaces();
    java.lang.String[] var16 = var6.getHeader();
    org.apache.commons.csv.CSVFormat var18 = var6.withIgnoreSurroundingSpaces(true);
    boolean var19 = var18.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test333");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    boolean var11 = var9.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator("Delimiter=<#> QuoteChar=<4> NullString=<> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Default#Excel#MySQL#RFC4180#TDF", var9);
    long var15 = var14.getRecordNumber();
    java.util.Map var16 = var14.getHeaderMap();
    java.util.List var17 = var14.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test334");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<#> NullString=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test335");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('4');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    boolean var16 = var14.isQuoteCharacterSet();
    java.lang.String var17 = var14.toString();
    java.lang.String var18 = var14.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var21.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var25 = var23.withEscape(' ');
    boolean var26 = var23.getIgnoreSurroundingSpaces();
    boolean var27 = var23.isEscapeCharacterSet();
    java.lang.String var28 = var23.getNullString();
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var31 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var33 = var31.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var35 = var33.withEscape(' ');
    org.apache.commons.csv.CSVFormat var37 = var33.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var38 = var33.getQuoteMode();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var41 = var40.getHeader();
    boolean var42 = var40.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var44.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var46 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments((java.lang.Object[])var46);
    org.apache.commons.csv.CSVFormat var48 = var40.withHeaderComments((java.lang.Object[])var46);
    java.lang.String var49 = var33.format((java.lang.Object[])var46);
    java.lang.String var50 = var23.format((java.lang.Object[])var46);
    java.lang.String var51 = var14.format((java.lang.Object[])var46);
    org.apache.commons.csv.CSVFormat var53 = var14.withAllowMissingColumnNames(true);
    java.lang.String[] var54 = var53.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Delimiter=<#> QuoteChar=<4> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var17.equals("Delimiter=<#> QuoteChar=<4> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var49.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var50.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONE"+ "'", var51.equals("ALL#MINIMAL#NON_NUMERIC#NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test336");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    java.lang.Character var15 = var12.getCommentMarker();
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true HeaderComments:[Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false]", var12);
    long var17 = var16.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test337");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var7 = var6.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreSurroundingSpaces(false);
    java.lang.String var10 = var9.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var9.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var16 = var9.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var18 = var16.withCommentMarker('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test338");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'4');
    java.lang.Character var20 = var19.getQuoteCharacter();
    boolean var21 = var19.getSkipHeaderRecord();
    java.lang.Character var22 = var19.getEscapeCharacter();
    char var23 = var19.getDelimiter();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var26 = var25.getHeader();
    boolean var27 = var25.isCommentMarkerSet();
    boolean var28 = var25.getIgnoreSurroundingSpaces();
    boolean var29 = var25.isNullStringSet();
    org.apache.commons.csv.CSVFormat var31 = var25.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var32 = var25.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var34 = var25.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var37 = var36.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var38 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var39 = var36.withHeaderComments((java.lang.Object[])var38);
    boolean var40 = var25.equals((java.lang.Object)var39);
    java.lang.String[] var41 = var25.getHeader();
    org.apache.commons.csv.CSVFormat var42 = var25.withAllowMissingColumnNames();
    boolean var43 = var42.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var46 = var45.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var48 = var46.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var50 = var48.withEscape(' ');
    java.lang.String[] var52 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var53 = var48.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var42.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var19.withHeader(var52);
    org.apache.commons.csv.CSVFormat var56 = var12.withHeader(var52);
    boolean var57 = var12.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + '4'+ "'", var20.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test339");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var12 = var6.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var14 = var6.withRecordSeparator(' ');
    boolean var15 = var14.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test340");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var8 = var6.withEscape(' ');
    java.lang.String[] var10 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var11 = var6.withHeader(var10);
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true", var11);
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:true", var11);
    long var16 = var15.getRecordNumber();
    java.util.List var17 = var15.getRecords();
    long var18 = var15.getCurrentLineNumber();
    java.util.List var19 = var15.getRecords();
    java.util.Spliterator var20 = var15.spliterator();
    boolean var21 = var15.isClosed();
    java.util.Iterator var22 = var15.iterator();
    java.util.List var23 = var15.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test341");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=<#> Escape=< > RecordSeparator=<4> SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test342");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var19 = var15.withRecordSeparator("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var20 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var15.withRecordSeparator(' ');
    java.lang.Character var23 = var22.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ' '+ "'", var23.equals(' '));

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test343");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var6 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    boolean var12 = var10.isCommentMarkerSet();
    boolean var13 = var5.equals((java.lang.Object)var12);
    org.apache.commons.csv.CSVFormat var15 = var5.withDelimiter('#');
    boolean var16 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var23 = var21.withEscape(' ');
    java.lang.String[] var25 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var26 = var21.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var5.withHeader(var25);
    org.apache.commons.csv.CSVFormat var28 = var1.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var31 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var33 = var31.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var35 = var33.withEscape(' ');
    java.lang.String[] var37 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var38 = var33.withHeader(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var42 = var38.withEscape(' ');
    org.apache.commons.csv.CSVFormat var44 = var42.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var46 = var42.withCommentMarker('4');
    boolean var47 = var42.isCommentMarkerSet();
    boolean var48 = var1.equals((java.lang.Object)var42);
    org.apache.commons.csv.CSVFormat var49 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var51 = var1.withAllowMissingColumnNames(true);
    java.lang.String var52 = var51.toString();
    org.apache.commons.csv.CSVFormat var54 = var51.withRecordSeparator("Delimiter=<#> NullString=<hi!> SurroundingSpaces:ignored SkipHeaderRecord:true");
    boolean var55 = var54.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var52.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test344");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var2.toString();
    boolean var4 = var2.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var7.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape(' ');
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var9.withHeader(var13);
    java.lang.Character var15 = var14.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var23 = var21.withEscape(' ');
    java.lang.String[] var25 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var26 = var21.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var16.withHeader(var25);
    org.apache.commons.csv.CSVFormat var28 = var2.withHeader(var25);
    org.apache.commons.csv.CSVFormat var29 = var2.withAllowMissingColumnNames();
    char var30 = var29.getDelimiter();
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreSurroundingSpaces();
    java.lang.String[] var32 = var31.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test345");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var6.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test346");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("hi!", var5);
    java.util.Map var10 = var9.getHeaderMap();
    var9.close();
    java.util.Map var12 = var9.getHeaderMap();
    java.util.Iterator var13 = var9.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test347");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var10);
    java.util.List var12 = var11.getRecords();
    boolean var13 = var11.isClosed();
    long var14 = var11.getCurrentLineNumber();
    java.util.Spliterator var15 = var11.spliterator();
    java.util.Map var16 = var11.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test348");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var5 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:falsea", var7);
    java.lang.String[] var9 = var7.getHeader();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var12 = var11.getHeader();
    boolean var13 = var11.isCommentMarkerSet();
    boolean var14 = var11.getIgnoreSurroundingSpaces();
    boolean var15 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var17 = var11.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var18 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var24 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var25 = var22.withHeaderComments((java.lang.Object[])var24);
    boolean var26 = var11.equals((java.lang.Object)var25);
    java.lang.String[] var27 = var11.getHeader();
    org.apache.commons.csv.CSVFormat var28 = var11.withAllowMissingColumnNames();
    boolean var29 = var28.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var32 = var31.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var34 = var32.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var36 = var34.withEscape(' ');
    java.lang.String[] var38 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var39 = var34.withHeader(var38);
    org.apache.commons.csv.CSVFormat var40 = var28.withHeader(var38);
    org.apache.commons.csv.CSVFormat var41 = var7.withHeaderComments((java.lang.Object[])var38);
    org.apache.commons.csv.CSVFormat var42 = var7.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test349");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var6 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator('a');
    java.lang.Object[] var9 = new java.lang.Object[] { var6};
    org.apache.commons.csv.CSVFormat var10 = var1.withHeaderComments(var9);
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape(' ');
    java.lang.String[] var20 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var21 = var16.withHeader(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var25 = var21.withEscape(' ');
    boolean var26 = var10.equals((java.lang.Object)' ');
    org.apache.commons.csv.CSVFormat var27 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var29 = var27.withQuote('a');
    java.lang.String var30 = var27.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test350");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withIgnoreEmptyLines();
    java.lang.String var4 = var3.toString();
    boolean var5 = var3.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var8 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var12 = var10.withEscape(' ');
    java.lang.String[] var14 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var15 = var10.withHeader(var14);
    java.lang.Character var16 = var15.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var20 = var19.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = var20.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var24 = var22.withEscape(' ');
    java.lang.String[] var26 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var27 = var22.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var17.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var3.withHeader(var26);
    org.apache.commons.csv.CSVFormat var30 = var3.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var3.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> Escape=< > SkipHeaderRecord:false", var3);
    boolean var34 = var33.isClosed();
    boolean var35 = var33.isClosed();
    java.util.Iterator var36 = var33.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var4.equals("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test351");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    boolean var4 = var2.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var6.withRecordSeparator('4');
    boolean var10 = var9.getSkipHeaderRecord();
    boolean var11 = var9.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:true", var12);
    java.util.Iterator var14 = var13.iterator();
    java.util.Map var15 = var13.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test352");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    boolean var10 = var9.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord(true);
    java.lang.String[] var13 = var12.getHeader();
    boolean var14 = var12.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var27.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withEscape(' ');
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var29.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var22.withHeader(var33);
    org.apache.commons.csv.CSVFormat var36 = var19.withHeaderComments((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var37 = var12.withHeader(var33);
    org.apache.commons.csv.CSVFormat var38 = var12.withIgnoreEmptyLines();
    java.lang.Character var39 = var38.getEscapeCharacter();
    boolean var40 = var38.isQuoteCharacterSet();
    java.lang.Character var41 = var38.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test353");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var6.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var6.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var6.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test354");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var11.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withDelimiter('#');
    boolean var17 = var14.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var18 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", var14);
    boolean var19 = var14.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var14.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var24.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var29 = var28.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var31 = var29.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var33 = var31.withEscape(' ');
    java.lang.String[] var35 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var36 = var31.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var24.withHeader(var35);
    org.apache.commons.csv.CSVFormat var38 = var14.withHeader(var35);
    org.apache.commons.csv.CSVFormat var39 = var2.withHeaderComments((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var41 = var39.withQuote((java.lang.Character)'a');
    boolean var42 = var39.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test355");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var4.withIgnoreEmptyLines(true);
    boolean var14 = var13.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    java.lang.String var19 = var18.getNullString();
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames();
    boolean var21 = var18.isQuoteCharacterSet();
    boolean var22 = var18.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = var18.withQuote('#');
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var28 = var26.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var29 = var28.getQuoteMode();
    org.apache.commons.csv.CSVFormat var31 = var28.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var33 = var31.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var37 = var35.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var39 = var35.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var40 = var39.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var44 = var42.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var45 = var44.getQuoteMode();
    org.apache.commons.csv.CSVFormat var47 = var44.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var49 = var44.withSkipHeaderRecord(false);
    java.lang.String[] var51 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var52 = var49.withHeader(var51);
    char var53 = var52.getDelimiter();
    org.apache.commons.csv.CSVFormat var55 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var56 = var55.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var58 = var56.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var60 = var58.withQuote((java.lang.Character)'4');
    java.lang.String[] var61 = var58.getHeaderComments();
    org.apache.commons.csv.QuoteMode var62 = var58.getQuoteMode();
    org.apache.commons.csv.CSVFormat var64 = var58.withCommentMarker((java.lang.Character)'a');
    char var65 = var64.getDelimiter();
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var69 = var67.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var70 = var69.getQuoteMode();
    boolean var71 = var69.isCommentMarkerSet();
    boolean var72 = var69.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var74 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var75 = var74.getHeader();
    boolean var76 = var74.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var78 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var79 = var78.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var81 = var79.withRecordSeparator('a');
    java.lang.Object[] var82 = new java.lang.Object[] { var79};
    org.apache.commons.csv.CSVFormat var83 = var74.withHeaderComments(var82);
    java.lang.String[] var84 = var83.getHeaderComments();
    org.apache.commons.csv.CSVFormat var85 = var69.withHeaderComments((java.lang.Object[])var84);
    org.apache.commons.csv.CSVFormat var86 = var64.withHeader(var84);
    java.lang.String var87 = var52.format((java.lang.Object[])var84);
    java.lang.String[] var88 = var52.getHeader();
    org.apache.commons.csv.CSVFormat var89 = var39.withHeaderComments((java.lang.Object[])var88);
    org.apache.commons.csv.CSVFormat var90 = var18.withHeader(var88);
    org.apache.commons.csv.CSVFormat var91 = var13.withHeader(var88);
    boolean var92 = var13.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "Delimiter=<#> SkipHeaderRecord:falseDelimiter=<#> SkipHeaderRecord:true"+ "'", var87.equals("Delimiter=<#> SkipHeaderRecord:falseDelimiter=<#> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test356");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var14 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments((java.lang.Object[])var14);
    boolean var16 = var1.equals((java.lang.Object)var15);
    org.apache.commons.csv.CSVFormat var18 = var15.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote('a');
    java.lang.String var22 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=<#> QuoteChar=<a> CommentStart=< > SkipHeaderRecord:false HeaderComments:[ALL, MINIMAL, NON_NUMERIC, NONE]"+ "'", var22.equals("Delimiter=<#> QuoteChar=<a> CommentStart=< > SkipHeaderRecord:false HeaderComments:[ALL, MINIMAL, NON_NUMERIC, NONE]"));

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test357");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var10.withQuote('a');
    boolean var19 = var10.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test358");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreSurroundingSpaces(true);
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var18 = var15.getHeaderComments();
    boolean var19 = var15.isCommentMarkerSet();
    java.lang.String var20 = var15.toString();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var23 = var22.getHeader();
    boolean var24 = var22.isCommentMarkerSet();
    boolean var25 = var22.getIgnoreSurroundingSpaces();
    boolean var26 = var22.isNullStringSet();
    org.apache.commons.csv.CSVFormat var28 = var22.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var29 = var22.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var30 = var29.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var34 = var33.getHeader();
    boolean var35 = var33.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    java.lang.Object[] var41 = new java.lang.Object[] { var38};
    org.apache.commons.csv.CSVFormat var42 = var33.withHeaderComments(var41);
    java.lang.String[] var43 = var42.getHeaderComments();
    org.apache.commons.csv.CSVFormat var44 = var31.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var15.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var10.withHeader(var43);
    org.apache.commons.csv.CSVFormat var48 = var10.withAllowMissingColumnNames(true);
    java.lang.String var49 = var10.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test359");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    java.lang.Character var8 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var13 = var11.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var15 = var11.withSkipHeaderRecord(true);
    boolean var16 = var15.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test360");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    char var6 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var5.withDelimiter('4');
    boolean var9 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> RecordSeparator=<a> SkipHeaderRecord:true", var5);
    java.util.List var11 = var10.getRecords();
    java.util.Map var12 = var10.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test361");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    java.lang.String var5 = var4.toString();
    org.apache.commons.csv.CSVFormat var7 = var4.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.QuoteMode var8 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var7.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var12 = var7.withSkipHeaderRecord(true);
    char var13 = var12.getDelimiter();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var16.withNullString("Delimiter=<#> SkipHeaderRecord:false HeaderComments:[Default, Excel, MySQL, RFC4180, TDF]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test362");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.isCommentMarkerSet();
    boolean var23 = var20.getIgnoreSurroundingSpaces();
    boolean var24 = var20.isNullStringSet();
    org.apache.commons.csv.CSVFormat var26 = var20.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var27 = var20.withIgnoreSurroundingSpaces();
    boolean var28 = var27.isNullStringSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var29 = org.apache.commons.csv.CSVFormat.Predefined.values();
    boolean var30 = var27.equals((java.lang.Object)var29);
    java.lang.String var31 = var15.format((java.lang.Object[])var29);
    org.apache.commons.csv.QuoteMode var32 = var15.getQuoteMode();
    java.lang.String[] var33 = var15.getHeaderComments();
    org.apache.commons.csv.CSVFormat var35 = var15.withEscape(' ');
    org.apache.commons.csv.CSVFormat var37 = var15.withRecordSeparator("Delimiter=<a#> SkipHeaaderRecord:truea");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Default4Excel4MySQL4RFC41804TDFa"+ "'", var31.equals("Default4Excel4MySQL4RFC41804TDFa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test363");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces();
    java.lang.String var14 = var13.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var13.withAllowMissingColumnNames(true);
    java.lang.String[] var17 = var13.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test364");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(true);
    boolean var11 = var10.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var14 = var13.getHeader();
    boolean var15 = var13.isCommentMarkerSet();
    boolean var16 = var13.getIgnoreSurroundingSpaces();
    java.lang.String[] var17 = var13.getHeader();
    org.apache.commons.csv.CSVFormat var19 = var13.withCommentMarker((java.lang.Character)' ');
    boolean var20 = var10.equals((java.lang.Object)' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var22 = var10.withCommentMarker((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test365");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var12 = var4.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var14 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var16 = var14.withCommentMarker((java.lang.Character)' ');
    boolean var17 = var16.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test366");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Map var14 = var13.getHeaderMap();
    long var15 = var13.getCurrentLineNumber();
    boolean var16 = var13.isClosed();
    long var17 = var13.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test367");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = var10.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var13 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test368");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withDelimiter('#');
    java.lang.String var7 = var6.toString();
    boolean var8 = var6.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Delimiter=<#> SkipHeaderRecord:true"+ "'", var7.equals("Delimiter=<#> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test369");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var11 = var10.getQuoteMode();
    java.lang.Character var12 = var10.getCommentMarker();
    java.lang.Object[] var13 = new java.lang.Object[] { var10};
    java.lang.String var14 = var6.format(var13);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var19.withHeader(var23);
    org.apache.commons.csv.CSVFormat var26 = var19.withCommentMarker((java.lang.Character)'4');
    boolean var27 = var6.equals((java.lang.Object)var19);
    org.apache.commons.csv.CSVFormat var29 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var31 = var6.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:truea");
    java.lang.Character var32 = var6.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var33 = var6.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '4'+ "'", var12.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var14.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test370");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    java.lang.String[] var6 = var2.getHeaderComments();
    java.lang.Character var7 = var2.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var8 = var2.withSkipHeaderRecord();
    java.lang.Character var9 = var8.getQuoteCharacter();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=< #>  SkipHeaderRecord:true", var8);
    java.util.List var11 = var10.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test371");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    java.lang.String[] var5 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var7 = var1.withDelimiter(' ');
    java.lang.String var8 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var10 = var1.withNullString("4");
    org.apache.commons.csv.CSVFormat var12 = var1.withNullString("Delimiter=<#> NullString=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var19 = var17.withEscape(' ');
    java.lang.String[] var21 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var22 = var17.withHeader(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var26 = var22.withEscape(' ');
    org.apache.commons.csv.CSVFormat var28 = var26.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var30 = var26.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var32 = var26.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var35 = var34.getHeader();
    boolean var36 = var34.isCommentMarkerSet();
    boolean var37 = var34.getIgnoreSurroundingSpaces();
    boolean var38 = var34.isNullStringSet();
    org.apache.commons.csv.CSVFormat var40 = var34.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var47 = var45.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var49 = var47.withEscape(' ');
    java.lang.Character var50 = var49.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var53 = var52.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var55 = var53.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var57 = var55.withEscape(' ');
    java.lang.String[] var59 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var60 = var55.withHeader(var59);
    org.apache.commons.csv.CSVFormat var62 = var60.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var64 = var60.withEscape(' ');
    org.apache.commons.csv.CSVFormat var66 = var64.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var68 = var64.withCommentMarker('4');
    boolean var69 = var64.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var71 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var72 = var71.getHeader();
    boolean var73 = var71.isCommentMarkerSet();
    boolean var74 = var71.getIgnoreSurroundingSpaces();
    boolean var75 = var71.isNullStringSet();
    org.apache.commons.csv.CSVFormat var77 = var71.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var78 = var71.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var79 = var78.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var80 = var79.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var82 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var83 = var82.getHeader();
    boolean var84 = var82.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var86 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var87 = var86.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var89 = var87.withRecordSeparator('a');
    java.lang.Object[] var90 = new java.lang.Object[] { var87};
    org.apache.commons.csv.CSVFormat var91 = var82.withHeaderComments(var90);
    java.lang.String[] var92 = var91.getHeaderComments();
    org.apache.commons.csv.CSVFormat var93 = var80.withHeader(var92);
    org.apache.commons.csv.CSVFormat var94 = var64.withHeader(var92);
    org.apache.commons.csv.CSVFormat var95 = var49.withHeaderComments((java.lang.Object[])var92);
    java.lang.String var96 = var40.format((java.lang.Object[])var92);
    org.apache.commons.csv.CSVFormat var97 = var32.withHeader(var92);
    org.apache.commons.csv.CSVFormat var98 = var12.withHeaderComments((java.lang.Object[])var92);
    java.lang.String var99 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "Delimiter=<#> SkipHeaderRecord:true"+ "'", var96.equals("Delimiter=<#> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "Delimiter=<#> NullString=<Delimiter=<#> NullString=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true> SkipHeaderRecord:false"+ "'", var99.equals("Delimiter=<#> NullString=<Delimiter=<#> NullString=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true> SkipHeaderRecord:false"));

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test372");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    char var6 = var5.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var5.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true HeaderComments:[Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false]", var5);
    org.apache.commons.csv.CSVFormat var14 = var5.withCommentMarker(' ');
    boolean var15 = var5.isNullStringSet();
    boolean var16 = var5.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test373");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withEscape('a');
    boolean var11 = var10.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var10.withQuote(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test374");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withQuote(' ');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var2);
    java.util.Iterator var7 = var6.iterator();
    var6.close();
    long var9 = var6.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test375");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker('a');
    boolean var6 = var5.getSkipHeaderRecord();
    java.lang.String var7 = var5.toString();
    java.lang.Character var8 = var5.getEscapeCharacter();
    boolean var9 = var5.isQuoteCharacterSet();
    java.lang.String var10 = var5.getNullString();
    boolean var11 = var5.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var7.equals("Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test376");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var5.withRecordSeparator('4');
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var14 = var10.withDelimiter('4');
    boolean var15 = var14.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test377");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var6 = var4.withSkipHeaderRecord();
    boolean var7 = var4.isEscapeCharacterSet();
    char var8 = var4.getDelimiter();
    java.lang.String[] var9 = var4.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test378");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var11 = var10.getHeader();
    boolean var12 = var10.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    java.lang.Object[] var18 = new java.lang.Object[] { var15};
    org.apache.commons.csv.CSVFormat var19 = var10.withHeaderComments(var18);
    boolean var20 = var8.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVFormat var21 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var8.withAllowMissingColumnNames();
    java.lang.String var24 = var8.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "a"+ "'", var24.equals("a"));

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test379");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    boolean var4 = var2.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator("Default4Excel4MySQL4RFC41804TDFa");
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("4Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true4", var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test380");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator('a');
    java.lang.String[] var11 = var10.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.QuoteMode var14 = var13.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test381");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    java.lang.String[] var4 = var1.getHeaderComments();
    java.lang.String[] var5 = var1.getHeader();
    java.lang.String[] var6 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var8 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = var1.withEscape('4');
    java.lang.Character var14 = var1.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var16 = var1.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var18 = var1.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test382");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    boolean var9 = var5.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = var5.withIgnoreHeaderCase(false);
    java.lang.Character var12 = var11.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var15 = var14.getHeader();
    boolean var16 = var14.isCommentMarkerSet();
    boolean var17 = var14.getIgnoreSurroundingSpaces();
    boolean var18 = var14.isNullStringSet();
    org.apache.commons.csv.CSVFormat var20 = var14.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var21 = var14.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var23 = var14.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var25.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var27 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var28 = var25.withHeaderComments((java.lang.Object[])var27);
    boolean var29 = var14.equals((java.lang.Object)var28);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var32 = var31.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var33 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var34 = var31.withHeaderComments((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var37 = var36.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var39 = var37.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var41 = var39.withQuote((java.lang.Character)'4');
    java.lang.Character var42 = var41.getQuoteCharacter();
    boolean var43 = var41.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var45 = var41.withIgnoreSurroundingSpaces(true);
    boolean var46 = var45.getSkipHeaderRecord();
    java.lang.String[] var47 = var45.getHeaderComments();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var50 = var49.withSkipHeaderRecord();
    boolean var51 = var49.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var53 = var49.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var54 = var53.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var58 = var56.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var59 = var58.getQuoteMode();
    java.lang.Character var60 = var58.getCommentMarker();
    java.lang.Object[] var61 = new java.lang.Object[] { var58};
    java.lang.String var62 = var54.format(var61);
    org.apache.commons.csv.CSVFormat var63 = var45.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var66 = var65.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var68 = var66.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var70 = var68.withQuote((java.lang.Character)'4');
    java.lang.Character var71 = var70.getQuoteCharacter();
    boolean var72 = var70.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var74 = var70.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var76 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var77 = var76.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var79 = var77.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var81 = var79.withEscape(' ');
    java.lang.String[] var83 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var84 = var79.withHeader(var83);
    boolean var85 = var84.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var87 = var84.withSkipHeaderRecord(true);
    java.lang.String[] var88 = var87.getHeader();
    org.apache.commons.csv.CSVFormat var89 = var70.withHeader(var88);
    org.apache.commons.csv.CSVFormat var90 = var45.withHeader(var88);
    java.lang.String var91 = var34.format((java.lang.Object[])var88);
    org.apache.commons.csv.CSVFormat var92 = var28.withHeader(var88);
    java.lang.String var93 = var11.format((java.lang.Object[])var88);
    org.apache.commons.csv.CSVParser var94 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[ALL, MINIMAL, NON_NUMERIC, NONE]", var11);
    long var95 = var94.getRecordNumber();
    boolean var96 = var94.isClosed();
    boolean var97 = var94.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + '4'+ "'", var42.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + '4'+ "'", var60.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var62.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + '4'+ "'", var71.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var91.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var93.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test383");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    char var13 = var12.getDelimiter();
    org.apache.commons.csv.CSVFormat var15 = var12.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var17 = var12.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var19 = var17.withNullString("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var21 = var19.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true", var19);
    long var23 = var22.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0L);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test384");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var10);
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var15 = var13.withNullString("Delimiter=<#> NullString=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true");
    java.lang.String var16 = var13.toString();
    java.lang.String[] var17 = var13.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Delimiter=<#> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var16.equals("Delimiter=<#> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test385");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter(' ');
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var13.withEscape((java.lang.Character)'4');
    boolean var17 = var16.getSkipHeaderRecord();
    boolean var18 = var16.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test386");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    java.lang.Character var9 = var4.getQuoteCharacter();
    boolean var10 = var4.getIgnoreEmptyLines();
    java.lang.String var11 = var4.toString();
    org.apache.commons.csv.CSVFormat var13 = var4.withIgnoreSurroundingSpaces(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var4.withEscape((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test387");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withQuote(' ');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var2);
    java.util.List var7 = var6.getRecords();
    long var8 = var6.getCurrentLineNumber();
    var6.close();
    java.util.Spliterator var10 = var6.spliterator();
    long var11 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test388");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=<#> RecordSeparator=<Default#Excel#MySQL#4RFC441804#TDFa> SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test389");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    java.lang.String[] var4 = var1.getHeaderComments();
    java.lang.String[] var5 = var1.getHeader();
    java.lang.String[] var6 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var8 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('4');
    java.lang.String[] var13 = var12.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test390");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var7 = var4.withAllowMissingColumnNames(false);
    boolean var8 = var4.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var13 = var12.getQuoteMode();
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces();
    java.lang.String var15 = var14.getRecordSeparator();
    boolean var16 = var14.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var14.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var20 = var14.withIgnoreEmptyLines(false);
    java.lang.Character var21 = var14.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var23 = var14.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var25 = var14.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var28 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = var28.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var32 = var30.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var34 = var30.withDelimiter(' ');
    boolean var36 = var34.equals((java.lang.Object)'4');
    org.apache.commons.csv.CSVFormat var38 = var34.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var39 = var34.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var42 = var41.withSkipHeaderRecord();
    boolean var43 = var41.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var45 = var41.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var47 = var41.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var51 = var49.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var52 = var49.getHeaderComments();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var55 = var54.withIgnoreEmptyLines();
    java.lang.String var56 = var54.toString();
    java.lang.Object[] var57 = new java.lang.Object[] { var54};
    java.lang.String var58 = var49.format(var57);
    org.apache.commons.csv.CSVFormat var59 = var47.withHeaderComments(var57);
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var62 = var61.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var64 = var62.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var67 = var66.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var69 = var67.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var71 = var69.withEscape(' ');
    java.lang.String[] var73 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var74 = var69.withHeader(var73);
    org.apache.commons.csv.CSVFormat var75 = var62.withHeader(var73);
    org.apache.commons.csv.CSVFormat var77 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var78 = var77.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var80 = var78.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var82 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var83 = var82.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var85 = var83.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var87 = var85.withEscape(' ');
    java.lang.String[] var89 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var90 = var85.withHeader(var89);
    org.apache.commons.csv.CSVFormat var91 = var78.withHeader(var89);
    org.apache.commons.csv.CSVFormat var92 = var62.withHeader(var89);
    java.lang.String var93 = var47.format((java.lang.Object[])var89);
    java.lang.String var94 = var39.format((java.lang.Object[])var89);
    org.apache.commons.csv.CSVFormat var95 = var25.withHeader(var89);
    org.apache.commons.csv.CSVFormat var96 = var4.withHeaderComments((java.lang.Object[])var89);
    java.lang.String[] var97 = var96.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var56.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var58.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var93.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var94.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test391");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreSurroundingSpaces(true);
    boolean var12 = var11.isCommentMarkerSet();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:falsea", var11);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var20 = var18.withEscape(' ');
    java.lang.String[] var22 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var23 = var18.withHeader(var22);
    boolean var24 = var23.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = var23.withSkipHeaderRecord(true);
    boolean var27 = var23.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var28 = var23.withSkipHeaderRecord();
    boolean var29 = var11.equals((java.lang.Object)var23);
    org.apache.commons.csv.CSVFormat var31 = var23.withEscape('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test392");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    boolean var7 = var6.getSkipHeaderRecord();
    java.lang.Character var8 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var6.withDelimiter('a');
    boolean var11 = var6.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test393");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    java.lang.String[] var14 = var11.getHeader();
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreEmptyLines(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var18 = var16.withQuote('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test394");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    boolean var4 = var2.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var12 = var11.getQuoteMode();
    java.lang.Character var13 = var11.getCommentMarker();
    java.lang.Object[] var14 = new java.lang.Object[] { var11};
    java.lang.String var15 = var7.format(var14);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var22 = var20.withEscape(' ');
    java.lang.String[] var24 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var25 = var20.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = var20.withCommentMarker((java.lang.Character)'4');
    boolean var28 = var7.equals((java.lang.Object)var20);
    org.apache.commons.csv.CSVParser var29 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true", var7);
    java.util.List var30 = var29.getRecords();
    java.util.Iterator var31 = var29.iterator();
    boolean var32 = var29.isClosed();
    java.util.Map var33 = var29.getHeaderMap();
    java.util.Iterator var34 = var29.iterator();
    java.util.Map var35 = var29.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '4'+ "'", var13.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test395");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var19 = var17.withEscape(' ');
    org.apache.commons.csv.CSVFormat var21 = var17.withQuote('4');
    org.apache.commons.csv.CSVFormat var23 = var17.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var25.withSkipHeaderRecord();
    boolean var27 = var25.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var29 = var25.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var37 = var35.withEscape(' ');
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var35.withHeader(var39);
    java.lang.Character var41 = var35.getCommentMarker();
    org.apache.commons.csv.CSVFormat var42 = var35.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var43 = org.apache.commons.csv.CSVParser.parse("", var35);
    java.util.Spliterator var44 = var43.spliterator();
    java.util.Map var45 = var43.getHeaderMap();
    java.util.Spliterator var46 = var43.spliterator();
    boolean var47 = var29.equals((java.lang.Object)var43);
    java.lang.Character var48 = var29.getCommentMarker();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var51 = var50.withSkipHeaderRecord();
    boolean var52 = var50.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var54 = var50.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var55 = var54.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var57 = var54.withRecordSeparator('4');
    java.lang.Character var58 = var54.getQuoteCharacter();
    java.lang.String var59 = var54.toString();
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var63 = var61.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var64 = var63.getQuoteMode();
    org.apache.commons.csv.CSVFormat var66 = var63.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var68 = var63.withSkipHeaderRecord(false);
    java.lang.String[] var70 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var71 = var68.withHeader(var70);
    org.apache.commons.csv.CSVFormat var72 = var54.withHeader(var70);
    org.apache.commons.csv.CSVFormat var73 = var29.withHeader(var70);
    org.apache.commons.csv.CSVFormat var74 = var23.withHeaderComments((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var75 = var12.withHeader(var70);
    boolean var76 = var75.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var78 = var75.withDelimiter('4');
    org.apache.commons.csv.QuoteMode var79 = var78.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ' '+ "'", var48.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "Delimiter=<#> CommentStart=< > SkipHeaderRecord:false"+ "'", var59.equals("Delimiter=<#> CommentStart=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test396");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = var4.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var10 = var8.withEscape('a');
    boolean var11 = var10.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test397");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    boolean var11 = var7.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var7);
    long var13 = var12.getRecordNumber();
    java.util.Spliterator var14 = var12.spliterator();
    java.util.Map var15 = var12.getHeaderMap();
    var12.close();
    java.util.Iterator var17 = var12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test398");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var19 = var15.withRecordSeparator("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var21 = var15.withNullString("Delimiter=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var25 = var23.withDelimiter('#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var27 = var23.withDelimiter('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test399");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = var6.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker((java.lang.Character)'a');
    boolean var13 = var10.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var15 = var10.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var17 = var16.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test400");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var4.withDelimiter(' ');
    boolean var9 = var4.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var4.withQuote('a');
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var16 = var15.getHeader();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines();
    boolean var19 = var13.equals((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test401");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    boolean var10 = var9.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var14 = var12.withNullString("4");
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false", var14);
    java.util.Spliterator var16 = var15.spliterator();
    long var17 = var15.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0L);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test402");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.getIgnoreSurroundingSpaces();
    boolean var8 = var4.isEscapeCharacterSet();
    java.lang.String var9 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape(' ');
    org.apache.commons.csv.CSVFormat var18 = var14.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var19 = var14.getQuoteMode();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var22 = var21.getHeader();
    boolean var23 = var21.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var25.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var27 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var28 = var25.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var29 = var21.withHeaderComments((java.lang.Object[])var27);
    java.lang.String var30 = var14.format((java.lang.Object[])var27);
    java.lang.String var31 = var4.format((java.lang.Object[])var27);
    org.apache.commons.csv.QuoteMode var32 = var4.getQuoteMode();
    boolean var33 = var4.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var43 = var41.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var45 = var43.withEscape(' ');
    java.lang.String[] var47 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var48 = var43.withHeader(var47);
    org.apache.commons.csv.CSVFormat var49 = var36.withHeader(var47);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var52 = var51.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var54 = var52.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var57 = var56.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var59 = var57.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var61 = var59.withEscape(' ');
    java.lang.String[] var63 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var64 = var59.withHeader(var63);
    org.apache.commons.csv.CSVFormat var65 = var52.withHeader(var63);
    org.apache.commons.csv.CSVFormat var66 = var36.withHeader(var63);
    org.apache.commons.csv.CSVFormat var67 = var4.withHeader(var63);
    org.apache.commons.csv.CSVFormat var68 = var67.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var70 = var68.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var72 = var68.withIgnoreEmptyLines(true);
    boolean var73 = var68.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var30.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var31.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test403");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.Character var10 = var4.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('#');
    boolean var17 = var14.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test404");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("a", var7);
    org.apache.commons.csv.CSVFormat var11 = var7.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withDelimiter('#');
    boolean var14 = var13.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var18 = var16.withDelimiter('a');
    java.lang.Character var19 = var18.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test405");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var10 = var9.getQuoteMode();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.QuoteMode var13 = var9.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test406");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    boolean var11 = var7.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var7);
    org.apache.commons.csv.CSVFormat var13 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var13.withRecordSeparator("#");
    java.lang.String[] var16 = var15.getHeaderComments();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var19.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var23 = var21.withQuote((java.lang.Character)'4');
    java.lang.Character var24 = var23.getQuoteCharacter();
    java.lang.String var25 = var23.getNullString();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var28 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = var28.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var32 = var30.withEscape(' ');
    java.lang.String[] var34 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var35 = var30.withHeader(var34);
    org.apache.commons.csv.CSVFormat var37 = var35.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var39 = var35.withEscape(' ');
    java.lang.String[] var40 = var35.getHeaderComments();
    java.lang.String var41 = var35.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var44 = var43.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var46 = var44.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var48 = var46.withEscape(' ');
    java.lang.String[] var50 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var51 = var46.withHeader(var50);
    java.lang.Character var52 = var51.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var55 = var53.withQuote((java.lang.Character)' ');
    java.lang.Character var56 = var55.getCommentMarker();
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var59 = var58.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var61 = var59.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var63 = var61.withEscape(' ');
    java.lang.String[] var65 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var66 = var61.withHeader(var65);
    java.lang.String var67 = var55.format((java.lang.Object[])var65);
    org.apache.commons.csv.CSVFormat var68 = var35.withHeaderComments((java.lang.Object[])var65);
    org.apache.commons.csv.CSVFormat var69 = var23.withHeaderComments((java.lang.Object[])var65);
    java.lang.String var70 = var15.format((java.lang.Object[])var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '4'+ "'", var24.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "a"+ "'", var41.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Delimiter=<#>  RecordSeparator=<a>  SkipHeaderRecord:true a"+ "'", var67.equals("Delimiter=<#>  RecordSeparator=<a>  SkipHeaderRecord:true a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "4Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true4#"+ "'", var70.equals("4Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true4#"));

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test407");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var13 = var12.getHeader();
    boolean var14 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    java.lang.Object[] var20 = new java.lang.Object[] { var17};
    org.apache.commons.csv.CSVFormat var21 = var12.withHeaderComments(var20);
    java.lang.String[] var22 = var21.getHeaderComments();
    org.apache.commons.csv.CSVFormat var23 = var10.withHeader(var22);
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator("Delimiter=<#> CommentStart=<4> NullString=<Delimiter=<#> SkipHeaderRecord:false> RecordSeparator=<Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var26 = var23.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test408");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.isCommentMarkerSet();
    boolean var23 = var20.getIgnoreSurroundingSpaces();
    boolean var24 = var20.isNullStringSet();
    org.apache.commons.csv.CSVFormat var26 = var20.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var27 = var20.withIgnoreSurroundingSpaces();
    boolean var28 = var27.isNullStringSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var29 = org.apache.commons.csv.CSVFormat.Predefined.values();
    boolean var30 = var27.equals((java.lang.Object)var29);
    java.lang.String var31 = var15.format((java.lang.Object[])var29);
    org.apache.commons.csv.QuoteMode var32 = var15.getQuoteMode();
    org.apache.commons.csv.CSVFormat var33 = var15.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var35 = var15.withNullString("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var37 = var15.withQuote('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Default4Excel4MySQL4RFC41804TDFa"+ "'", var31.equals("Default4Excel4MySQL4RFC41804TDFa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test409");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var9 = var8.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape(' ');
    java.lang.String[] var15 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var16 = var11.withHeader(var15);
    java.lang.Character var17 = var11.getCommentMarker();
    org.apache.commons.csv.CSVFormat var18 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("", var11);
    java.util.Spliterator var20 = var19.spliterator();
    java.util.Map var21 = var19.getHeaderMap();
    java.util.Spliterator var22 = var19.spliterator();
    boolean var23 = var5.equals((java.lang.Object)var19);
    java.util.Spliterator var24 = var19.spliterator();
    java.util.Spliterator var25 = var19.spliterator();
    java.util.Iterator var26 = var19.iterator();
    java.util.List var27 = var19.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test410");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator('a');
    java.lang.String var19 = var18.toString();
    boolean var20 = var18.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var18.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var24.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var27 = var26.getQuoteMode();
    boolean var28 = var26.isCommentMarkerSet();
    boolean var29 = var26.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var32 = var31.getHeader();
    boolean var33 = var31.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var36 = var35.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var36.withRecordSeparator('a');
    java.lang.Object[] var39 = new java.lang.Object[] { var36};
    org.apache.commons.csv.CSVFormat var40 = var31.withHeaderComments(var39);
    java.lang.String[] var41 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var42 = var26.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var43 = var22.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var11.withHeader(var41);
    org.apache.commons.csv.CSVFormat var45 = var44.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var47 = var44.withRecordSeparator("Delimiter=< #>  SkipHeaderRecord:truea");
    java.lang.String var48 = var47.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var19.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test411");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var10 = var2.withIgnoreEmptyLines(true);
    char var11 = var10.getDelimiter();
    char var12 = var10.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test412");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape(' ');
    java.lang.String[] var16 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var17 = var12.withHeader(var16);
    boolean var18 = var17.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var20 = var17.withSkipHeaderRecord(true);
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var30 = var29.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var32 = var30.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var35 = var34.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var37 = var35.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var39 = var37.withEscape(' ');
    java.lang.String[] var41 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var42 = var37.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var30.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var27.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var45 = var20.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var7.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var48 = var7.withEscape(' ');
    org.apache.commons.csv.CSVFormat var50 = var48.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test413");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    java.lang.String var4 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames();
    boolean var6 = var3.isQuoteCharacterSet();
    boolean var7 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var9 = var3.withQuote('#');
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var14 = var13.getQuoteMode();
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var18 = var16.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var24 = var20.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var25 = var24.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var29 = var27.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var30 = var29.getQuoteMode();
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var34 = var29.withSkipHeaderRecord(false);
    java.lang.String[] var36 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var37 = var34.withHeader(var36);
    char var38 = var37.getDelimiter();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var43 = var41.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var45 = var43.withQuote((java.lang.Character)'4');
    java.lang.String[] var46 = var43.getHeaderComments();
    org.apache.commons.csv.QuoteMode var47 = var43.getQuoteMode();
    org.apache.commons.csv.CSVFormat var49 = var43.withCommentMarker((java.lang.Character)'a');
    char var50 = var49.getDelimiter();
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var54 = var52.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var55 = var54.getQuoteMode();
    boolean var56 = var54.isCommentMarkerSet();
    boolean var57 = var54.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var59 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var60 = var59.getHeader();
    boolean var61 = var59.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var64 = var63.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var66 = var64.withRecordSeparator('a');
    java.lang.Object[] var67 = new java.lang.Object[] { var64};
    org.apache.commons.csv.CSVFormat var68 = var59.withHeaderComments(var67);
    java.lang.String[] var69 = var68.getHeaderComments();
    org.apache.commons.csv.CSVFormat var70 = var54.withHeaderComments((java.lang.Object[])var69);
    org.apache.commons.csv.CSVFormat var71 = var49.withHeader(var69);
    java.lang.String var72 = var37.format((java.lang.Object[])var69);
    java.lang.String[] var73 = var37.getHeader();
    org.apache.commons.csv.CSVFormat var74 = var24.withHeaderComments((java.lang.Object[])var73);
    org.apache.commons.csv.CSVFormat var75 = var3.withHeader(var73);
    org.apache.commons.csv.CSVFormat var77 = var75.withRecordSeparator("Delimiter=< > QuoteChar=<4> CommentStart=<a> SkipHeaderRecord:true Header:[Delimiter=<#> SkipHeaderRecord:true]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Delimiter=<#> SkipHeaderRecord:falseDelimiter=<#> SkipHeaderRecord:true"+ "'", var72.equals("Delimiter=<#> SkipHeaderRecord:falseDelimiter=<#> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test414");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var12.withDelimiter(' ');
    boolean var16 = var15.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var15.withCommentMarker((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test415");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var10 = var5.getQuoteMode();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var13 = var12.getHeader();
    boolean var14 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var18 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var19 = var16.withHeaderComments((java.lang.Object[])var18);
    org.apache.commons.csv.CSVFormat var20 = var12.withHeaderComments((java.lang.Object[])var18);
    java.lang.String var21 = var5.format((java.lang.Object[])var18);
    boolean var22 = var5.isEscapeCharacterSet();
    boolean var23 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var25 = var5.withRecordSeparator(' ');
    java.lang.String[] var26 = var5.getHeaderComments();
    org.apache.commons.csv.CSVParser var27 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<a> SkipHeaderRecord:false", var5);
    java.util.Iterator var28 = var27.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ALL#MINIMAL#NON_NUMERIC#NONEa"+ "'", var21.equals("ALL#MINIMAL#NON_NUMERIC#NONEa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test416");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withQuote(' ');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("", var2);
    long var7 = var6.getCurrentLineNumber();
    java.util.List var8 = var6.getRecords();
    boolean var9 = var6.isClosed();
    boolean var10 = var6.isClosed();
    long var11 = var6.getCurrentLineNumber();
    java.util.Map var12 = var6.getHeaderMap();
    var6.close();
    java.util.Map var14 = var6.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test417");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    boolean var15 = var14.isEscapeCharacterSet();
    boolean var16 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = var14.withCommentMarker(' ');
    java.lang.String var19 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=<#> CommentStart=< > RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var19.equals("Delimiter=<#> CommentStart=< > RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false"));

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test418");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.String var14 = var13.getRecordSeparator();
    boolean var15 = var13.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    boolean var19 = var17.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var21 = var17.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var24.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var27 = var26.getQuoteMode();
    java.lang.Character var28 = var26.getCommentMarker();
    java.lang.Object[] var29 = new java.lang.Object[] { var26};
    java.lang.String var30 = var22.format(var29);
    boolean var31 = var13.equals((java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '4'+ "'", var28.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var30.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test419");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var13 = var12.getHeader();
    boolean var14 = var12.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    java.lang.Object[] var20 = new java.lang.Object[] { var17};
    org.apache.commons.csv.CSVFormat var21 = var12.withHeaderComments(var20);
    java.lang.String[] var22 = var21.getHeaderComments();
    org.apache.commons.csv.CSVFormat var23 = var10.withHeader(var22);
    org.apache.commons.csv.CSVFormat var25 = var10.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var27 = var10.withAllowMissingColumnNames(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var29 = var27.withEscape((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test420");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    boolean var11 = var7.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var7);
    java.util.Iterator var13 = var12.iterator();
    var12.close();
    long var15 = var12.getRecordNumber();
    var12.close();
    var12.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test421");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var12 = var6.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var14 = var6.withRecordSeparator(' ');
    java.lang.String[] var15 = var6.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test422");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var7.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var11 = var9.withEscape(' ');
    java.lang.String[] var13 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var14 = var9.withHeader(var13);
    org.apache.commons.csv.CSVFormat var15 = var2.withHeader(var13);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withEscape(' ');
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var30 = var25.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var18.withHeader(var29);
    org.apache.commons.csv.CSVFormat var32 = var2.withHeader(var29);
    org.apache.commons.csv.CSVFormat var34 = var32.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.QuoteMode var35 = var34.getQuoteMode();
    boolean var36 = var34.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = var34.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var40 = var34.withCommentMarker((java.lang.Character)'a');
    char var41 = var40.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == '#');

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test423");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('4');
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    boolean var16 = var14.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var14.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test424");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withNullString("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var16 = var12.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var18 = var12.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var21 = var20.getHeader();
    boolean var22 = var20.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var25 = var24.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator('a');
    java.lang.Object[] var28 = new java.lang.Object[] { var25};
    org.apache.commons.csv.CSVFormat var29 = var20.withHeaderComments(var28);
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var37 = var35.withEscape(' ');
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var35.withHeader(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var44 = var40.withEscape(' ');
    boolean var45 = var29.equals((java.lang.Object)' ');
    org.apache.commons.csv.CSVFormat var46 = var29.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var47 = var29.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var50 = var49.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var52 = var50.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var54 = var52.withEscape(' ');
    java.lang.String[] var56 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var57 = var52.withHeader(var56);
    org.apache.commons.csv.CSVFormat var59 = var57.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var61 = var57.withEscape(' ');
    org.apache.commons.csv.CSVFormat var63 = var61.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var65 = var61.withCommentMarker('4');
    boolean var66 = var61.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var69 = var68.getHeader();
    boolean var70 = var68.isCommentMarkerSet();
    boolean var71 = var68.getIgnoreSurroundingSpaces();
    boolean var72 = var68.isNullStringSet();
    org.apache.commons.csv.CSVFormat var74 = var68.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var75 = var68.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var76 = var75.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var77 = var76.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var79 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var80 = var79.getHeader();
    boolean var81 = var79.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var83 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var84 = var83.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var86 = var84.withRecordSeparator('a');
    java.lang.Object[] var87 = new java.lang.Object[] { var84};
    org.apache.commons.csv.CSVFormat var88 = var79.withHeaderComments(var87);
    java.lang.String[] var89 = var88.getHeaderComments();
    org.apache.commons.csv.CSVFormat var90 = var77.withHeader(var89);
    org.apache.commons.csv.CSVFormat var91 = var61.withHeader(var89);
    org.apache.commons.csv.CSVFormat var92 = var47.withHeaderComments((java.lang.Object[])var89);
    org.apache.commons.csv.CSVFormat var93 = var12.withHeaderComments((java.lang.Object[])var89);
    boolean var94 = var12.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test425");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    boolean var4 = var2.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'4');
    boolean var11 = var2.equals((java.lang.Object)var8);
    org.apache.commons.csv.CSVFormat var13 = var2.withEscape((java.lang.Character)'4');
    boolean var14 = var13.isQuoteCharacterSet();
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("", var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test426");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var10 = var2.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    java.lang.Character var12 = var10.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test427");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    boolean var4 = var2.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var6.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var11 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SurroundingSpaces:ignored SkipHeaderRecord:false", var11);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    java.lang.String[] var18 = var15.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    boolean var22 = var20.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var24 = var20.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var26 = var20.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var30 = var28.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var31 = var28.getHeaderComments();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var34 = var33.withIgnoreEmptyLines();
    java.lang.String var35 = var33.toString();
    java.lang.Object[] var36 = new java.lang.Object[] { var33};
    java.lang.String var37 = var28.format(var36);
    org.apache.commons.csv.CSVFormat var38 = var26.withHeaderComments(var36);
    org.apache.commons.csv.CSVFormat var39 = var15.withHeaderComments(var36);
    org.apache.commons.csv.CSVFormat var40 = var11.withHeaderComments(var36);
    org.apache.commons.csv.CSVFormat var41 = var11.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var35.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var37.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test428");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var14 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments((java.lang.Object[])var14);
    boolean var16 = var1.equals((java.lang.Object)var15);
    org.apache.commons.csv.CSVFormat var18 = var15.withCommentMarker(' ');
    boolean var19 = var18.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var18.withRecordSeparator('a');
    boolean var22 = var18.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test429");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    org.apache.commons.csv.CSVFormat var12 = var5.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator('4');
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> Escape=<4> CommentStart=< > SurroundingSpaces:ignored SkipHeaderRecord:false", var16);
    java.util.List var20 = var19.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test430");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord(false);
    org.apache.commons.csv.QuoteMode var7 = var6.getQuoteMode();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var6.withRecordSeparator('#');
    org.apache.commons.csv.QuoteMode var12 = var11.getQuoteMode();
    java.lang.String[] var13 = var11.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test431");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var10.withQuote('a');
    boolean var19 = var18.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    char var21 = var20.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == '#');

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test432");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreSurroundingSpaces(true);
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var18 = var15.getHeaderComments();
    boolean var19 = var15.isCommentMarkerSet();
    java.lang.String var20 = var15.toString();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var23 = var22.getHeader();
    boolean var24 = var22.isCommentMarkerSet();
    boolean var25 = var22.getIgnoreSurroundingSpaces();
    boolean var26 = var22.isNullStringSet();
    org.apache.commons.csv.CSVFormat var28 = var22.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var29 = var22.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var30 = var29.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var34 = var33.getHeader();
    boolean var35 = var33.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    java.lang.Object[] var41 = new java.lang.Object[] { var38};
    org.apache.commons.csv.CSVFormat var42 = var33.withHeaderComments(var41);
    java.lang.String[] var43 = var42.getHeaderComments();
    org.apache.commons.csv.CSVFormat var44 = var31.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var15.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var10.withHeader(var43);
    org.apache.commons.csv.CSVFormat var48 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var50 = var48.withDelimiter(' ');
    java.lang.String var51 = var50.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var53 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var54 = var53.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var56 = var54.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var58 = var56.withEscape(' ');
    java.lang.String[] var60 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var61 = var56.withHeader(var60);
    org.apache.commons.csv.CSVFormat var63 = var61.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var65 = var61.withEscape(' ');
    java.lang.String[] var66 = var61.getHeaderComments();
    java.lang.String var67 = var61.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var71 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var73 = var71.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var74 = var73.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var76 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var78 = var76.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var79 = var78.getQuoteMode();
    boolean var80 = var78.isCommentMarkerSet();
    boolean var81 = var73.equals((java.lang.Object)var80);
    org.apache.commons.csv.CSVFormat var83 = var73.withDelimiter('#');
    boolean var84 = var73.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var86 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var87 = var86.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var89 = var87.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var91 = var89.withEscape(' ');
    java.lang.String[] var93 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var94 = var89.withHeader(var93);
    org.apache.commons.csv.CSVFormat var95 = var73.withHeader(var93);
    org.apache.commons.csv.CSVFormat var96 = var69.withHeaderComments((java.lang.Object[])var93);
    org.apache.commons.csv.CSVFormat var97 = var61.withHeaderComments((java.lang.Object[])var93);
    java.lang.String var98 = var50.format((java.lang.Object[])var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var20.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "a"+ "'", var51.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "a"+ "'", var67.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var98.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test433");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.String var10 = var4.toString();
    org.apache.commons.csv.CSVFormat var12 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var16 = var12.withSkipHeaderRecord(false);
    char var17 = var12.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == '#');

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test434");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'4');
    java.lang.Character var8 = var7.getQuoteCharacter();
    boolean var9 = var7.getSkipHeaderRecord();
    boolean var11 = var7.equals((java.lang.Object)(byte)(-1));
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var7);
    long var13 = var12.getRecordNumber();
    java.util.Spliterator var14 = var12.spliterator();
    java.util.Map var15 = var12.getHeaderMap();
    var12.close();
    var12.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '4'+ "'", var8.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test435");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    boolean var7 = var4.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var9.withCommentMarker((java.lang.Character)'4');
    java.lang.Character var13 = var12.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var15 = var12.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test436");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var3.withSkipHeaderRecord(false);
    java.lang.String[] var10 = new java.lang.String[] { "Delimiter=<#> SkipHeaderRecord:false"};
    org.apache.commons.csv.CSVFormat var11 = var8.withHeader(var10);
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test437");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('a');
    org.apache.commons.csv.CSVFormat var4 = var2.withQuote((java.lang.Character)'4');
    java.lang.String var5 = var2.toString();
    org.apache.commons.csv.CSVFormat var7 = var2.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var19 = var17.withEscape(' ');
    java.lang.String[] var21 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var22 = var17.withHeader(var21);
    org.apache.commons.csv.CSVFormat var23 = var10.withHeader(var21);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var26 = var25.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var28 = var26.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var31 = var30.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var33 = var31.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var35 = var33.withEscape(' ');
    java.lang.String[] var37 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var38 = var33.withHeader(var37);
    org.apache.commons.csv.CSVFormat var39 = var26.withHeader(var37);
    org.apache.commons.csv.CSVFormat var40 = var10.withHeader(var37);
    org.apache.commons.csv.CSVFormat var42 = var40.withIgnoreSurroundingSpaces(false);
    boolean var43 = var2.equals((java.lang.Object)var42);
    org.apache.commons.csv.CSVFormat var45 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var47 = var45.withCommentMarker('4');
    java.lang.String var48 = var47.getNullString();
    org.apache.commons.csv.CSVParser var49 = org.apache.commons.csv.CSVParser.parse("Delimiter=<a#> SkipHeaaderRecord:truea", var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=<a> SkipHeaderRecord:false"+ "'", var5.equals("Delimiter=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test438");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.QuoteMode var6 = var5.getQuoteMode();
    boolean var7 = var5.isEscapeCharacterSet();
    java.lang.Character var8 = var5.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator('#');
    java.lang.Character var11 = var10.getCommentMarker();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("Delimiter=<#> SkipHeaderRecord:trueDelimiter=<#> CommentStart=<4> NullString=<Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true> EmptyLines:ignored SkipHeaderRecord:false");
    java.lang.Character var14 = var10.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ' '+ "'", var11.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test439");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var9 = var8.getQuoteMode();
    boolean var10 = var8.isCommentMarkerSet();
    boolean var11 = var3.equals((java.lang.Object)var10);
    org.apache.commons.csv.CSVFormat var13 = var3.withDelimiter('#');
    boolean var14 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    java.lang.String[] var23 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var24 = var19.withHeader(var23);
    org.apache.commons.csv.CSVFormat var25 = var3.withHeader(var23);
    org.apache.commons.csv.CSVFormat var27 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var29 = var27.withIgnoreEmptyLines(true);
    java.lang.String var30 = var29.getNullString();
    org.apache.commons.csv.CSVFormat var32 = var29.withCommentMarker(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test440");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    boolean var10 = var9.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var9.withSkipHeaderRecord(true);
    java.lang.String[] var13 = var12.getHeader();
    boolean var14 = var12.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var27.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withEscape(' ');
    java.lang.String[] var33 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var34 = var29.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var22.withHeader(var33);
    org.apache.commons.csv.CSVFormat var36 = var19.withHeaderComments((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat var37 = var12.withHeader(var33);
    org.apache.commons.csv.CSVFormat var38 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var40 = var38.withDelimiter('#');
    java.lang.String[] var41 = var40.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test441");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var5 = var2.withIgnoreEmptyLines();
    boolean var6 = var2.getIgnoreSurroundingSpaces();
    java.lang.String var7 = var2.getRecordSeparator();
    char var8 = var2.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == '#');

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test442");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var2.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var15 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments((java.lang.Object[])var15);
    boolean var17 = var2.equals((java.lang.Object)var16);
    java.lang.String[] var18 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var19 = var2.withAllowMissingColumnNames();
    boolean var20 = var19.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withEscape(' ');
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var30 = var25.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var19.withHeader(var29);
    boolean var32 = var31.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var34 = var31.withCommentMarker('4');
    org.apache.commons.csv.CSVParser var35 = org.apache.commons.csv.CSVParser.parse("ALL#MINIMAL#NON_NUMERIC#NONEa", var31);
    long var36 = var35.getCurrentLineNumber();
    java.util.Iterator var37 = var35.iterator();
    var35.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test443");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    java.lang.Character var9 = var6.getEscapeCharacter();
    char var10 = var6.getDelimiter();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var13 = var12.getHeader();
    boolean var14 = var12.isCommentMarkerSet();
    boolean var15 = var12.getIgnoreSurroundingSpaces();
    boolean var16 = var12.isNullStringSet();
    org.apache.commons.csv.CSVFormat var18 = var12.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var19 = var12.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var12.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var25 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var26 = var23.withHeaderComments((java.lang.Object[])var25);
    boolean var27 = var12.equals((java.lang.Object)var26);
    java.lang.String[] var28 = var12.getHeader();
    org.apache.commons.csv.CSVFormat var29 = var12.withAllowMissingColumnNames();
    boolean var30 = var29.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var33 = var32.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var37 = var35.withEscape(' ');
    java.lang.String[] var39 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var40 = var35.withHeader(var39);
    org.apache.commons.csv.CSVFormat var41 = var29.withHeader(var39);
    org.apache.commons.csv.CSVFormat var42 = var6.withHeader(var39);
    org.apache.commons.csv.CSVFormat var43 = var6.withSkipHeaderRecord();
    boolean var44 = var43.isNullStringSet();
    java.lang.Character var45 = var43.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var47 = var43.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test444");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    boolean var13 = var12.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var12.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test445");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=<a#> SkipHeaaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test446");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var9 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var11 = var8.withQuote(' ');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("", var8);
    java.util.List var13 = var12.getRecords();
    java.util.Iterator var14 = var12.iterator();
    boolean var15 = var1.equals((java.lang.Object)var12);
    long var16 = var12.getRecordNumber();
    java.util.List var17 = var12.getRecords();
    java.util.List var18 = var12.getRecords();
    var12.close();
    var12.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test447");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    org.apache.commons.csv.CSVFormat var11 = var4.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var14 = var4.withAllowMissingColumnNames();
    char var15 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var16 = var4.withIgnoreEmptyLines();
    boolean var17 = var16.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test448");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    boolean var13 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var15 = var10.withDelimiter('4');
    boolean var16 = var10.getIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var17 = var10.getQuoteMode();
    boolean var18 = var10.isQuoteCharacterSet();
    boolean var19 = var10.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test449");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    boolean var11 = var10.isCommentMarkerSet();
    boolean var12 = var10.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreSurroundingSpaces();
    char var14 = var13.getDelimiter();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("Default#Excel#MySQL#RFC4180#TDF");
    java.lang.Character var17 = var13.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test450");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreHeaderCase(false);
    java.lang.Character var14 = var13.getCommentMarker();
    boolean var15 = var13.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var13.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var18 = var13.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = var13.withAllowMissingColumnNames(false);
    boolean var21 = var20.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test451");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var5 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var7 = var4.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var11 = var9.withRecordSeparator("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", var11);
    var12.close();
    long var14 = var12.getCurrentLineNumber();
    java.util.Map var15 = var12.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test452");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var11 = var7.withNullString("a");
    org.apache.commons.csv.CSVFormat var13 = var11.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var15 = var11.withRecordSeparator("");
    boolean var16 = var15.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var18 = var15.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test453");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    java.lang.String var8 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var10 = var6.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator("ALL#MINIMAL#NON_NUMERIC#NONE#");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test454");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var10);
    java.util.List var12 = var11.getRecords();
    boolean var13 = var11.isClosed();
    var11.close();
    long var15 = var11.getRecordNumber();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var16 = var11.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1L);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test455");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote('4');
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreSurroundingSpaces(true);
    java.lang.String var11 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withRecordSeparator("Default#Excel#MySQL#RFC4180#TDF");
    java.lang.Character var14 = var13.getCommentMarker();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("Delimiter=<#> QuoteChar=<4> NullString=<> RecordSeparator=<a> SkipHeaderRecord:true");
    java.lang.Character var17 = var13.getCommentMarker();
    org.apache.commons.csv.CSVFormat var19 = var13.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var21.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var27.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withEscape(' ');
    org.apache.commons.csv.CSVFormat var33 = var29.withQuote('4');
    java.lang.String var34 = var29.getNullString();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var37 = var36.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var39 = var37.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var41 = var39.withQuote((java.lang.Character)'4');
    java.lang.Character var42 = var41.getQuoteCharacter();
    boolean var43 = var41.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var45 = var41.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var48 = var47.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var50 = var48.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var52 = var50.withEscape(' ');
    java.lang.String[] var54 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var55 = var50.withHeader(var54);
    boolean var56 = var55.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var58 = var55.withSkipHeaderRecord(true);
    java.lang.String[] var59 = var58.getHeader();
    org.apache.commons.csv.CSVFormat var60 = var41.withHeader(var59);
    java.lang.String var61 = var29.format((java.lang.Object[])var59);
    java.lang.String var62 = var23.format((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var64 = var23.withEscape((java.lang.Character)' ');
    boolean var65 = var19.equals((java.lang.Object)var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var67 = var19.withQuote('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var11.equals("Delimiter=<#> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + '4'+ "'", var42.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"+ "'", var61.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var62.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test456");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = var6.withCommentMarker(' ');
    java.lang.Character var11 = var6.getQuoteCharacter();
    boolean var12 = var6.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test457");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var4 = var3.withSkipHeaderRecord();
    boolean var5 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var6 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var6.withRecordSeparator("Delimiter=<#> CommentStart=< > SkipHeaderRecord:false");
    java.lang.String[] var9 = var8.getHeaderComments();
    boolean var10 = var8.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = var8.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test458");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    java.lang.String[] var5 = var2.getHeaderComments();
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var8 = var7.withSkipHeaderRecord();
    boolean var9 = var7.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var11 = var7.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = var7.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var18 = var15.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreEmptyLines();
    java.lang.String var22 = var20.toString();
    java.lang.Object[] var23 = new java.lang.Object[] { var20};
    java.lang.String var24 = var15.format(var23);
    org.apache.commons.csv.CSVFormat var25 = var13.withHeaderComments(var23);
    org.apache.commons.csv.CSVFormat var26 = var2.withHeaderComments(var23);
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var22.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test459");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Spliterator var14 = var13.spliterator();
    java.util.Map var15 = var13.getHeaderMap();
    java.util.List var16 = var13.getRecords();
    java.util.Iterator var17 = var13.iterator();
    java.util.List var18 = var13.getRecords();
    java.util.List var19 = var13.getRecords();
    var13.close();
    long var21 = var13.getRecordNumber();
    long var22 = var13.getCurrentLineNumber();
    boolean var23 = var13.isClosed();
    long var24 = var13.getRecordNumber();
    java.util.Map var25 = var13.getHeaderMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var26 = var13.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test460");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    boolean var14 = var13.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var16 = var13.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test461");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=<#> Escape=< > RecordSeparator=<4> SkipHeaderRecord:true");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test462");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    boolean var8 = var5.getIgnoreSurroundingSpaces();
    java.lang.Character var9 = var5.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false", var10);
    java.util.List var12 = var11.getRecords();
    boolean var13 = var11.isClosed();
    boolean var14 = var11.isClosed();
    long var15 = var11.getCurrentLineNumber();
    long var16 = var11.getCurrentLineNumber();
    java.util.Iterator var17 = var11.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test463");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var4 = var1.getHeaderComments();
    boolean var5 = var1.isCommentMarkerSet();
    java.lang.String var6 = var1.toString();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var9 = var8.getHeader();
    boolean var10 = var8.isCommentMarkerSet();
    boolean var11 = var8.getIgnoreSurroundingSpaces();
    boolean var12 = var8.isNullStringSet();
    org.apache.commons.csv.CSVFormat var14 = var8.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var15 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var16 = var15.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var20 = var19.getHeader();
    boolean var21 = var19.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var24.withRecordSeparator('a');
    java.lang.Object[] var27 = new java.lang.Object[] { var24};
    org.apache.commons.csv.CSVFormat var28 = var19.withHeaderComments(var27);
    java.lang.String[] var29 = var28.getHeaderComments();
    org.apache.commons.csv.CSVFormat var30 = var17.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var1.withHeader(var29);
    org.apache.commons.csv.CSVFormat var33 = var1.withEscape((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var34 = var1.withSkipHeaderRecord();
    char var35 = var34.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var6.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == '#');

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test464");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('4');
    org.apache.commons.csv.QuoteMode var13 = var12.getQuoteMode();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote((java.lang.Character)'4');
    java.lang.Character var21 = var20.getQuoteCharacter();
    boolean var22 = var20.getSkipHeaderRecord();
    java.lang.Character var23 = var20.getEscapeCharacter();
    char var24 = var20.getDelimiter();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var27 = var26.getHeader();
    boolean var28 = var26.isCommentMarkerSet();
    boolean var29 = var26.getIgnoreSurroundingSpaces();
    boolean var30 = var26.isNullStringSet();
    org.apache.commons.csv.CSVFormat var32 = var26.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var33 = var26.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var35 = var26.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var39 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments((java.lang.Object[])var39);
    boolean var41 = var26.equals((java.lang.Object)var40);
    java.lang.String[] var42 = var26.getHeader();
    org.apache.commons.csv.CSVFormat var43 = var26.withAllowMissingColumnNames();
    boolean var44 = var43.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var47 = var46.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var49 = var47.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var51 = var49.withEscape(' ');
    java.lang.String[] var53 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var54 = var49.withHeader(var53);
    org.apache.commons.csv.CSVFormat var55 = var43.withHeader(var53);
    org.apache.commons.csv.CSVFormat var56 = var20.withHeader(var53);
    boolean var57 = var12.equals((java.lang.Object)var20);
    org.apache.commons.csv.CSVFormat var59 = var12.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:true");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + '4'+ "'", var21.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test465");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    boolean var4 = var3.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test466");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.QuoteMode var2 = var1.getQuoteMode();
    boolean var3 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var6 = var5.withAllowMissingColumnNames();
    java.lang.Character var7 = var5.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test467");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    java.lang.String var5 = var4.toString();
    boolean var6 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var4.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var13 = var12.getQuoteMode();
    boolean var14 = var12.isCommentMarkerSet();
    boolean var15 = var12.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var18 = var17.getHeader();
    boolean var19 = var17.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    java.lang.Object[] var25 = new java.lang.Object[] { var22};
    org.apache.commons.csv.CSVFormat var26 = var17.withHeaderComments(var25);
    java.lang.String[] var27 = var26.getHeaderComments();
    org.apache.commons.csv.CSVFormat var28 = var12.withHeaderComments((java.lang.Object[])var27);
    org.apache.commons.csv.CSVFormat var29 = var8.withHeader(var27);
    org.apache.commons.csv.CSVFormat var31 = var29.withEscape((java.lang.Character)' ');
    boolean var32 = var29.getSkipHeaderRecord();
    boolean var33 = var29.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var5.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test468");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withIgnoreEmptyLines();
    java.lang.String var3 = var1.toString();
    boolean var4 = var1.isEscapeCharacterSet();
    boolean var5 = var1.getIgnoreSurroundingSpaces();
    boolean var6 = var1.isCommentMarkerSet();
    boolean var7 = var1.getAllowMissingColumnNames();
    boolean var8 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var9 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var1.withNullString("Delimiter=<#> QuoteChar=<4> RecordSeparator=<#> SurroundingSpaces:ignored SkipHeaderRecord:true");
    java.lang.Character var12 = var11.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false"+ "'", var3.equals("Delimiter=<#> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test469");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    org.apache.commons.csv.CSVFormat var9 = var5.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var10 = var5.getQuoteMode();
    boolean var11 = var5.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var15 = var5.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withEscape((java.lang.Character)'#');
    java.lang.String var20 = var17.getNullString();
    org.apache.commons.csv.CSVParser var21 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > SkipHeaderRecord:false", var17);
    boolean var22 = var17.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test470");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    boolean var4 = var2.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator("");
    java.lang.Character var9 = var2.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var11 = var2.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false");
    java.lang.String var12 = var2.getNullString();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> Escape=< > QuoteChar=<4> NullString=<> RecordSeparator=<a> SkipHeaderRecord:true", var2);
    java.util.Map var14 = var13.getHeaderMap();
    boolean var15 = var13.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test471");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreEmptyLines();
    boolean var9 = var8.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var8.withQuote((java.lang.Character)' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test472");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.QuoteMode[] var19 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var20 = var18.withHeaderComments((java.lang.Object[])var19);
    boolean var21 = var20.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var23 = var20.withIgnoreSurroundingSpaces(true);
    boolean var24 = var23.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test473");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(true);
    boolean var11 = var10.getSkipHeaderRecord();
    java.lang.String[] var12 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    boolean var16 = var14.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var14.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var19 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var24 = var23.getQuoteMode();
    java.lang.Character var25 = var23.getCommentMarker();
    java.lang.Object[] var26 = new java.lang.Object[] { var23};
    java.lang.String var27 = var19.format(var26);
    org.apache.commons.csv.CSVFormat var28 = var10.withHeaderComments(var26);
    java.lang.String[] var29 = var10.getHeaderComments();
    java.lang.String var30 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '4'+ "'", var25.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"+ "'", var27.equals("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"+ "'", var30.equals("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true"));

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test474");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.String[] var7 = var4.getHeaderComments();
    org.apache.commons.csv.QuoteMode var8 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var13 = var10.withAllowMissingColumnNames();
    java.lang.String[] var14 = var13.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test475");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var13 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var15 = var10.withCommentMarker('4');
    java.lang.String var16 = var10.getNullString();
    boolean var17 = var10.isEscapeCharacterSet();
    boolean var18 = var8.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var22 = var8.withRecordSeparator("Delimiter=<#> CommentStart=< > SkipHeaderRecord:false");
    java.lang.String[] var23 = var8.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test476");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var12.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test477");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = var13.withNullString("Delimiter=<#> QuoteChar=<4> RecordSeparator=<a> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker(' ');
    boolean var18 = var15.getIgnoreSurroundingSpaces();
    java.lang.Character var19 = var15.getCommentMarker();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var21 = var15.withCommentMarker((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test478");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var5.withRecordSeparator('4');
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var14 = var10.withIgnoreSurroundingSpaces(true);
    java.lang.Character var15 = var14.getQuoteCharacter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var17 = var14.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test479");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    java.lang.Character var8 = var1.getEscapeCharacter();
    java.lang.Character var9 = var1.getQuoteCharacter();
    boolean var10 = var1.getIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode var11 = var1.getQuoteMode();
    org.apache.commons.csv.CSVFormat var13 = var1.withRecordSeparator('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test480");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    java.lang.String[] var11 = var10.getHeaderComments();
    boolean var12 = var10.getIgnoreEmptyLines();
    boolean var13 = var10.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test481");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withEscape('a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false", var5);
    java.util.Map var7 = var6.getHeaderMap();
    long var8 = var6.getCurrentLineNumber();
    boolean var9 = var6.isClosed();
    java.util.Iterator var10 = var6.iterator();
    long var11 = var6.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test482");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var2.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var8 = var2.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var10 = var2.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var11 = var10.withSkipHeaderRecord();
    java.lang.String var12 = var10.getRecordSeparator();
    java.lang.String var13 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var13.equals("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:true"));

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test483");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var3.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var13 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var15 = var10.withCommentMarker('4');
    java.lang.String var16 = var10.getNullString();
    boolean var17 = var10.isEscapeCharacterSet();
    boolean var18 = var8.equals((java.lang.Object)var17);
    org.apache.commons.csv.CSVFormat var20 = var8.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var22 = var8.withRecordSeparator("Delimiter=<#> CommentStart=< > SkipHeaderRecord:false");
    boolean var23 = var22.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test484");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var9 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var9.withAllowMissingColumnNames();
    java.lang.String[] var11 = var10.getHeaderComments();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreHeaderCase(false);
    java.lang.Character var14 = var13.getCommentMarker();
    boolean var15 = var13.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var13.withDelimiter('#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var19 = var13.withEscape((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test485");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var8 = var6.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var10 = var6.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var11 = var10.withAllowMissingColumnNames();
    char var12 = var11.getDelimiter();
    java.lang.String[] var13 = var11.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test486");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat.Predefined[] var8 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var9 = var1.withHeaderComments((java.lang.Object[])var8);
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withQuote((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var20 = var16.withCommentMarker(' ');
    java.lang.String[] var21 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var26 = var24.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var28 = var26.withEscape(' ');
    java.lang.String[] var30 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var31 = var26.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withNullString("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var35 = var31.withEscape(' ');
    org.apache.commons.csv.CSVFormat var37 = var35.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var39 = var35.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var41 = var35.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var45 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var47 = var45.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var49 = var47.withEscape(' ');
    org.apache.commons.csv.CSVFormat var51 = var47.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var52 = var47.getQuoteMode();
    org.apache.commons.csv.CSVFormat var53 = var47.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var55 = var53.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var57 = var55.withEscape(' ');
    java.lang.String var58 = var57.toString();
    org.apache.commons.csv.CSVParser var59 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:falsea", var57);
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var62 = var61.getHeader();
    boolean var63 = var61.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var66 = var65.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var68 = var66.withRecordSeparator('a');
    java.lang.Object[] var69 = new java.lang.Object[] { var66};
    org.apache.commons.csv.CSVFormat var70 = var61.withHeaderComments(var69);
    java.lang.String[] var71 = var70.getHeaderComments();
    java.lang.String var72 = var57.format((java.lang.Object[])var71);
    org.apache.commons.csv.CSVFormat var73 = var35.withHeader(var71);
    java.lang.String var74 = var16.format((java.lang.Object[])var71);
    org.apache.commons.csv.CSVFormat var75 = var11.withHeader(var71);
    org.apache.commons.csv.CSVFormat var77 = var11.withIgnoreSurroundingSpaces(false);
    java.lang.String[] var78 = var11.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"+ "'", var58.equals("Delimiter=<#> Escape=< > CommentStart=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Delimiter=< #>  SkipHeaderRecord:truea"+ "'", var72.equals("Delimiter=< #>  SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "Delimiter=<#> SkipHeaderRecord:truea"+ "'", var74.equals("Delimiter=<#> SkipHeaderRecord:truea"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test487");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var5.withEscape(' ');
    java.lang.String[] var9 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var10 = var5.withHeader(var9);
    java.lang.Character var11 = var5.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("", var5);
    java.util.Spliterator var14 = var13.spliterator();
    java.util.Map var15 = var13.getHeaderMap();
    java.util.List var16 = var13.getRecords();
    java.util.Iterator var17 = var13.iterator();
    java.util.List var18 = var13.getRecords();
    java.util.List var19 = var13.getRecords();
    var13.close();
    long var21 = var13.getRecordNumber();
    long var22 = var13.getCurrentLineNumber();
    boolean var23 = var13.isClosed();
    long var24 = var13.getCurrentLineNumber();
    var13.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0L);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test488");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote((java.lang.Character)'4');
    java.lang.Character var7 = var6.getQuoteCharacter();
    boolean var8 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var12 = var6.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var22 = var21.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var22.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var26 = var24.withEscape(' ');
    java.lang.String[] var28 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var29 = var24.withHeader(var28);
    org.apache.commons.csv.CSVFormat var30 = var17.withHeader(var28);
    org.apache.commons.csv.CSVFormat var32 = var17.withRecordSeparator("Delimiter=<#> SurroundingSpaces:ignored SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var34 = var32.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:true");
    boolean var35 = var32.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var38 = var37.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var42 = var40.withEscape(' ');
    org.apache.commons.csv.CSVFormat var44 = var40.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var45 = var40.getQuoteMode();
    org.apache.commons.csv.CSVFormat var46 = var40.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var46.withCommentMarker('4');
    boolean var49 = var46.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var51 = var46.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var54 = var51.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var57 = var56.getHeader();
    boolean var58 = var56.isCommentMarkerSet();
    boolean var59 = var56.getIgnoreSurroundingSpaces();
    boolean var60 = var56.isNullStringSet();
    org.apache.commons.csv.CSVFormat var62 = var56.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var63 = var56.withIgnoreSurroundingSpaces();
    boolean var64 = var63.isNullStringSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var65 = org.apache.commons.csv.CSVFormat.Predefined.values();
    boolean var66 = var63.equals((java.lang.Object)var65);
    java.lang.String var67 = var51.format((java.lang.Object[])var65);
    org.apache.commons.csv.CSVFormat var68 = var32.withHeaderComments((java.lang.Object[])var65);
    boolean var69 = var14.equals((java.lang.Object)var32);
    org.apache.commons.csv.CSVFormat var71 = var32.withIgnoreEmptyLines(true);
    boolean var72 = var71.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '4'+ "'", var7.equals('4'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Default4Excel4MySQL4RFC41804TDFa"+ "'", var67.equals("Default4Excel4MySQL4RFC41804TDFa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test489");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    boolean var4 = var1.getIgnoreSurroundingSpaces();
    boolean var5 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var14 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments((java.lang.Object[])var14);
    boolean var16 = var1.equals((java.lang.Object)var15);
    java.lang.String[] var17 = var1.getHeader();
    java.lang.Character var18 = var1.getCommentMarker();
    org.apache.commons.csv.CSVFormat var19 = var1.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = var20.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var24 = var20.withQuote((java.lang.Character)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test490");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
    org.apache.commons.csv.CSVFormat var3 = var1.withRecordSeparator("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true");
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var7 = var5.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var8 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var13 = var12.getQuoteMode();
    boolean var14 = var12.isCommentMarkerSet();
    boolean var15 = var7.equals((java.lang.Object)var14);
    org.apache.commons.csv.CSVFormat var17 = var7.withDelimiter('#');
    boolean var18 = var1.equals((java.lang.Object)var17);
    java.lang.String var19 = var1.toString();
    boolean var20 = var1.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var22 = var1.withCommentMarker((java.lang.Character)'#');
    java.lang.String var23 = var22.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=< > SkipHeaderRecord:false"+ "'", var19.equals("Delimiter=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Delimiter=< > CommentStart=<#> SkipHeaderRecord:false"+ "'", var23.equals("Delimiter=< > CommentStart=<#> SkipHeaderRecord:false"));

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test491");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'4');
    java.lang.String[] var5 = var2.getHeaderComments();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('4');
    char var8 = var7.getDelimiter();
    boolean var9 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var7.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> RecordSeparator=<4> EmptyLines:ignored SkipHeaderRecord:false", var11);
    var14.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test492");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.QuoteMode var5 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var7 = var4.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var9 = var7.withNullString("Delimiter=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)'4');
    boolean var14 = var13.isNullStringSet();
    java.lang.String[] var15 = var13.getHeader();
    org.apache.commons.csv.CSVFormat var16 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("Delimiter=< > CommentStart=<#> SkipHeaderRecord:false", var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test493");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    boolean var9 = var8.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test494");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    boolean var4 = var2.isCommentMarkerSet();
    boolean var5 = var2.getIgnoreSurroundingSpaces();
    boolean var6 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var8 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var2.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.QuoteMode[] var15 = org.apache.commons.csv.QuoteMode.values();
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments((java.lang.Object[])var15);
    boolean var17 = var2.equals((java.lang.Object)var16);
    java.lang.String[] var18 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var19 = var2.withAllowMissingColumnNames();
    boolean var20 = var19.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withEscape(' ');
    java.lang.String[] var29 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var30 = var25.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var19.withHeader(var29);
    boolean var32 = var31.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var34 = var31.withCommentMarker('4');
    org.apache.commons.csv.CSVParser var35 = org.apache.commons.csv.CSVParser.parse("ALL#MINIMAL#NON_NUMERIC#NONEa", var31);
    var35.close();
    long var37 = var35.getRecordNumber();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var38 = var35.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0L);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test495");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var2 = var1.getHeader();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var6 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var8 = var1.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test496");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    java.lang.String[] var8 = new java.lang.String[] { "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"};
    org.apache.commons.csv.CSVFormat var9 = var4.withHeader(var8);
    java.lang.String var10 = var4.toString();
    boolean var11 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var4.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(false);
    java.lang.Character var16 = var13.getCommentMarker();
    java.lang.String var17 = var13.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"+ "'", var10.equals("Delimiter=<#> RecordSeparator=<a> SkipHeaderRecord:true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test497");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var4 = var2.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var5 = var4.withSkipHeaderRecord();
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var7 = var5.withIgnoreEmptyLines();
    boolean var8 = var7.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:truea", var7);
    org.apache.commons.csv.CSVFormat var11 = var7.withDelimiter('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test498");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('#');
    java.lang.String[] var3 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var5 = var2.withEscape('a');
    org.apache.commons.csv.CSVParser var6 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> CommentStart=<4> SkipHeaderRecord:false", var5);
    boolean var7 = var5.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test499");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    boolean var3 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var6 = var5.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var8 = var5.withRecordSeparator('4');
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var10 = var5.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var14 = var10.withCommentMarker((java.lang.Character)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test500");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var9 = var4.getQuoteMode();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines();
    boolean var12 = var10.equals((java.lang.Object)(-1.0f));
    org.apache.commons.csv.CSVFormat var14 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var10.withRecordSeparator("Delimiter=<#> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var10.withQuote('a');
    boolean var19 = var18.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    boolean var24 = var23.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

}
